%include "vVc/assembly/w_runtime/vV_defines.asm"		
%include "vVc/assembly/w_runtime/vV_error_code.asm"		
%include "vVc/assembly/w_runtime/vV_runtime.asm"		
%include "vVc/assembly/w_runtime/vV_system00.asm"		
%include "vVc/assembly/w_runtime/vV_errors.asm"		
%include "vVc/assembly/w_runtime/vV_system10.asm"		
%include "vVc/assembly/w_runtime/vV_io.asm"			
%include "vVc/assembly/w_runtime/vV_ascii.asm"		
%include "w_samples/assembly/collatzbuf_vars.was"	
%include "vVc/assembly/w_runtime/vV_system90.asm"		



global w_entry_point



segment .text 


imp:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	
;OpADR: [0]  DUP opcode (1)
	vV_dup 1

;OpADR: [1] ; LSH opcode 

	shl DWORD vV_top , 1

;OpADR: [2] ; PUSH opcode 

	vV_push 1

;OpADR: [3] ; ADD opcode 

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			
	vV_dec_sp 1		

;OpADR: [4] ; ADD opcode 

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			
	vV_dec_sp 1		

;OpADR: [5] ; End of func opcode

	
;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	

collatz:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase
	sub rsp , 24	;Space for local vars	

;------Init Phase
mov DWORD[rbp  - 8 ] , 0		; space for lvar 0 (c)	

.tailcall:		;Body Section	
;OpADR: [6] ; Var assignement

		xor rax , rax
	lea rdi , [rbp - 16]	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	



	wblock_collatzbuf3:		

;------------------------------------------------------

;OpADR: [7] ;OpADR: [8] ; Var invocation

		xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [9] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.memoed]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [10] ; LESS opcode 

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jae short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

;OpADR: [11] ; IF opcode 

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_collatzbuf0	

;OpADR: [12] ; Var invocation

		xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [13] ; Var invocation

		lea rdi , [u_global.memo]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 1000000	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [14] ; Var invocation

		xor rax , rax
	lea rdi , [rbp - 8]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [15] ; ADD opcode 

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			
	vV_dec_sp 1		

;OpADR: [16] ; Var assignement

		xor rax , rax
	lea rdi , [rbp - 8]	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [17] ; BREAK opcode 

	jmp wblock_collatzbuf4



	wblock_collatzbuf0:		

;------------------------------------------------------

;OpADR: [18] ; Var invocation

		xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [19] ; PUSH opcode 

	vV_push 1

;OpADR: [20] ; AND opcode 

	mov eax , vV_top			
	and DWORD vV_2nd , eax			
	vV_dec_sp 1				

;OpADR: [21] ; IF opcode 

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_collatzbuf2	

;OpADR: [22] ; Var invocation

		xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [23] ; Function Call

	call imp

;OpADR: [24] ; ELSE opcode 

	jmp wblock_collatzbuf1	



	wblock_collatzbuf2:		

;------------------------------------------------------

;OpADR: [25] ; Var invocation

		xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [26] ; RSH opcode 

	shr DWORD vV_top , 1



	wblock_collatzbuf1:		

;------------------------------------------------------

;OpADR: [27] ; Var assignement

		xor rax , rax
	lea rdi , [rbp - 16]	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [28] ; Var invocation

		xor rax , rax
	lea rdi , [rbp - 8]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [29] ; PUSH opcode 

	vV_push 1

;OpADR: [30] ; ADD opcode 

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			
	vV_dec_sp 1		

;OpADR: [31] ; Var assignement

		xor rax , rax
	lea rdi , [rbp - 8]	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [32] ; Var invocation

		xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [33] ; PUSH opcode 

	vV_push 1

;OpADR: [34] ; EQUAL opcode 

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

;OpADR: [35] ; NOT opcode 

	not DWORD vV_top

;OpADR: [36] ; WHILE opcode 

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_collatzbuf3		



	wblock_collatzbuf4:		

;------------------------------------------------------

;OpADR: [37] ; Var invocation

		xor rax , rax
	lea rdi , [rbp - 8]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [38] ; End of func opcode

	
;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	

print_bigger:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	
;OpADR: [39] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.current]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [40] ; OUT opcode (0)

	call vV_io_out_buffer_default	

;OpADR: [41] ; PUSH opcode 

	vV_push 540680224

;OpADR: [42] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [43]  DUP opcode (1)
	vV_dup 1

;OpADR: [44] ; OUT opcode (0)

	call vV_io_out_buffer_default	

;OpADR: [45] ; FLUSH opcode

	call vV_io_flush 

;OpADR: [46] ; End of func opcode

	
;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	


		



vV_entry_point:


	push rbp
	mov rbp, rsp			;Setup Stack Frame
	
	;OpADR: [0] ; PUSH opcode 

	vV_push 1

;OpADR: [1] ; Var assignement

		lea rdi , [u_global.memo]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 1000000	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [2] ; PUSH opcode 

	vV_push 2

;OpADR: [3] ; Var assignement

		lea rdi , [u_global.memo]	
	xor rax , rax	
	mov ecx , 2	
	cmp ecx , 1000000	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [4] ; PUSH opcode 

	vV_push 97

;OpADR: [5] ; BUFF_OUT opcode (8)

	call vV_io_out_char

;OpADR: [6] ; Function Call

	call collatz

;OpADR: [7] ; PUSH opcode 

	vV_push 98

;OpADR: [8] ; BUFF_OUT opcode (8)

	call vV_io_out_char



	wblock_collatzbuf7:		

;------------------------------------------------------

;OpADR: [9] ;OpADR: [10] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.current]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [11] ; Function Call

	call collatz

;OpADR: [12]  DUP opcode (1)
	vV_dup 1

;OpADR: [13] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.current]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [14] ; Var assignement

		lea rdi , [u_global.memo]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 1000000	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [15]  DUP opcode (1)
	vV_dup 1

;OpADR: [16] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.biggest]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [17] ; MORE opcode 

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jbe short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

;OpADR: [18] ; IF opcode 

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_collatzbuf6	

;OpADR: [19] ; Var assignement

		xor rax , rax
	lea rdi , [i_global.biggest]	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [20] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.current]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [21] ; Var assignement

		xor rax , rax
	lea rdi , [u_global.biggest_source]	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [22] ; ELSE opcode 

	jmp wblock_collatzbuf5	



	wblock_collatzbuf6:		

;------------------------------------------------------

;OpADR: [23] ; DROP opcode 

	vV_dec_sp 1 



	wblock_collatzbuf5:		

;------------------------------------------------------

;OpADR: [24] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.current]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [25] ; PUSH opcode 

	vV_push 1

;OpADR: [26] ; ADD opcode 

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			
	vV_dec_sp 1		

;OpADR: [27] ; Var assignement

		xor rax , rax
	lea rdi , [i_global.current]	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [28] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.memoed]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [29] ; PUSH opcode 

	vV_push 1

;OpADR: [30] ; ADD opcode 

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			
	vV_dec_sp 1		

;OpADR: [31] ; Var assignement

		xor rax , rax
	lea rdi , [i_global.memoed]	
	vV_pop ecx	
	add rdi , rax	
	mov rax , rdi	
	mov [rax] , ecx	

;OpADR: [32] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.current]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [33] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.max]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [34] ; LESS opcode 

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jae short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

;OpADR: [35] ; WHILE opcode 

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_collatzbuf7		



	wblock_collatzbuf8:		

;------------------------------------------------------

;OpADR: [36] ; PUSH opcode 

	vV_push 538982944

;OpADR: [37] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.max]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [38] ; PUSH opcode 

	vV_push 538998639

;OpADR: [39] ; PUSH opcode 

	vV_push 1818583584

;OpADR: [40] ; PUSH opcode 

	vV_push 2054447468

;OpADR: [41] ; PUSH opcode 

	vV_push 1819231008

;OpADR: [42] ; PUSH opcode 

	vV_push 1953719655

;OpADR: [43] ; PUSH opcode 

	vV_push 1734951456

;OpADR: [44] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [45] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [46] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [47] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [48] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [49] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [50] ; OUT opcode (0)

	call vV_io_out_buffer_default	

;OpADR: [51] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [52] ; Var invocation

		xor rax , rax
	lea rdi , [u_global.biggest_source]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [53] ; OUT opcode (0)

	call vV_io_out_buffer_default	

;OpADR: [54] ; Var invocation

		xor rax , rax
	lea rdi , [i_global.biggest]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [55] ; PUSH opcode 

	vV_push 538994804

;OpADR: [56] ; PUSH opcode 

	vV_push 1769414688

;OpADR: [57] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [58] ; OUT opcode (9)

	call vV_io_out_packed_char_buffer 

;OpADR: [59] ; OUT opcode (0)

	call vV_io_out_buffer_default	

;OpADR: [60] ; FLUSH opcode

	call vV_io_flush 

;OpADR: [61] ; PUSH opcode 

	vV_push 543521122

;OpADR: [62] ; BUFF_OUT opcode (9)

	call vV_io_out_packed_char

		
		mov rsp , rbp
		pop rbp
		ret

;Transpiled from vV with vVc version 0.0.4.5
		
		