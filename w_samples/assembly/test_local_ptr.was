%include "vVc/assembly/w_runtime/vV_defines.asm"		
%include "vVc/assembly/w_runtime/vV_error_code.asm"		
%include "vVc/assembly/w_runtime/vV_runtime.asm"		
%include "vVc/assembly/w_runtime/vV_system00.asm"		
%include "vVc/assembly/w_runtime/vV_errors.asm"		
%include "vVc/assembly/w_runtime/vV_system10.asm"		
%include "vVc/assembly/w_runtime/vV_io.asm"			
%include "vVc/assembly/w_runtime/vV_ascii.asm"		
%include "w_samples/assembly/test_local_ptr_vars.was"	
%include "vVc/assembly/w_runtime/vV_system90.asm"		



global w_entry_point



segment .text 


test_local:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase
	sub rsp , 32	;Space for local vars	

;------Init Phase
mov DWORD[rbp  - 8 ] , 87		; space for lvar 0 (a)	

.tailcall:		;Body Section	

 ;OpADR: [0]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 8]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [1]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [2]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [i_global.var_1]	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [rbp - 24]	
	add rdi , rax	
	mov  rax , rsi	
	mov [rdi] , eax	

 ;OpADR: [3]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 24]	
	add rdi , rax	
	mov eax , [rdi]	
	mov eax , [rax]	
	vV_push eax	

 ;OpADR: [4]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [5]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [rbp - 8]	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [rbp - 24]	
	add rdi , rax	
	mov  rax , rsi	
	sub rax , [vV_local_offset]	
	mov [rdi] , eax	

 ;OpADR: [6]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 24]	
	add rdi , rax	
	mov eax , [rdi]	
	add rax , [vV_local_offset]	
	mov eax , [rax]	
	vV_push eax	

 ;OpADR: [7]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [8]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [rbp - 24]	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov rax , rsi	
	sub rax , [vV_local_offset]	
	mov [rdi] , eax	

 ;OpADR: [9]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 8]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [10]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [11]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov eax , [rdi]	
	add rax , [vV_local_offset]	
	mov eax , [rax]	
	add rax , [vV_local_offset]	
	mov eax , [rax]	
	vV_push eax	

 ;OpADR: [12]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [13]  ; PUSH opcode 

	vV_push 64 


 ;OpADR: [14]  ; OUT opcode (8)			

		
	call vV_io_out_char				
						

 ;OpADR: [15]  ; Var Ref assignement					

	lea rdi , [u_global.tablo]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 8	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [rbp - 24]	
	add rdi , rax	
	mov  rax , rsi	
	mov [rdi] , eax	

 ;OpADR: [16]  ; PUSH opcode 

	vV_push 64 


 ;OpADR: [17]  ; OUT opcode (8)			

		
	call vV_io_out_char				
						

 ;OpADR: [18]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [rbp - 24]	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov rax , rsi	
	sub rax , [vV_local_offset]	
	mov [rdi] , eax	

 ;OpADR: [19]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov eax , [rdi]	
	add rax , [vV_local_offset]	
	mov eax , [rax]	
	mov eax , [rax]	
	vV_push eax	

 ;OpADR: [20]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [21]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	

		



vV_entry_point:


	mov rbp, rsp			;Setup Stack Frame
	
	
 ;OpADR: [0]  ; PUSH opcode 

	vV_push 11 


 ;OpADR: [1]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [2]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [3]  ; Var assignement					

	lea rdi , [u_global.tablo]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 8	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [4]  ; PUSH opcode 

	vV_push 22 


 ;OpADR: [5]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [6]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [7]  ; Var assignement					

	lea rdi , [u_global.tablo]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 8	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [8]  ; PUSH opcode 

	vV_push 33 


 ;OpADR: [9]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [10]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [11]  ; Var assignement					

	lea rdi , [u_global.tablo]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 8	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [12]  ; PUSH opcode 

	vV_push 44 


 ;OpADR: [13]  ; PUSH opcode 

	vV_push 3 


 ;OpADR: [14]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [15]  ; Var assignement					

	lea rdi , [u_global.tablo]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 8	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [16]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [17]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [18]  ; PUSH opcode 

	vV_push 42 


 ;OpADR: [19]  ; Var assignement					

	xor rax , rax
	lea rdi , [i_global.var_1]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [20]  ; Function Call					

		call test_local			
		
		ret

;Transpiled from vV with vVc version 0.0.4
		
		