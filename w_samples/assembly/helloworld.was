%include "vVc/assembly/w_runtime/vV_defines.asm"		
%include "vVc/assembly/w_runtime/vV_error_code.asm"		
%include "vVc/assembly/w_runtime/vV_runtime.asm"		
%include "vVc/assembly/w_runtime/vV_system00.asm"		
%include "vVc/assembly/w_runtime/vV_errors.asm"		
%include "vVc/assembly/w_runtime/vV_system10.asm"		
%include "vVc/assembly/w_runtime/vV_io.asm"			
%include "vVc/assembly/w_runtime/vV_ascii.asm"		
%include "w_samples/assembly/helloworld_vars.was"	
%include "vVc/assembly/w_runtime/vV_system90.asm"		



global w_entry_point



segment .text 


demo6_truc:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	
;OpADR: [0] ; Var invocation

		xor rax , rax
	lea rdi , [rbp + 16]	
	add rdi , rax	
	mov eax , [rdi] 
	mov eax , [rax]	
	vV_push eax	

;OpADR: [1] ; BUFF_OUT opcode (0)

	 call vV_io_out_default	

;OpADR: [2] ; End of func opcode

	
;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	


		



vV_entry_point:


	push rbp
	mov rbp, rsp			;Setup Stack Frame
	
	;OpADR: [0] ; Function Call with args

		xor rax , rax
	lea rdi , [i_global.a]	
	mov rsi , rdi	
	add rsi , rax	
	push rax	
	mov rdi , rsp	
	mov  rax , rsi	
	mov [rdi] , eax	
	call demo6_truc
add rsp , 8
;OpADR: [1] ; Var invocation

		xor rax , rax
	lea rdi , [i_global_demo6.a]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [2] ; BUFF_OUT opcode (0)

	 call vV_io_out_default	

;OpADR: [3] ; PUSH opcode 

	vV_push 0

;OpADR: [4] ; Var invocation

		lea rdi , [i_global.sizes]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 6	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [5] ; PUSH opcode 

	vV_push 0

;OpADR: [6] ; Loop check 

		vV_pop eax	;get index
	push rax	
	vV_pop eax	;get limit
	push rax	



	wblock_helloworld0:		

;------------------------------------------------------

;OpADR: [7] ; Var invocation

		xor rax , rax
	lea rdi , [rsp+8]	
	add rdi , rax	
	mov eax , [rdi] 
	vV_push eax	

;OpADR: [8] ; Var invocation

		lea rdi , [i_global.str]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 11	
	jge vV_bound_error	
	add eax , ecx	
	add rdi , rax	
	mov al , [rdi]	
	vV_push eax	

;OpADR: [9] ; OUT opcode (8)

	call vV_io_out_char_buffer

;OpADR: [10] ; ; Loop init 

		inc DWORD[rsp + 8]
	mov rax , [rsp + 8]	;get index
	mov rcx , [rsp]	;get max
	cmp eax , ecx	
	jb wblock_helloworld0	



	wblock_helloworld1:		

;------------------------------------------------------

;OpADR: [11] ; Loop Cleanup 

	add rsp , 16	

;OpADR: [12] ; FLUSH opcode

	call vV_io_flush 

;OpADR: [13] ; FLUSH opcode

	call vV_io_flush 

;OpADR: [14] ; PUSH opcode 

	vV_push 1

;OpADR: [15] ; Var invocation

		lea rdi , [i_global.sizes]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 6	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [16] ; PUSH opcode 

	vV_push 0

;OpADR: [17] ; Loop check 

		vV_pop eax	;get index
	push rax	
	vV_pop eax	;get limit
	push rax	



	wblock_helloworld2:		

;------------------------------------------------------

;OpADR: [18] ; Var invocation

		xor rax , rax
	lea rdi , [rsp+8]	
	add rdi , rax	
	mov eax , [rdi] 
	vV_push eax	

;OpADR: [19] ; Var invocation

		lea rdi , [i_global.line1]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 31	
	jge vV_bound_error	
	add eax , ecx	
	add rdi , rax	
	mov al , [rdi]	
	vV_push eax	

;OpADR: [20] ; OUT opcode (8)

	call vV_io_out_char_buffer

;OpADR: [21] ; ; Loop init 

		inc DWORD[rsp + 8]
	mov rax , [rsp + 8]	;get index
	mov rcx , [rsp]	;get max
	cmp eax , ecx	
	jb wblock_helloworld2	



	wblock_helloworld3:		

;------------------------------------------------------

;OpADR: [22] ; Loop Cleanup 

	add rsp , 16	

;OpADR: [23] ; FLUSH opcode

	call vV_io_flush 

;OpADR: [24] ; PUSH opcode 

	vV_push 2

;OpADR: [25] ; Var invocation

		lea rdi , [i_global.sizes]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 6	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [26] ; PUSH opcode 

	vV_push 0

;OpADR: [27] ; Loop check 

		vV_pop eax	;get index
	push rax	
	vV_pop eax	;get limit
	push rax	



	wblock_helloworld4:		

;------------------------------------------------------

;OpADR: [28] ; Var invocation

		xor rax , rax
	lea rdi , [rsp+8]	
	add rdi , rax	
	mov eax , [rdi] 
	vV_push eax	

;OpADR: [29] ; Var invocation

		lea rdi , [i_global.line2]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 21	
	jge vV_bound_error	
	add eax , ecx	
	add rdi , rax	
	mov al , [rdi]	
	vV_push eax	

;OpADR: [30] ; OUT opcode (8)

	call vV_io_out_char_buffer

;OpADR: [31] ; ; Loop init 

		inc DWORD[rsp + 8]
	mov rax , [rsp + 8]	;get index
	mov rcx , [rsp]	;get max
	cmp eax , ecx	
	jb wblock_helloworld4	



	wblock_helloworld5:		

;------------------------------------------------------

;OpADR: [32] ; Loop Cleanup 

	add rsp , 16	

;OpADR: [33] ; FLUSH opcode

	call vV_io_flush 

;OpADR: [34] ; PUSH opcode 

	vV_push 3

;OpADR: [35] ; Var invocation

		lea rdi , [i_global.sizes]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 6	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [36] ; PUSH opcode 

	vV_push 0

;OpADR: [37] ; Loop check 

		vV_pop eax	;get index
	push rax	
	vV_pop eax	;get limit
	push rax	



	wblock_helloworld6:		

;------------------------------------------------------

;OpADR: [38] ; Var invocation

		xor rax , rax
	lea rdi , [rsp+8]	
	add rdi , rax	
	mov eax , [rdi] 
	vV_push eax	

;OpADR: [39] ; Var invocation

		lea rdi , [i_global.line3]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 26	
	jge vV_bound_error	
	add eax , ecx	
	add rdi , rax	
	mov al , [rdi]	
	vV_push eax	

;OpADR: [40] ; OUT opcode (8)

	call vV_io_out_char_buffer

;OpADR: [41] ; ; Loop init 

		inc DWORD[rsp + 8]
	mov rax , [rsp + 8]	;get index
	mov rcx , [rsp]	;get max
	cmp eax , ecx	
	jb wblock_helloworld6	



	wblock_helloworld7:		

;------------------------------------------------------

;OpADR: [42] ; Loop Cleanup 

	add rsp , 16	

;OpADR: [43] ; FLUSH opcode

	call vV_io_flush 

;OpADR: [44] ; PUSH opcode 

	vV_push 4

;OpADR: [45] ; Var invocation

		lea rdi , [i_global.sizes]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 6	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [46] ; PUSH opcode 

	vV_push 0

;OpADR: [47] ; Loop check 

		vV_pop eax	;get index
	push rax	
	vV_pop eax	;get limit
	push rax	



	wblock_helloworld8:		

;------------------------------------------------------

;OpADR: [48] ; Var invocation

		xor rax , rax
	lea rdi , [rsp+8]	
	add rdi , rax	
	mov eax , [rdi] 
	vV_push eax	

;OpADR: [49] ; Var invocation

		lea rdi , [i_global.line4]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 48	
	jge vV_bound_error	
	add eax , ecx	
	add rdi , rax	
	mov al , [rdi]	
	vV_push eax	

;OpADR: [50] ; OUT opcode (8)

	call vV_io_out_char_buffer

;OpADR: [51] ; ; Loop init 

		inc DWORD[rsp + 8]
	mov rax , [rsp + 8]	;get index
	mov rcx , [rsp]	;get max
	cmp eax , ecx	
	jb wblock_helloworld8	



	wblock_helloworld9:		

;------------------------------------------------------

;OpADR: [52] ; Loop Cleanup 

	add rsp , 16	

;OpADR: [53] ; FLUSH opcode

	call vV_io_flush 

;OpADR: [54] ; PUSH opcode 

	vV_push 5

;OpADR: [55] ; Var invocation

		lea rdi , [i_global.sizes]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 6	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

;OpADR: [56] ; PUSH opcode 

	vV_push 0

;OpADR: [57] ; Loop check 

		vV_pop eax	;get index
	push rax	
	vV_pop eax	;get limit
	push rax	



	wblock_helloworld10:		

;------------------------------------------------------

;OpADR: [58] ; Var invocation

		xor rax , rax
	lea rdi , [rsp+8]	
	add rdi , rax	
	mov eax , [rdi] 
	vV_push eax	

;OpADR: [59] ; Var invocation

		lea rdi , [i_global.line5]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 35	
	jge vV_bound_error	
	add eax , ecx	
	add rdi , rax	
	mov al , [rdi]	
	vV_push eax	

;OpADR: [60] ; OUT opcode (8)

	call vV_io_out_char_buffer

;OpADR: [61] ; ; Loop init 

		inc DWORD[rsp + 8]
	mov rax , [rsp + 8]	;get index
	mov rcx , [rsp]	;get max
	cmp eax , ecx	
	jb wblock_helloworld10	



	wblock_helloworld11:		

;------------------------------------------------------

;OpADR: [62] ; Loop Cleanup 

	add rsp , 16	

;OpADR: [63] ; FLUSH opcode

	call vV_io_flush 

;OpADR: [64] ; Var Ref assignement	

		xor rax , rax
	lea rdi , [i_global.a]	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [i_global.b]	
	add rdi , rax	
	mov eax , [rsi]	
	mov DWORD[rdi] , eax	

;OpADR: [65] ;GET opcode (9)

	; GET opcode (9)			

call vV_io_get_packed_char 

;OpADR: [66]  DUP opcode (1)
	vV_dup 1

;OpADR: [67] ; BUFF_OUT opcode (9)

	call vV_io_out_packed_char

;OpADR: [68] ; BUFF_OUT opcode (3)

	 mov r10d , vV_FORMAT_HEX	
	call vV_io_out	

;OpADR: [69] ;GET opcode (8)

	; GET opcode (8)			

call vV_io_get_char	

;OpADR: [70]  DUP opcode (1)
	vV_dup 1

;OpADR: [71] ; BUFF_OUT opcode (8)

	call vV_io_out_char

;OpADR: [72] ; BUFF_OUT opcode (3)

	 mov r10d , vV_FORMAT_HEX	
	call vV_io_out	

		
		mov rsp , rbp
		pop rbp
		ret

;Transpiled from vV with vVc version 0.0.4.5
		
		