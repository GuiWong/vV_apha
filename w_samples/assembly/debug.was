%include "vVc/assembly/w_runtime/vV_defines.asm"		
%include "vVc/assembly/w_runtime/vV_error_code.asm"		
%include "vVc/assembly/w_runtime/vV_runtime.asm"		
%include "vVc/assembly/w_runtime/vV_system00.asm"		
%include "vVc/assembly/w_runtime/vV_errors.asm"		
%include "vVc/assembly/w_runtime/vV_system10.asm"		
%include "vVc/assembly/w_runtime/vV_io.asm"			
%include "vVc/assembly/w_runtime/vV_ascii.asm"		
%include "w_samples/assembly/debug_vars.was"	
%include "vVc/assembly/w_runtime/vV_system90.asm"		



global w_entry_point



segment .text 


makeword:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase
	sub rsp , 16	;Space for local vars	

;------Init Phase
mov DWORD[rbp  - 8 ] , 0		; space for lvar 0 (c)	

.tailcall:		;Body Section	


	wblock_0:		

;------------------------------------------------------


 ;OpADR: [0]  ; Var invocation					

mov eax , [rbp - 8]
vV_push eax

 ;OpADR: [1]  ; Var invocation					

	xor eax , eax	
	vV_pop edi		
	cmp edi , 4		
	jge vV_bound_error		
	add eax , edi			
	shl eax , 2	
	mov esi , eax		
	mov edi , u_global.word
mov ecx , [edi + esi]
mov eax , [ecx]	
vV_push eax

 ;OpADR: [2]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [3]  ; Var invocation					

mov eax , [rbp - 8]
vV_push eax

 ;OpADR: [4]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [5]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [6]  ; Var assignement					

vV_pop eax
mov [rbp - 8] , eax

 ;OpADR: [7]  ; Var invocation					

mov eax , [rbp - 8]
vV_push eax

 ;OpADR: [8]  ; PUSH opcode 

	vV_push 4 


 ;OpADR: [9]  ; LESS opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jae short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [10]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_0		

 ;OpADR: [11]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [12]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	

		



vV_entry_point:


	mov rbp, rsp			;Setup Stack Frame
	
	
 ;OpADR: [0]  ; Var Ref assignement					

	xor eax , eax	
	mov edi , 0			
	cmp edi , 4		
	jge vV_bound_error		
	add eax , edi			
	shl eax , 2	
	mov esi , eax		
	mov edi , u_global.word
 mov eax , i_global.a	
 mov [edi + esi] , eax		

 ;OpADR: [1]  ; Var Ref assignement					

	xor eax , eax	
	mov edi , 1			
	cmp edi , 4		
	jge vV_bound_error		
	add eax , edi			
	shl eax , 2	
	mov esi , eax		
	mov edi , u_global.word
 mov eax , i_global.b	
 mov [edi + esi] , eax		

 ;OpADR: [2]  ; Var Ref assignement					

	xor eax , eax	
	mov edi , 2			
	cmp edi , 4		
	jge vV_bound_error		
	add eax , edi			
	shl eax , 2	
	mov esi , eax		
	mov edi , u_global.word
 mov eax , i_global.c	
 mov [edi + esi] , eax		

 ;OpADR: [3]  ; Var Ref assignement					

	xor eax , eax	
	mov edi , 3			
	cmp edi , 4		
	jge vV_bound_error		
	add eax , edi			
	shl eax , 2	
	mov esi , eax		
	mov edi , u_global.word
 mov eax , i_global.d	
 mov [edi + esi] , eax		

 ;OpADR: [4]  ; Function Call					

		call makeword			

 ;OpADR: [5]  ; PUSH opcode 

	vV_push 67 


 ;OpADR: [6]  ; Var assignement					

vV_pop eax
mov [i_global.b] , eax

 ;OpADR: [7]  ; PUSH opcode 

	vV_push 65 


 ;OpADR: [8]  ; Var assignement					

vV_pop eax
mov [i_global.c] , eax

 ;OpADR: [9]  ; PUSH opcode 

	vV_push 66 


 ;OpADR: [10]  ; Var assignement					

vV_pop eax
mov [i_global.d] , eax

 ;OpADR: [11]  ; Function Call					

		call makeword			
		
		ret

;Transpiled from vV with vVc version 0.0.4
		
		