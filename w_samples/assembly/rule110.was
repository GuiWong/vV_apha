%include "vVc/assembly/w_runtime/vV_defines.asm"		
%include "vVc/assembly/w_runtime/vV_error_code.asm"		
%include "vVc/assembly/w_runtime/vV_runtime.asm"		
%include "vVc/assembly/w_runtime/vV_system00.asm"		
%include "vVc/assembly/w_runtime/vV_errors.asm"		
%include "vVc/assembly/w_runtime/vV_system10.asm"		
%include "vVc/assembly/w_runtime/vV_io.asm"			
%include "vVc/assembly/w_runtime/vV_ascii.asm"		
%include "w_samples/assembly/rule110_vars.was"	
%include "vVc/assembly/w_runtime/vV_system90.asm"		



global w_entry_point



segment .text 


term_bg:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [0]  ; PUSH opcode 

	vV_push 109 


 ;OpADR: [1]  ; PUSH opcode 

	vV_push 59 


 ;OpADR: [2]  ; PUSH opcode 

	vV_push 53 


 ;OpADR: [3]  ; PUSH opcode 

	vV_push 59 


 ;OpADR: [4]  ; PUSH opcode 

	vV_push 56 


 ;OpADR: [5]  ; PUSH opcode 

	vV_push 52 


 ;OpADR: [6]  ; PUSH opcode 

	vV_push 91 


 ;OpADR: [7]  ; PUSH opcode 

	vV_push 27 


 ;OpADR: [8]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [9]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [10]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [11]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [12]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [13]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [14]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [15]  ; PUSH opcode 

	vV_push 48 


 ;OpADR: [16]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [17]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [18]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [19]  ; PUSH opcode 

	vV_push 109 


 ;OpADR: [20]  ; PUSH opcode 

	vV_push 59 


 ;OpADR: [21]  ; PUSH opcode 

	vV_push 53 


 ;OpADR: [22]  ; PUSH opcode 

	vV_push 59 


 ;OpADR: [23]  ; PUSH opcode 

	vV_push 56 


 ;OpADR: [24]  ; PUSH opcode 

	vV_push 51 


 ;OpADR: [25]  ; PUSH opcode 

	vV_push 91 


 ;OpADR: [26]  ; PUSH opcode 

	vV_push 27 


 ;OpADR: [27]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [28]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [29]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [30]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [31]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [32]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [33]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [34]  ; PUSH opcode 

	vV_push 55 


 ;OpADR: [35]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [36]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [37]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [38]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
set_next:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [39]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [40]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [41]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [42]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [43]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_5	

 ;OpADR: [44]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [45]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [46]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [47]  ; ELIF opcode					

	jmp wblock_4	


	wblock_5:		

;------------------------------------------------------


 ;OpADR: [48]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [49]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [50]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [51]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_3	

 ;OpADR: [52]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [53]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [54]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [55]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_1	

 ;OpADR: [56]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [57]  ; ELIF opcode					

	jmp wblock_0	


	wblock_1:		

;------------------------------------------------------


 ;OpADR: [58]  ; PUSH opcode 

	vV_push 0 



	wblock_0:		

;------------------------------------------------------


 ;OpADR: [59]  ; ELIF opcode					

	jmp wblock_4	


	wblock_3:		

;------------------------------------------------------


 ;OpADR: [60]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [61]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [62]  ; PUSH opcode 

	vV_push 1 



	wblock_4:		

;------------------------------------------------------


 ;OpADR: [63]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
popup:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [64]  ; PUSH opcode 

	vV_push 540680240 


 ;OpADR: [65]  ; PUSH opcode 

	vV_push 825303141 


 ;OpADR: [66]  ; PUSH opcode 

	vV_push 1819636256 


 ;OpADR: [67]  ; PUSH opcode 

	vV_push 1919903264 


 ;OpADR: [68]  ; PUSH opcode 

	vV_push 1684366707 


 ;OpADR: [69]  ; PUSH opcode 

	vV_push 543236210 


 ;OpADR: [70]  ; PUSH opcode 

	vV_push 1702129221 


 ;OpADR: [71]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [72]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [73]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [74]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [75]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [76]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [77]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [78]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [79]  ; GET opcode (0)			

	call vV_io_get_default			
						

 ;OpADR: [80]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
print:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [81]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [82]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [83]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_7	

 ;OpADR: [84]  ; PUSH opcode 

	vV_push 32 


 ;OpADR: [85]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						

 ;OpADR: [86]  ; ELIF opcode					

	jmp wblock_6	


	wblock_7:		

;------------------------------------------------------


 ;OpADR: [87]  ; PUSH opcode 

	vV_push 42 


 ;OpADR: [88]  ; BUFF_OUT opcode (8)			


	call vV_io_out_char_buffer			
						


	wblock_6:		

;------------------------------------------------------


 ;OpADR: [89]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
set_seed:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase
	sub rsp , 24	;Space for local vars	

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [90]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [91]  ; Var assignement					

	xor rax , rax
	lea rdi , [rbp - 8]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [92]  ; PUSH opcode 

	vV_push 33 


 ;OpADR: [93]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [94]  ; Var assignement					

	xor rax , rax
	lea rdi , [rbp - 16]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [95]  ; PUSH opcode 

	vV_push 1 



	wblock_10:		

;------------------------------------------------------


 ;OpADR: [96]  
 ;OpADR: [97]  ; DUP opcode (2)			

	vV_dup 2			


 ;OpADR: [98]  ; OR opcode					

	mov eax , vV_top			
	and DWORD vV_2nd , eax			

	vV_dec_sp 1				

 ;OpADR: [99]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_9	

 ;OpADR: [100]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [101]  ; ELIF opcode					

	jmp wblock_8	


	wblock_9:		

;------------------------------------------------------


 ;OpADR: [102]  ; PUSH opcode 

	vV_push 0 



	wblock_8:		

;------------------------------------------------------


 ;OpADR: [103]  ; Var invocation					

	xor rax , rax
	lea rdi , [i_global.size]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [104]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 8]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [105]  ; SUB opcode 					

	mov eax , vV_2nd			
	sub eax , vV_top			
	mov vV_2nd, eax			

	vV_dec_sp 1		

 ;OpADR: [106]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [107]  ; SUB opcode 					

	mov eax , vV_2nd			
	sub eax , vV_top			
	mov vV_2nd, eax			

	vV_dec_sp 1		

 ;OpADR: [108]  ; Var assignement					

	lea rdi , [u_global.board]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 255	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [109]  ; LSH opcode 					

	shl DWORD vV_top , 1			

 ;OpADR: [110]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 8]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [111]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [112]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [113]  ; Var assignement					

	xor rax , rax
	lea rdi , [rbp - 8]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [114]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 8]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [115]  ; Var invocation					

	xor rax , rax
	lea rdi , [rbp - 16]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [116]  ; LESS opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jae short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [117]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_10		


	wblock_11:		

;------------------------------------------------------


 ;OpADR: [118]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	

		



vV_entry_point:


	mov rbp, rsp			;Setup Stack Frame
	
	
 ;OpADR: [0]  ; Function Call					

		call term_bg			

 ;OpADR: [1]  ; Function Call					

		call popup			

 ;OpADR: [2]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [3]  ; Function Call					

		call set_seed			


	wblock_14:		

;------------------------------------------------------


 ;OpADR: [4]  
 ;OpADR: [5]  ; PUSH opcode 

	vV_push 254 


 ;OpADR: [6]  ; Var invocation					

	lea rdi , [u_global.board]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 255	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [7]  ; Var assignement					

	xor rax , rax
	lea rdi , [u_global.saved]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [8]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [9]  ; Var assignement					

	xor rax , rax
	lea rdi , [u_global.index]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [10]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [11]  ; Var invocation					

	lea rdi , [u_global.board]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 255	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [12]  ; PUSH opcode 

	vV_push 254 


 ;OpADR: [13]  ; Var assignement					

	lea rdi , [u_global.board]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 255	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	


	wblock_12:		

;------------------------------------------------------


 ;OpADR: [14]  
 ;OpADR: [15]  ; Var invocation					

	xor rax , rax
	lea rdi , [u_global.saved]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [16]  ; Var invocation					

	xor rax , rax
	lea rdi , [u_global.index]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [17]  ; Var invocation					

	lea rdi , [u_global.board]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 255	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [18]  ; Var invocation					

	xor rax , rax
	lea rdi , [u_global.index]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [19]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [20]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [21]  ; Var invocation					

	lea rdi , [u_global.board]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 255	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [22]  ; Function Call					

		call set_next			

 ;OpADR: [23]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [24]  ; Var invocation					

	xor rax , rax
	lea rdi , [u_global.index]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [25]  ; Var invocation					

	lea rdi , [u_global.board]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 255	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [26]  ; Var assignement					

	xor rax , rax
	lea rdi , [u_global.saved]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [27]  ; Var invocation					

	xor rax , rax
	lea rdi , [u_global.index]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [28]  ; Var assignement					

	lea rdi , [u_global.board]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 255	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [29]  ; Function Call					

		call print			

 ;OpADR: [30]  ; Var invocation					

	xor rax , rax
	lea rdi , [u_global.index]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [31]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [32]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [33]  ; Var assignement					

	xor rax , rax
	lea rdi , [u_global.index]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [34]  ; Var invocation					

	xor rax , rax
	lea rdi , [u_global.index]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [35]  ; Var invocation					

	xor rax , rax
	lea rdi , [i_global.size]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [36]  ; LESS opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jae short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [37]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_12		


	wblock_13:		

;------------------------------------------------------


 ;OpADR: [38]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [39]  ; Var invocation					

	xor rax , rax
	lea rdi , [i_global.currentIter]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [40]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [41]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [42]  ; Var assignement					

	xor rax , rax
	lea rdi , [i_global.currentIter]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [43]  ; Var invocation					

	xor rax , rax
	lea rdi , [i_global.currentIter]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [44]  ; Var invocation					

	xor rax , rax
	lea rdi , [i_global.max]	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [45]  ; LESS opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jae short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [46]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_14		


	wblock_15:		

;------------------------------------------------------


 ;OpADR: [47]  ; PUSH opcode 

	vV_push 543521122 


 ;OpADR: [48]  ; OUT opcode (9)			

								
	call vV_io_out_packed_char				
						
		
		ret

;Transpiled from vV with vVc version 0.0.4
		
		