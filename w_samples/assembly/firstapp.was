%include "vVc/assembly/w_runtime/vV_defines.asm"		
%include "vVc/assembly/w_runtime/vV_error_code.asm"		
%include "vVc/assembly/w_runtime/vV_runtime.asm"		
%include "vVc/assembly/w_runtime/vV_system00.asm"		
%include "vVc/assembly/w_runtime/vV_errors.asm"		
%include "vVc/assembly/w_runtime/vV_system10.asm"		
%include "vVc/assembly/w_runtime/vV_io.asm"			
%include "vVc/assembly/w_runtime/vV_ascii.asm"		
%include "w_samples/assembly/firstapp_vars.was"	
%include "vVc/assembly/w_runtime/vV_system90.asm"		



global w_entry_point



segment .text 


xprint:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	


	wblock_0:		

;------------------------------------------------------


 ;OpADR: [0]  
 ;OpADR: [1]  ; SWAP opcode 


	vV_swap		


 ;OpADR: [2]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [3]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [4]  ; SUB opcode 					

	mov eax , vV_2nd			
	sub eax , vV_top			
	mov vV_2nd, eax			

	vV_dec_sp 1		

 ;OpADR: [5]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [6]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [7]  ; MORE opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jbe short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [8]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_0		


	wblock_1:		

;------------------------------------------------------


 ;OpADR: [9]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [10]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [11]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
quit_cmd:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [12]  ; PUSH opcode 

	vV_push 1953068401 


 ;OpADR: [13]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
help_cmd:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [14]  ; PUSH opcode 

	vV_push 1886152040 


 ;OpADR: [15]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
calc_cmd:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [16]  ; PUSH opcode 

	vV_push 1668047203 


 ;OpADR: [17]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
frmt_cmd:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [18]  ; PUSH opcode 

	vV_push 1953329766 


 ;OpADR: [19]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
help:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [20]  ; Function Call					

		call quit_cmd			

 ;OpADR: [21]  ; Function Call					

		call help_cmd			

 ;OpADR: [22]  ; Function Call					

		call calc_cmd			

 ;OpADR: [23]  ; Function Call					

		call frmt_cmd			

 ;OpADR: [24]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [25]  ; PUSH opcode 

	vV_push 1346983712 


 ;OpADR: [26]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [27]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [28]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [29]  ; PUSH opcode 

	vV_push 541806368 


 ;OpADR: [30]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [31]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [32]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [33]  ; PUSH opcode 

	vV_push 541806368 


 ;OpADR: [34]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [35]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [36]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [37]  ; PUSH opcode 

	vV_push 541806368 


 ;OpADR: [38]  ; BUFF_OUT opcode (9)			


	call vV_io_out_packed_char_buffer				
						

 ;OpADR: [39]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [40]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
welcome_msg:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [41]  ; PUSH opcode 

	vV_push 1684890400 


 ;OpADR: [42]  ; PUSH opcode 

	vV_push 1718558836 


 ;OpADR: [43]  ; PUSH opcode 

	vV_push 1936288800 


 ;OpADR: [44]  ; PUSH opcode 

	vV_push 1629516399 


 ;OpADR: [45]  ; PUSH opcode 

	vV_push 1713381488 


 ;OpADR: [46]  ; PUSH opcode 

	vV_push 1818585120 


 ;OpADR: [47]  ; PUSH opcode 

	vV_push 1701869908 


 ;OpADR: [48]  ; PUSH opcode 

	vV_push 7 


 ;OpADR: [49]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
goodbye_msg:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [50]  ; PUSH opcode 

	vV_push 539572768 


 ;OpADR: [51]  ; PUSH opcode 

	vV_push 543521122 


 ;OpADR: [52]  ; PUSH opcode 

	vV_push 1685024583 


 ;OpADR: [53]  ; PUSH opcode 

	vV_push 3 


 ;OpADR: [54]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
calc_msg01:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [55]  ; PUSH opcode 

	vV_push 540701285 


 ;OpADR: [56]  ; PUSH opcode 

	vV_push 1651340654 


 ;OpADR: [57]  ; PUSH opcode 

	vV_push 543236210 


 ;OpADR: [58]  ; PUSH opcode 

	vV_push 1702129221 


 ;OpADR: [59]  ; PUSH opcode 

	vV_push 4 


 ;OpADR: [60]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
calc_msg02:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [61]  ; PUSH opcode 

	vV_push 695495029 


 ;OpADR: [62]  ; PUSH opcode 

	vV_push 1897951092 


 ;OpADR: [63]  ; PUSH opcode 

	vV_push 544286752 


 ;OpADR: [64]  ; PUSH opcode 

	vV_push 979660385 


 ;OpADR: [65]  ; PUSH opcode 

	vV_push 1919250543 


 ;OpADR: [66]  ; PUSH opcode 

	vV_push 543236210 


 ;OpADR: [67]  ; PUSH opcode 

	vV_push 1702129221 


 ;OpADR: [68]  ; PUSH opcode 

	vV_push 7 


 ;OpADR: [69]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
calc_msg03:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [70]  ; PUSH opcode 

	vV_push 6581857 


 ;OpADR: [71]  ; PUSH opcode 

	vV_push 1919250543 


 ;OpADR: [72]  ; PUSH opcode 

	vV_push 543451500 


 ;OpADR: [73]  ; PUSH opcode 

	vV_push 1635151433 


 ;OpADR: [74]  ; PUSH opcode 

	vV_push 4 


 ;OpADR: [75]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
say_welcome:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [76]  ; Function Call					

		call welcome_msg			

 ;OpADR: [77]  ; Function Call					

		call xprint			

 ;OpADR: [78]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
cmd_prompt:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [79]  ; PUSH opcode 

	vV_push 979660131 


 ;OpADR: [80]  ; OUT opcode (9)			

								
	call vV_io_out_packed_char				
						

 ;OpADR: [81]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
input_cmd:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [82]  ; GET opcode (9)			

								
	call vV_io_get_packed_char				
						

 ;OpADR: [83]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
check_operand:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [84]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [85]  ; PUSH opcode 

	vV_push 43 


 ;OpADR: [86]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [87]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_13	

 ;OpADR: [88]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [89]  ; ELIF opcode					

	jmp wblock_12	


	wblock_13:		

;------------------------------------------------------


 ;OpADR: [90]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [91]  ; PUSH opcode 

	vV_push 45 


 ;OpADR: [92]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [93]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_11	

 ;OpADR: [94]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [95]  ; ELIF opcode					

	jmp wblock_12	


	wblock_11:		

;------------------------------------------------------


 ;OpADR: [96]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [97]  ; PUSH opcode 

	vV_push 42 


 ;OpADR: [98]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [99]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_9	

 ;OpADR: [100]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [101]  ; ELIF opcode					

	jmp wblock_12	


	wblock_9:		

;------------------------------------------------------


 ;OpADR: [102]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [103]  ; PUSH opcode 

	vV_push 47 


 ;OpADR: [104]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [105]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_7	

 ;OpADR: [106]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [107]  ; ELIF opcode					

	jmp wblock_12	


	wblock_7:		

;------------------------------------------------------


 ;OpADR: [108]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [109]  ; PUSH opcode 

	vV_push 37 


 ;OpADR: [110]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [111]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_5	

 ;OpADR: [112]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [113]  ; ELIF opcode					

	jmp wblock_12	


	wblock_5:		

;------------------------------------------------------


 ;OpADR: [114]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [115]  ; PUSH opcode 

	vV_push 113 


 ;OpADR: [116]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [117]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_3	

 ;OpADR: [118]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [119]  ; ELIF opcode					

	jmp wblock_12	


	wblock_3:		

;------------------------------------------------------


 ;OpADR: [120]  ; PUSH opcode 

	vV_push 0 



	wblock_12:		

;------------------------------------------------------


 ;OpADR: [121]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
solve_operand:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [122]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [123]  ; PUSH opcode 

	vV_push 43 


 ;OpADR: [124]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [125]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_22	

 ;OpADR: [126]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [127]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [128]  ; ELIF opcode					

	jmp wblock_21	


	wblock_22:		

;------------------------------------------------------


 ;OpADR: [129]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [130]  ; PUSH opcode 

	vV_push 45 


 ;OpADR: [131]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [132]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_20	

 ;OpADR: [133]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [134]  ; SUB opcode 					

	mov eax , vV_2nd			
	sub eax , vV_top			
	mov vV_2nd, eax			

	vV_dec_sp 1		

 ;OpADR: [135]  ; ELIF opcode					

	jmp wblock_21	


	wblock_20:		

;------------------------------------------------------


 ;OpADR: [136]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [137]  ; PUSH opcode 

	vV_push 42 


 ;OpADR: [138]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [139]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_18	

 ;OpADR: [140]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [141]  ; MUL opcode 					


	mov eax , vV_2nd			
	mul DWORD vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1				
						

 ;OpADR: [142]  ; ELIF opcode					

	jmp wblock_21	


	wblock_18:		

;------------------------------------------------------


 ;OpADR: [143]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [144]  ; PUSH opcode 

	vV_push 47 


 ;OpADR: [145]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [146]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_16	

 ;OpADR: [147]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [148]  ; DIV opcode 					

	xor edx , edx				
	mov eax , vV_2nd			
	div DWORD vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1				

 ;OpADR: [149]  ; ELIF opcode					

	jmp wblock_21	


	wblock_16:		

;------------------------------------------------------


 ;OpADR: [150]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [151]  ; PUSH opcode 

	vV_push 37 


 ;OpADR: [152]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [153]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_21	

 ;OpADR: [154]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [155]  ; MOD opcode 					

	xor edx , edx				
	mov eax , vV_2nd			
	div DWORD vV_top			
	mov vV_2nd , edx			

	sub r15 , 4				


	wblock_21:		

;------------------------------------------------------


 ;OpADR: [156]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	
check_cmd:		
	push rbp	
	mov rbp , rsp	

;------Setup Phase

;------Init Phase

.tailcall:		;Body Section	

 ;OpADR: [157]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [158]  ; Function Call					

		call quit_cmd			

 ;OpADR: [159]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [160]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_23	

 ;OpADR: [161]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [162]  ; PUSH opcode 

	vV_push 0 



	wblock_23:		

;------------------------------------------------------


 ;OpADR: [163]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [164]  ; Function Call					

		call help_cmd			

 ;OpADR: [165]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [166]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_24	

 ;OpADR: [167]  ; Function Call					

		call help			

 ;OpADR: [168]  ; PUSH opcode 

	vV_push 1 



	wblock_24:		

;------------------------------------------------------


 ;OpADR: [169]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [170]  ; Function Call					

		call calc_cmd			

 ;OpADR: [171]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [172]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_25	

 ;OpADR: [173]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [174]  ; PUSH opcode 

	vV_push 0 



	wblock_25:		

;------------------------------------------------------


 ;OpADR: [175]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [176]  ; Function Call					

		call frmt_cmd			

 ;OpADR: [177]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [178]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_26	

 ;OpADR: [179]  ; PUSH opcode 

	vV_push 1 



	wblock_26:		

;------------------------------------------------------


 ;OpADR: [180]  ; End of func opcode					


;------Cleanup Phase

;------frame restore Phase
	mov rsp , rbp	
	pop rbp	
	ret	

		



vV_entry_point:


	mov rbp, rsp			;Setup Stack Frame
	
	

	wblock_37:		

;------------------------------------------------------


 ;OpADR: [0]  

	wblock_27:		

;------------------------------------------------------


 ;OpADR: [1]  
 ;OpADR: [2]  ; Function Call					

		call say_welcome			

 ;OpADR: [3]  ; Function Call					

		call input_cmd			

 ;OpADR: [4]  ; Function Call					

		call check_cmd			

 ;OpADR: [5]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_27		


	wblock_28:		

;------------------------------------------------------


 ;OpADR: [6]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_35	

 ;OpADR: [7]  ; Break opcode					

	jmp wblock_38		


	wblock_35:		

;------------------------------------------------------


 ;OpADR: [8]  
 ;OpADR: [9]  ; Function Call					

		call calc_msg01			

 ;OpADR: [10]  ; Function Call					

		call xprint			

 ;OpADR: [11]  ; GET opcode (0)			

	call vV_io_get_default			
						


	wblock_32:		

;------------------------------------------------------


 ;OpADR: [12]  
 ;OpADR: [13]  ; Function Call					

		call calc_msg02			

 ;OpADR: [14]  ; Function Call					

		call xprint			

 ;OpADR: [15]  ; GET opcode (8)			

		
	call vV_io_get_char				
						

 ;OpADR: [16]  ; Function Call					

		call check_operand			

 ;OpADR: [17]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_31	

 ;OpADR: [18]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [19]  ; ELIF opcode					

	jmp wblock_30	


	wblock_31:		

;------------------------------------------------------


 ;OpADR: [20]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [21]  ; Function Call					

		call calc_msg03			

 ;OpADR: [22]  ; Function Call					

		call xprint			

 ;OpADR: [23]  ; PUSH opcode 

	vV_push 1 



	wblock_30:		

;------------------------------------------------------


 ;OpADR: [24]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_32		


	wblock_33:		

;------------------------------------------------------


 ;OpADR: [25]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [26]  ; PUSH opcode 

	vV_push 113 


 ;OpADR: [27]  ; EQUAL opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jnz short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [28]  ; IF opcode					

	vV_dec_sp 1			
	or DWORD[vV_sp] , 0			
	je wblock_34	

 ;OpADR: [29]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [30]  ; DROP opcode 

	sub vV_sp , 4	

 ;OpADR: [31]  ; Break opcode					

	jmp wblock_36		


	wblock_34:		

;------------------------------------------------------


 ;OpADR: [32]  ; Function Call					

		call calc_msg01			

 ;OpADR: [33]  ; Function Call					

		call xprint			

 ;OpADR: [34]  ; GET opcode (0)			

	call vV_io_get_default			
						

 ;OpADR: [35]  ; SWAP opcode 


	vV_swap		


 ;OpADR: [36]  ; Function Call					

		call solve_operand			

 ;OpADR: [37]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [38]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [39]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_35		


	wblock_36:		

;------------------------------------------------------


 ;OpADR: [40]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [41]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_37		


	wblock_38:		

;------------------------------------------------------


 ;OpADR: [42]  ; Function Call					

		call goodbye_msg			

 ;OpADR: [43]  ; Function Call					

		call xprint			
		
		ret

;Transpiled from vV with vVc version 0.0.4
		
		