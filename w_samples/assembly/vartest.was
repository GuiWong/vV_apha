%include "vVc/assembly/w_runtime/vV_defines.asm"		
%include "vVc/assembly/w_runtime/vV_error_code.asm"		
%include "vVc/assembly/w_runtime/vV_runtime.asm"		
%include "vVc/assembly/w_runtime/vV_system00.asm"		
%include "vVc/assembly/w_runtime/vV_errors.asm"		
%include "vVc/assembly/w_runtime/vV_system10.asm"		
%include "vVc/assembly/w_runtime/vV_io.asm"			
%include "vVc/assembly/w_runtime/vV_ascii.asm"		
%include "w_samples/assembly/vartest_vars.was"	
%include "vVc/assembly/w_runtime/vV_system90.asm"		



global w_entry_point



segment .text 



		



vV_entry_point:


	mov rbp, rsp			;Setup Stack Frame
	
	
 ;OpADR: [0]  ; PUSH opcode 

	vV_push 5 


 ;OpADR: [1]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [2]  ; Var assignement					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , rax

 ;OpADR: [3]  ; PUSH opcode 

	vV_push 42 


 ;OpADR: [4]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [5]  ; Var assignement					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , rax

 ;OpADR: [6]  ; PUSH opcode 

	vV_push 69 


 ;OpADR: [7]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [8]  ; Var assignement					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , rax

 ;OpADR: [9]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [10]  ; Var invocation					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [11]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [12]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [13]  ; Var invocation					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [14]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [15]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [16]  ; Var invocation					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [17]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [18]  ; PUSH opcode 

	vV_push 46 


 ;OpADR: [19]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [20]  ; Var assignement					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , rax

 ;OpADR: [21]  ; PUSH opcode 

	vV_push 23 


 ;OpADR: [22]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [23]  ; Var assignement					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , rax

 ;OpADR: [24]  ; PUSH opcode 

	vV_push 1650549601 


 ;OpADR: [25]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [26]  ; Var assignement					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , rax

 ;OpADR: [27]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [28]  ; Var invocation					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [29]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [30]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [31]  ; Var invocation					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [32]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [33]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [34]  ; Var invocation					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 4
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [35]  ; OUT opcode (9)			

								
	call vV_io_out_packed_char				
						
		
		ret

;Transpiled from vV with vVc version 0.0.4
		
		