%include "vVc/assembly/w_runtime/vV_defines.asm"		
%include "vVc/assembly/w_runtime/vV_error_code.asm"		
%include "vVc/assembly/w_runtime/vV_runtime.asm"		
%include "vVc/assembly/w_runtime/vV_system00.asm"		
%include "vVc/assembly/w_runtime/vV_errors.asm"		
%include "vVc/assembly/w_runtime/vV_system10.asm"		
%include "vVc/assembly/w_runtime/vV_io.asm"			
%include "vVc/assembly/w_runtime/vV_ascii.asm"		
%include "w_samples/assembly/vartest_vars.was"	
%include "vVc/assembly/w_runtime/vV_system90.asm"		



global w_entry_point



segment .text 



		



vV_entry_point:


	mov rbp, rsp			;Setup Stack Frame
	
	
 ;OpADR: [0]  ; PUSH opcode 

	vV_push 333 


 ;OpADR: [1]  ; Var assignement					

vV_pop eax
mov [u_global.gulf] , eax

 ;OpADR: [2]  ; PUSH opcode 

	vV_push 5 


 ;OpADR: [3]  ; Var assignement					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 0			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [4]  ; PUSH opcode 

	vV_push 42 


 ;OpADR: [5]  ; Var assignement					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 1			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [6]  ; PUSH opcode 

	vV_push 69 


 ;OpADR: [7]  ; Var assignement					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 2			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [8]  ; PUSH opcode 

	vV_push 43 


 ;OpADR: [9]  ; Var assignement					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 3			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [10]  ; PUSH opcode 

	vV_push 67 


 ;OpADR: [11]  ; Var assignement					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 4			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [12]  ; PUSH opcode 

	vV_push 34 


 ;OpADR: [13]  ; Var assignement					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 0			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [14]  ; PUSH opcode 

	vV_push 467 


 ;OpADR: [15]  ; Var assignement					

	xor eax , eax	
	add eax , 1			
	mov ecx , 8
	mul ecx		
	add eax , 0			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [16]  ; PUSH opcode 

	vV_push 888 


 ;OpADR: [17]  ; Var assignement					

	xor eax , eax	
	add eax , 2			
	mov ecx , 8
	mul ecx		
	add eax , 0			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [18]  ; Var invocation					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 0			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [19]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [20]  ; Var invocation					

	xor eax , eax	
	add eax , 1			
	mov ecx , 8
	mul ecx		
	add eax , 0			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [21]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [22]  ; Var invocation					

	xor eax , eax	
	add eax , 2			
	mov ecx , 8
	mul ecx		
	add eax , 0			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [23]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [24]  ; PUSH opcode 

	vV_push 42 


 ;OpADR: [25]  ; Var assignement					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 1			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [26]  ; PUSH opcode 

	vV_push 900 


 ;OpADR: [27]  ; Var assignement					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 0			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [28]  ; Var invocation					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	add eax , 1			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.foo
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [29]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [30]  ; PUSH opcode 

	vV_push 0 



	wblock_0:		

;------------------------------------------------------


 ;OpADR: [31]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [32]  ; Var invocation					

mov rax , [i_global.mult]
vV_push eax

 ;OpADR: [33]  ; SWAP opcode 


	vV_swap		


 ;OpADR: [34]  ; Var invocation					

mov rax , [i_global.colomn]
vV_push eax

 ;OpADR: [35]  ; Var assignement					

	xor eax , eax	
	vV_pop edi		
	add eax , edi			
	mov ecx , 8
	mul ecx		
	vV_pop edi		
	add eax , edi			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.board
vV_pop eax
mov [edi + esi] , eax

 ;OpADR: [36]  ; Var invocation					

mov rax , [i_global.mult]
vV_push eax

 ;OpADR: [37]  ; Var invocation					

mov rax , [i_global.mult]
vV_push eax

 ;OpADR: [38]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [39]  ; Var assignement					

vV_pop eax
mov [i_global.mult] , eax

 ;OpADR: [40]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [41]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [42]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [43]  ; Var invocation					

mov rax , [i_global.c]
vV_push eax

 ;OpADR: [44]  ; MORE opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jbe short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [45]  ; NOT opcode 					

	not DWORD vV_top			

 ;OpADR: [46]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_0		

 ;OpADR: [47]  ; PUSH opcode 

	vV_push 0 



	wblock_1:		

;------------------------------------------------------


 ;OpADR: [48]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [49]  ; Var invocation					

	xor eax , eax	
	add eax , 0			
	mov ecx , 8
	mul ecx		
	vV_pop edi		
	add eax , edi			
	mov ecx , 10
	mul ecx		
	mov esi , eax		
	mov edi , u_global.board
mov rax , [edi + esi]
vV_push eax

 ;OpADR: [50]  ; OUT opcode (4)			

	mov r10d , vV_FORMAT_BIN		
	call vV_io_out				
						

 ;OpADR: [51]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [52]  ; ADD opcode 					

	mov eax , vV_2nd			
	add eax , vV_top			
	mov vV_2nd , eax			

	vV_dec_sp 1		

 ;OpADR: [53]  ; DUP opcode (1)			

	vV_dup 1			


 ;OpADR: [54]  ; Var invocation					

mov rax , [i_global.c]
vV_push eax

 ;OpADR: [55]  ; MORE opcode					

	mov eax , vV_top			
	cmp DWORD vV_2nd , eax			

	jbe short 0xb				

			mov DWORD vV_2nd , -1	

	jmp short 0x9				

			mov DWORD vV_2nd , 0	

	vV_dec_sp 1				

 ;OpADR: [56]  ; NOT opcode 					

	not DWORD vV_top			

 ;OpADR: [57]  ; WHILE opcode					

	vV_dec_sp 1				
	or DWORD[vV_sp] , 0			
	jne wblock_1		
		
		ret

;Transpiled from vV with vVc version 0.0.4
		
		