%include "vVc/assembly/w_runtime/vV_defines.asm"		
%include "vVc/assembly/w_runtime/vV_error_code.asm"		
%include "vVc/assembly/w_runtime/vV_runtime.asm"		
%include "vVc/assembly/w_runtime/vV_system00.asm"		
%include "vVc/assembly/w_runtime/vV_errors.asm"		
%include "vVc/assembly/w_runtime/vV_system10.asm"		
%include "vVc/assembly/w_runtime/vV_io.asm"			
%include "vVc/assembly/w_runtime/vV_ascii.asm"		
%include "w_samples/assembly/vartest_vars.was"	
%include "vVc/assembly/w_runtime/vV_system90.asm"		



global w_entry_point



segment .text 



		



vV_entry_point:


	mov rbp, rsp			;Setup Stack Frame
	
	
 ;OpADR: [0]  ; PUSH opcode 

	vV_push 420 


 ;OpADR: [1]  ; Var assignement					

	xor rax , rax
	lea rdi , [u_global.x]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [2]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [u_global.x]	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [u_global.p]	
	add rdi , rax	
	mov  rax , rsi	
	mov [rdi] , eax	

 ;OpADR: [3]  ; Var invocation					

	xor rax , rax
	lea rdi , [u_global.p]	
	add rdi , rax	
	mov eax , [rdi]	
	mov eax , [rax]	
	vV_push eax	

 ;OpADR: [4]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [5]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [6]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [7]  ; Var assignement					

	lea rdi , [u_global.a]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [8]  ; PUSH opcode 

	vV_push 4 


 ;OpADR: [9]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [10]  ; Var assignement					

	lea rdi , [u_global.a]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [11]  ; PUSH opcode 

	vV_push 8 


 ;OpADR: [12]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [13]  ; Var assignement					

	lea rdi , [u_global.a]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [14]  ; PUSH opcode 

	vV_push 16 


 ;OpADR: [15]  ; PUSH opcode 

	vV_push 3 


 ;OpADR: [16]  ; Var assignement					

	lea rdi , [u_global.a]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [17]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [u_global.x]	
	mov rsi , rdi	
	add rsi , rax	
	lea rdi , [u_global.c]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov  rax , rsi	
	mov [rdi] , eax	

 ;OpADR: [18]  ; Var invocation					

	lea rdi , [u_global.c]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	mov eax , [rax]	
	vV_push eax	

 ;OpADR: [19]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [20]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [u_global.x]	
	mov rsi , rdi	
	add rsi , rax	
	lea rdi , [u_global.c]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov  rax , rsi	
	mov [rdi] , eax	

 ;OpADR: [21]  ; PUSH opcode 

	vV_push 666 


 ;OpADR: [22]  ; Var assignement					

	xor rax , rax
	lea rdi , [u_global.x]	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [23]  ; Var invocation					

	lea rdi , [u_global.c]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	mov eax , [rax]	
	vV_push eax	

 ;OpADR: [24]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [25]  ; Var invocation					

	lea rdi , [u_global.c]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	mov eax , [rax]	
	vV_push eax	

 ;OpADR: [26]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [27]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [28]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [29]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [u_global.a]	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [u_global.b]	
	add rdi , rax	
	mov  rax , rsi	
	mov [rdi] , eax	

 ;OpADR: [30]  ; Var invocation					

	lea rdi , [u_global.a]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [31]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [32]  ; Var invocation					

	lea rdi , [u_global.a]	
	xor rax , rax	
	mov ecx , 3	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [33]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [34]  ; Var invocation					

	lea rdi , [u_global.b]	
	mov edi , [rdi]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [35]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [36]  ; Var invocation					

	lea rdi , [u_global.b]	
	mov edi , [rdi]	
	xor rax , rax	
	mov ecx , 3	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [37]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [38]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [39]  ; PUSH opcode 

	vV_push 53 


 ;OpADR: [40]  ; Var assignement					

	lea rdi , [u_global.a]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [41]  ; Var invocation					

	lea rdi , [u_global.b]	
	mov edi , [rdi]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [42]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [43]  ; PUSH opcode 

	vV_push 776 


 ;OpADR: [44]  ; Var assignement					

	lea rdi , [u_global.b]	
	mov edi , [rdi]	
	xor rax , rax	
	mov ecx , 2	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [45]  ; Var invocation					

	lea rdi , [u_global.a]	
	xor rax , rax	
	mov ecx , 2	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [46]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [47]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [48]  ; PUSH opcode 

	vV_push 88 


 ;OpADR: [49]  ; Var assignement					

	lea rdi , [u_global.l1]	
	xor rax , rax	
	mov ecx , 2	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [50]  ; PUSH opcode 

	vV_push 99 


 ;OpADR: [51]  ; Var assignement					

	lea rdi , [u_global.l1]	
	xor rax , rax	
	mov ecx , 3	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [52]  ; PUSH opcode 

	vV_push 66 


 ;OpADR: [53]  ; Var assignement					

	lea rdi , [u_global.l1]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [54]  ; PUSH opcode 

	vV_push 77 


 ;OpADR: [55]  ; Var assignement					

	lea rdi , [u_global.l1]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [56]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [u_global.l1]	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [u_global.l2]	
	add rdi , rax	
	mov ecx , 16	
	rep movsb	

 ;OpADR: [57]  ; PUSH opcode 

	vV_push 22222 


 ;OpADR: [58]  ; Var assignement					

	lea rdi , [u_global.l2]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [59]  ; PUSH opcode 

	vV_push 22222 


 ;OpADR: [60]  ; Var assignement					

	lea rdi , [u_global.l2]	
	xor rax , rax	
	mov ecx , 2	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	vV_pop ecx	
	add rdi , rax	
	mov [rdi] , ecx	

 ;OpADR: [61]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [62]  ; Var invocation					

	lea rdi , [u_global.l1]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [63]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [64]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [65]  ; Var invocation					

	lea rdi , [u_global.l1]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [66]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [67]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [68]  ; Var invocation					

	lea rdi , [u_global.l1]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [69]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [70]  ; PUSH opcode 

	vV_push 3 


 ;OpADR: [71]  ; Var invocation					

	lea rdi , [u_global.l1]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [72]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [73]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [74]  ; PUSH opcode 

	vV_push 0 


 ;OpADR: [75]  ; Var invocation					

	lea rdi , [u_global.l2]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [76]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [77]  ; PUSH opcode 

	vV_push 1 


 ;OpADR: [78]  ; Var invocation					

	lea rdi , [u_global.l2]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [79]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [80]  ; PUSH opcode 

	vV_push 2 


 ;OpADR: [81]  ; Var invocation					

	lea rdi , [u_global.l2]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [82]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [83]  ; PUSH opcode 

	vV_push 3 


 ;OpADR: [84]  ; Var invocation					

	lea rdi , [u_global.l2]	
	xor rax , rax	
	vV_pop ecx	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [85]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [86]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [87]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [u_global.l1]	
	mov rsi , rdi	
	add rsi , rax	
	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	shl eax , 2	
	add rdi , rax	
	mov ecx , 16	
	rep movsb	

 ;OpADR: [88]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [u_global.l2]	
	mov rsi , rdi	
	add rsi , rax	
	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	shl eax , 2	
	add rdi , rax	
	mov ecx , 16	
	rep movsb	

 ;OpADR: [89]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [90]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [u_global.x]	
	mov rsi , rdi	
	add rsi , rax	
	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rsi]	
	mov DWORD[rdi] , eax	

 ;OpADR: [91]  ; Var invocation					

	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [92]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [93]  ; Var invocation					

	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [94]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [95]  ; Var invocation					

	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 2	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [96]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [97]  ; Var invocation					

	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 3	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [98]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [99]  ; Var invocation					

	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 0	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [100]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [101]  ; Var invocation					

	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [102]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [103]  ; Var invocation					

	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 2	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [104]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [105]  ; Var invocation					

	lea rdi , [u_global.matrix]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 3	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [106]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [107]  ; FLUSH opcode					

		call vV_io_flush	

 ;OpADR: [108]  ; Var Ref assignement					

	xor rax , rax
	lea rdi , [u_global.matrix]	
	mov rsi , rdi	
	add rsi , rax	
	xor rax , rax
	lea rdi , [u_global.xyg]	
	add rdi , rax	
	mov  rax , rsi	
	mov [rdi] , eax	

 ;OpADR: [109]  ; Var invocation					

	lea rdi , [u_global.xyg]	
	mov edi , [rdi]	
	xor rax , rax	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	mov ecx , 1	
	cmp ecx , 4	
	jge vV_bound_error	
	add eax , ecx	
	shl eax , 2	
	add rdi , rax	
	mov eax , [rdi]	
	vV_push eax	

 ;OpADR: [110]  ; OUT opcode (0)			

	call vV_io_out_default			
						

 ;OpADR: [111]  ; PUSH opcode 

	vV_push 543521122 


 ;OpADR: [112]  ; OUT opcode (9)			

								
	call vV_io_out_packed_char				
						
		
		ret

;Transpiled from vV with vVc version 0.0.4
		
		