     1                                  %include "vVc/assembly/w_runtime/vV_defines.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> ;------------------Variables From Project-------------
     5                              <1> 
     6                              <1> 	;------------------Should come from io module(need refactoring)
     7                              <1> 
     8                              <1> 
     9                              <1> 	%define vV_input_buffer_size 255
    10                              <1> 	%define vV_output_buffer_size 255
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;------------------Implementation Relative-------------
    15                              <1> 
    16                              <1> %deftok vV_sp 'r15'
    17                              <1> 
    18                              <1> %deftok vV_spS 'r14'
    19                              <1> 
    20                              <1> %deftok vV_sdir '-'
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24                              <1> 
    25                              <1> ;------------------Stack Shortcuts--------------------
    26                              <1> 
    27                              <1> %define cell(a) (a*4)
    28                              <1> 
    29                              <1> 
    30                              <1> %define vV_top [vV_sp vV_sdir %+ cell(1)]
    31                              <1> %define vV_2nd [vV_sp vV_sdir %+ cell(2)]
    32                              <1> 
    33                              <1> %define vV_stack_v(a) ([vV_sp vV_sdir %+ cell(a)])
    34                              <1> 
    35                              <1> 
    36                              <1> ;-------------------Out_Format Pointer------------------
    37                              <1> 
    38                              <1> %deftok vV_FORMAT_BIN "vV_ascii_int_to_bin"
    39                              <1> %deftok vV_FORMAT_DEC "vV_ascii_int_to_dec"
    40                              <1> %deftok vV_FORMAT_HEX "vV_ascii_int_to_hex"
    41                              <1> 
    42                              <1> 
    43                              <1> 
    44                              <1> ;--------------------Op Macros--------------------------
    45                              <1> 
    46                              <1> %macro vV_push 1
    47                              <1> 
    48                              <1> 	mov DWORD[vV_sp] , %1
    49                              <1> 	add vV_sp , 4
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro vV_pop 1
    54                              <1> 
    55                              <1> 	sub vV_sp , 4
    56                              <1> 	mov %1 , [vV_sp]
    57                              <1> 	
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro vV_swap 0
    61                              <1> 
    62                              <1> 	mov edx , [vV_sp-4]
    63                              <1> 	mov eax , [vV_sp-8]
    64                              <1> 	mov [vV_sp-8] , edx 
    65                              <1> 	mov [vV_sp-4] , eax 
    66                              <1> 	
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro vV_dup 1
    70                              <1> 
    71                              <1> 	mov ecx , %1
    72                              <1> 	lea rsi , [vV_sp-cell(%1)]
    73                              <1> 	mov rdi , vV_sp
    74                              <1> 		
    75                              <1> 	rep movsd
    76                              <1> 	
    77                              <1> 	add vV_sp , cell(%1)
    78                              <1> 	
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> 
    82                              <1> %macro vV_dec_sp 1
    83                              <1> 
    84                              <1> 	sub vV_sp , cell(%1)
    85                              <1> 	
    86                              <1> %endmacro
    87                              <1> 	
     2                                  %include "vVc/assembly/w_runtime/vV_error_code.asm"		
     1                              <1> 
     2                              <1> %define vV_ERR_IO_I_OVERFLOW 1
     3                              <1> %define vV_ERR_IO_O_OVERFLOW 2
     4                              <1> %define vV_ERR_IO_I_UNVALID 3
     5                              <1> %define vV_ERR_IO_O_UNVALID 4
     6                              <1> %define vV_ERR_IO_I_VALUE_OVERFLOW 5
     7                              <1> 
     8                              <1> 
     9                              <1> %define vV_ERR_VALUE_OVERFLOW 8
    10                              <1> 
    11                              <1> 
    12                              <1> %define vV_ERR_MEMORY_BUFFER_LIMIT 16
    13                              <1> %define vV_ERR_MEMORY_OUT_OF_BOUND 17
     3                                  %include "vVc/assembly/w_runtime/vV_runtime.asm"		
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> 
     4                              <1> ;%include "vVc/assembly/w_runtime/vV_errors.asm"
     5                              <1> ;%include "vVc/assembly/w_runtime/vV_system00.asm"
     6                              <1> ;%include "vVc/assembly/w_runtime/vV_system10.asm"
     7                              <1> ;%include "vVc/assembly/w_runtime/vV_system90.asm"
     8                              <1> 
     9                              <1> 
    10                              <1> global _start
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;extern vV_entry_point			;Defined by main program
    15                              <1> 
    16                              <1> 
    17                              <1> 
    18                              <1> 	
    19                              <1> segment .data 
    20                              <1> 
    21                              <1> 
    22                              <1> 	
    23                              <1> 
    24                              <1> segment .text 
    25                              <1> 
    26                              <1> 
    27                              <1> 	vV_forced_exit:				;rax hold exit code
    28                              <1> 							;Removed default error printing
    29                              <1> 							;This will now happens in errors module
    30                              <1> 
    31 00000000 4889C7              <1> 		mov rdi, rax
    32 00000003 B83C000000          <1> 		mov rax, SYS_EXIT
    33 00000008 0F05                <1> 		syscall
    34                              <1> 		
    35                              <1> 		
    36                              <1> 
    37                              <1> 
    38                              <1> 	save_regs:			;In case called from other process
    39                              <1> 	
    40 0000000A 58                  <1> 		pop rax
    41                              <1> 	
    42 0000000B 53                  <1> 		push rbx
    43 0000000C 4154                <1> 		push r12
    44 0000000E 4155                <1> 		push r13
    45 00000010 4156                <1> 		push r14
    46 00000012 4157                <1> 		push r15
    47                              <1> 		
    48 00000014 50                  <1> 		push rax
    49                              <1> 		
    50 00000015 C3                  <1> 		ret
    51                              <1> 		
    52                              <1> 	restore_regs:
    53                              <1> 	
    54 00000016 58                  <1> 		pop rax
    55                              <1> 	
    56 00000017 415F                <1> 		pop r15
    57 00000019 415E                <1> 		pop r14
    58 0000001B 415D                <1> 		pop r13
    59 0000001D 415C                <1> 		pop r12
    60 0000001F 5B                  <1> 		pop rbx
    61                              <1> 		
    62 00000020 50                  <1> 		push rax
    63                              <1> 		
    64 00000021 C3                  <1> 		ret
    65                              <1> 		
    66                              <1> 	setup_memory:
    67                              <1> 	
    68 00000022 C70425[80000000]00- <1> 		mov DWORD [vV_input_buffer_content] , 0
    68 0000002A 000000              <1>
    69 0000002D C70425[83010000]00- <1> 		mov DWORD [vV_output_buffer_content] , 0
    69 00000035 000000              <1>
    70                              <1> 		
    71                              <1> 		;mov DWORD [endofline] , 0xa
    72                              <1> 		
    73 00000038 C70425[28010000]-   <1> 		mov DWORD[vV_sys_format_mode] , vV_ascii_int_to_dec
    73 0000003F [97040000]          <1>
    74                              <1> 		
    75 00000043 C3                  <1> 		ret
    76                              <1> 		
    77                              <1> 		
    78                              <1> 	
    79                              <1> 		
    80                              <1> _start:				;Entry point of Every Program
    81                              <1> 	
    82                              <1> 		
    83                              <1> 
    84 00000044 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
    85                              <1> 	
    86 00000047 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
    86 00000049 [8A0B410000000000]  <1>
    87                              <1> 	
    88 00000051 E8B4FFFFFF          <1> 	call save_regs				;just in case
    89                              <1> 	
    90                              <1> 	
    91 00000056 E8C7FFFFFF          <1> 	call setup_memory			;all memory setup at start
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
    95 0000005B E8C9060000          <1> 	call vV_entry_point			;Start the program 
    96                              <1> 	
    97                              <1> 	
    98 00000060 E8B1FFFFFF          <1> 	call restore_regs
    99                              <1> 	
   100                              <1> 
   101                              <1> ;------------------------------------------------------------------------------
   102                              <1> 
   103 00000065 B83C000000          <1> 	mov rax, SYS_EXIT
   104 0000006A BF00000000          <1> 	mov rdi, 0		;Normal exit procedure (no code returned from main)
   105 0000006F 0F05                <1> 	syscall
   106                              <1> 	
   107                              <1> 	
   108                              <1> 	
   109                              <1> 	
   110                              <1> 	
     4                                  %include "vVc/assembly/w_runtime/vV_system00.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5 00000000 <res 00000040>      <1> 	vV_sys_start:	resd 16		;not used now
     6                              <1> 
     7                              <1> 	
     8                              <1> 	
     9                              <1> segment .data
    10                              <1> 
    11                              <1> 
    12                              <1> ;--Start of Memory----------------------------------------------------------
    13                              <1> 
    14                              <1> 	ALIGN 8
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;---------------------Error Managment----------
    18                              <1> 
    19                              <1> 
    20                              <1> ;error vectors	
    21                              <1> 	
    22                              <1> 	vV_error_vectors:
    23 00000000 [FA00000000000000]- <1> 	times 17 dq vV_error_unhandeled
    23 00000000 <rept>              <1>
    24 00000088 [9D00000000000000]  <1> 	dq vV_error_invalid_index
    25 00000090 [FA00000000000000]- <1> 	times 14 dq vV_error_unhandeled
    25 00000090 <rept>              <1>
    26                              <1> 
    27                              <1> 	
    28                              <1> 	
    29                              <1> segment .text
    30                              <1> 
    31                              <1> 
    32                              <1> vV_error:
    33                              <1> 
    34 00000071 52                  <1> 	push rdx
    35                              <1> 	
    36 00000072 4831D2              <1> 	xor rdx , rdx
    37                              <1> 	
    38 00000075 88E2                <1> 	mov dl , ah
    39                              <1> 	
    40 00000077 C0E203              <1> 	shl dl , 3
    41                              <1> 	
    42 0000007A 67FF92[00000000]    <1> 	call [vV_error_vectors + edx]
    43                              <1> 	
    44                              <1> 	
    45 00000081 5A                  <1> 	pop rdx
    46                              <1> 	
    47 00000082 C3                  <1> 	ret
    48                              <1> 	
    49                              <1> 	
    50                              <1> vV_error_fatal:
    51                              <1> 
    52                              <1> 	
    53 00000083 88D0                <1> 	mov al , dl
    54                              <1> 	
    55 00000085 C0E803              <1> 	shr al , 3
    56                              <1> 
    57 00000088 E873FFFFFF          <1> 	call vV_forced_exit
    58                              <1> 	
    59                              <1> vV_bound_error:
    60                              <1> 
    61 0000008D 89FB                <1> 	mov ebx , edi
    62 0000008F B411                <1> 	mov ah , vV_ERR_MEMORY_OUT_OF_BOUND
    63 00000091 E8DBFFFFFF          <1> 	call vV_error	
    64                              <1> 	
    65 00000096 B011                <1> 	mov al , vV_ERR_MEMORY_OUT_OF_BOUND
    66 00000098 E863FFFFFF          <1> 	call vV_forced_exit
    67                              <1> 	
    68                              <1> 	
    69                              <1> 	
    70                              <1> 	
    71                              <1> 	
    72                              <1> 	
    73                              <1> 
    74                              <1> 	
     5                                  %include "vVc/assembly/w_runtime/vV_errors.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> segment .bss
     5                              <1> 
     6                              <1> 
     7                              <1> 	ALIGNB 4
     8                              <1> 		
     9                              <1> 	vV_error_buffer:
    10 00000040 <res 00000040>      <1> 	resb 64
    11                              <1> 	vV_end_err_buff:
    12                              <1> 	vV_error_buffer_size equ vV_end_err_buff-vV_error_buffer
    13                              <1> 
    14                              <1> 
    15                              <1> 
    16                              <1> 
    17                              <1> segment .data
    18                              <1> 
    19                              <1> ;Error String	
    20                              <1> 
    21                              <1> 	
    22                              <1> 	vV_error_msg:
    23 00000100 556E68616E64656C65- <1> 	.default: db "Unhandeled Error "
    23 00000109 64204572726F7220    <1>
    24                              <1> 	default_size equ $-.default
    25 00000111 496E76616C69642049- <1> 	.invalid_index: db "Invalid Index Error : "
    25 0000011A 6E646578204572726F- <1>
    25 00000123 72203A20            <1>
    26                              <1> 	inv_indx_size equ $-.invalid_index
    27                              <1> 
    28                              <1> 
    29                              <1> 
    30                              <1> segment .text
    31                              <1> 
    32                              <1> 
    33                              <1> vV_error_invalid_index:
    34                              <1> 
    35                              <1> 
    36 0000009D 56                  <1> 	push rsi
    37 0000009E 57                  <1> 	push rdi	;Save reg used by syscall
    38 0000009F 4151                <1> 	push r9	;and by conversion func
    39 000000A1 53                  <1> 	push rbx	;Save Arg
    40                              <1> 	
    41 000000A2 BA16000000          <1> 	mov edx , inv_indx_size				;string lenght
    42 000000A7 48BE-               <1> 	mov rsi , vV_error_msg.invalid_index			;strng ptr
    42 000000A9 [1101000000000000]  <1>
    43 000000B1 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    44 000000B6 B801000000          <1> 	mov rax , 1				; Write sysCall
    45 000000BB 0F05                <1> 	syscall	
    46                              <1> 	
    47                              <1> 	
    48 000000BD 58                  <1> 	pop rax
    49                              <1> 	
    50 000000BE BF[40000000]        <1> 	mov edi , vV_error_buffer
    51 000000C3 41B940000000        <1> 	mov r9d , vV_error_buffer_size
    52 000000C9 E8C9030000          <1> 	call vV_ascii_int_to_dec	
    53                              <1> 
    54 000000CE 67C680[40000000]0A  <1> 	mov BYTE[vV_error_buffer + eax] , 0xa
    55                              <1> 	
    56 000000D6 FFC0                <1> 	inc eax
    57                              <1> 	
    58 000000D8 89C2                <1> 	mov edx , eax				;string lenght
    59 000000DA 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
    59 000000DC [4000000000000000]  <1>
    60 000000E4 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    61 000000E9 B801000000          <1> 	mov rax , 1				; Write sysCall
    62 000000EE 0F05                <1> 	syscall
    63                              <1> 	
    64 000000F0 4159                <1> 	pop r9
    65 000000F2 5F                  <1> 	pop rdi
    66 000000F3 5E                  <1> 	pop rsi
    67                              <1> 	
    68 000000F4 E88AFFFFFF          <1> 	call vV_error_fatal
    69                              <1> 	
    70 000000F9 C3                  <1> 	ret
    71                              <1> 	
    72                              <1> 	
    73                              <1> 	
    74                              <1> 
    75                              <1> 	
    76                              <1> vV_error_unhandeled:
    77                              <1> 
    78                              <1> 
    79 000000FA 56                  <1> 	push rsi
    80 000000FB 57                  <1> 	push rdi	;Save reg used by syscall
    81 000000FC 4151                <1> 	push r9	;and by conversion func
    82                              <1> 	
    83                              <1> 	
    84                              <1> ;push rax	;Save flags ( and value)
    85                              <1> 
    86 000000FE 53                  <1> 	push rbx	;Save Arg
    87 000000FF 52                  <1> push rdx		;Save error code
    88                              <1> 	
    89                              <1> 	
    90 00000100 BA11000000          <1> 	mov edx , default_size				;string lenght
    91 00000105 48BE-               <1> 	mov rsi , vV_error_msg.default			;strng ptr
    91 00000107 [0001000000000000]  <1>
    92 0000010F BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    93 00000114 B801000000          <1> 	mov rax , 1				; Write sysCall
    94 00000119 0F05                <1> 	syscall	
    95                              <1> 	
    96                              <1> 	
    97 0000011B 58                  <1> pop rax	;error code
    98                              <1> 
    99                              <1> 
   100 0000011C C0E803              <1> 	shr al , 3
   101                              <1> 	
   102                              <1> 	
   103 0000011F BF[40000000]        <1> 	mov edi , vV_error_buffer
   104 00000124 41B940000000        <1> 	mov r9d , vV_error_buffer_size
   105                              <1> 	
   106                              <1> 
   107 0000012A E868030000          <1> 	call vV_ascii_int_to_dec	
   108                              <1> 	
   109                              <1> 		
   110                              <1> 	
   111 0000012F 67C680[40000000]20  <1> 	mov BYTE[vV_error_buffer + eax] , ' '
   112                              <1> 	
   113                              <1> 	
   114                              <1> 	
   115                              <1> 	
   116 00000137 67488DB8[41000000]  <1> 	lea rdi , [vV_error_buffer + eax + 1]
   117 0000013F 4129F9              <1> 	sub r9d , edi
   118                              <1> 	
   119 00000142 58                  <1> 	pop rax
   120                              <1> 	
   121 00000143 E84F030000          <1> 	call vV_ascii_int_to_dec
   122                              <1> 	
   123 00000148 674C8D0C07          <1> 	lea r9 , [edi + eax]
   124                              <1> 	
   125 0000014D 41C6010A            <1> 	mov BYTE[r9] , 0xa
   126                              <1> 	
   127 00000151 49FFC1              <1> 	inc r9
   128                              <1> 	
   129 00000154 4981E9[40000000]    <1> 	sub r9 , vV_error_buffer
   130                              <1> 	
   131 0000015B 4489CA              <1> 	mov edx , r9d				;string lenght
   132 0000015E 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
   132 00000160 [4000000000000000]  <1>
   133 00000168 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
   134 0000016D B801000000          <1> 	mov rax , 1				; Write sysCall
   135 00000172 0F05                <1> 	syscall
   136                              <1> 	
   137 00000174 4159                <1> 	pop r9
   138 00000176 5F                  <1> 	pop rdi
   139 00000177 5E                  <1> 	pop rsi
   140                              <1> 	
   141                              <1> 	
   142                              <1> 	
   143                              <1> 	
   144 00000178 C3                  <1> 	ret
   145                              <1> 	
   146                              <1> 	
   147                              <1> 	
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151                              <1> 		
   152                              <1> 		
   153                              <1> 		
   154                              <1> 		
   155                              <1> 		
   156                              <1> 		
   157                              <1> 		
   158                              <1> 		
   159                              <1> 		
   160                              <1> 		
   161                              <1> 		
   162                              <1> 		
   163                              <1> 		
   164                              <1> 		
   165                              <1> 		
   166                              <1> 		
   167                              <1> 
     6                                  %include "vVc/assembly/w_runtime/vV_system10.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5                              <1> 	
     6                              <1> 	
     7                              <1> 	;------------Input Buffer
     8                              <1> 
     9                              <1> 
    10                              <1> 	
    11 00000080 <res 00000004>      <1> 	vV_input_buffer_content: resb 4			;Input Buffer current content
    12 00000084 <res 000000FF>      <1> 	vV_input_buffer: resb vV_input_buffer_size		;Input Buffer of 256 char
    13                              <1> 	
    14                              <1> 	
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;------------Output Buffer
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22 00000183 <res 00000004>      <1> 	vV_output_buffer_content: resb 4			;Output Buffer current content
    23 00000187 <res 000000FF>      <1> 	vV_output_buffer: resb vV_output_buffer_size		;Output Buffer of 256 char
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> 	
    28                              <1> ;------------Number Buffer
    29                              <1> 
    30                              <1> 
    31                              <1> 	
    32                              <1> 	
    33                              <1> 	;w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34                              <1> 	;endofline: resb 1					;Maybe Not Needed
    35                              <1> 	
    36                              <1> 
    37                              <1> 
    38                              <1> segment .data
    39 00000127 90                  <1> 	ALIGN 4
    40 00000128 [97040000]          <1> 	vV_sys_format_mode: dd vV_ascii_int_to_dec
     7                                  %include "vVc/assembly/w_runtime/vV_io.asm"			
     1                              <1> 
     2                              <1> 
     3                              <1> ;%include "vVc/assembly/w_runtime/vV_ascii.asm"
     4                              <1> 
     5                              <1> 
     6                              <1> ;Group all read/wrie syscalls
     7                              <1> 
     8                              <1> ;global convert_to_string
     9                              <1> ;global convert_to_int
    10                              <1> 
    11                              <1> ;extern vV_input_buffer
    12                              <1> ;extern vV_output_buffer
    13                              <1> ;extern w_number_buffer
    14                              <1> 
    15                              <1> global wio_out
    16                              <1> global wio_get
    17                              <1> global wio_get_str_raw
    18                              <1> global wio_get_str_null
    19                              <1> global wio_get_str_nline
    20                              <1> global wio_move_in_to_out
    21                              <1> 
    22                              <1> 
    23                              <1> segment .text 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> vV_io_flush_no_nline:							;Temporary
    28                              <1> 	
    29                              <1> 	
    30                              <1> 	
    31 00000179 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    32                              <1> 	
    33 00000180 C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    33 00000188 000000              <1>
    34                              <1> 	
    35 0000018B 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    35 0000018D [8701000000000000]  <1>
    36                              <1> 		
    37 00000195 BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    38 0000019A B801000000          <1> 	mov rax , 1					; Write sysCall
    39 0000019F 0F05                <1> 	syscall
    40                              <1> 	
    41                              <1> 	
    42                              <1> 	
    43 000001A1 C3                  <1> 	ret
    44                              <1> 
    45                              <1> vV_io_flush:
    46                              <1> 	
    47                              <1> 	
    48                              <1> 	
    49 000001A2 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    50                              <1> 	
    51 000001A9 C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    51 000001B1 000000              <1>
    52                              <1> 	
    53 000001B4 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    53 000001B6 [8701000000000000]  <1>
    54                              <1> 		
    55 000001BE 67C682[87010000]0A  <1> 	mov BYTE[vV_output_buffer + edx] , 0xa
    56 000001C6 FFC2                <1> 	inc edx
    57                              <1> 		
    58 000001C8 BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    59 000001CD B801000000          <1> 	mov rax , 1					; Write sysCall
    60 000001D2 0F05                <1> 	syscall
    61                              <1> 	
    62                              <1> 	
    63                              <1> 	
    64 000001D4 C3                  <1> 	ret
    65                              <1> 	
    66                              <1> 		
    67                              <1> ;-------------------------------------------------------------------------------
    68                              <1> ;-------------------------------------------------------------------------------
    69                              <1> 	
    70                              <1> vV_io_out_buffer_default:
    71                              <1> 
    72 000001D5 448B1425[28010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    73 000001DD E80F000000          <1> 	call vV_io_out_buffer
    74 000001E2 C3                  <1> 	ret
    75                              <1> 	
    76                              <1> vV_io_out_default:
    77                              <1> 
    78 000001E3 448B1425[28010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    79 000001EB E80C000000          <1> 	call vV_io_out
    80 000001F0 C3                  <1> 	ret
    81                              <1> 
    82                              <1> ;-------------------------------------------------------------------------------
    83                              <1> ;-------------------------------------------------------------------------------
    84                              <1> 	
    85                              <1> vV_io_out_buffer:				;print str repr of Top Of Stack element
    86                              <1> 						
    87                              <1> 						
    88 000001F1 E811000000          <1> 	call vV_io_out01			
    89 000001F6 E84A000000          <1> 	call vV_io_out_buffer_end
    90 000001FB C3                  <1> 	ret
    91                              <1> 
    92                              <1> ;-------------------------------------------------------------------------------
    93                              <1> 		
    94                              <1> vV_io_out:					;print str repr of Top Of Stack element
    95                              <1> 
    96                              <1> 
    97 000001FC E806000000          <1> 	call vV_io_out01					
    98 00000201 E826000000          <1> 	call vV_io_out_direct_end
    99 00000206 C3                  <1> 	ret
   100                              <1> 
   101                              <1> ;-------------------------------------------------------------------------------	
   102                              <1> ;-------------------------------------------------------------------------------	
   103                              <1> 
   104                              <1> vV_io_out01:					;print str repr of Top Of Stack element
   105                              <1> 
   106                              <1> 
   107                              <1> 	vV_pop eax				;get value in eax
   107                              <2> 
   107 00000207 4983EF04            <2>  sub vV_sp , 4
   107 0000020B 418B07              <2>  mov %1 , [vV_sp]
   107                              <2> 
   108                              <1> 	
   109 0000020E BF[87010000]        <1> 	mov edi , vV_output_buffer		;set dest as O_buff
   110 00000213 033C25[83010000]    <1> 	add edi ,DWORD[vV_output_buffer_content]		;set offset to start of freespace
   111                              <1> 	
   112 0000021A 57                  <1> push rdi					;Save buffer origin
   113                              <1> 	
   114 0000021B 41B9FF000000        <1> 	mov r9 , 255				;set Max buffer available	
   115 00000221 4129F9              <1> 	sub r9d , edi				;#TODO: Stop HardCoding VALUES!!!!
   116 00000224 41FFD2              <1> 		call r10			;call current conversion format function
   117 00000227 4831FF              <1> 	xor rdi , rdi
   118                              <1> 	
   119 0000022A 5F                  <1> pop rdi						;recover Buffer origin
   120                              <1> 	
   121 0000022B C3                  <1> 	ret
   122                              <1> 
   123                              <1> ;-------------------------------------------------------------------------------	
   124                              <1> 	
   125                              <1> vV_io_out_direct_end:
   126                              <1> 
   127                              <1> 
   128                              <1> 
   129 0000022C 67C604070A          <1> 	mov BYTE[edi + eax] , 0xa		;add new_line
   130                              <1> 		
   131 00000231 FFC0                <1> 		inc eax
   132                              <1> 		
   133 00000233 89C2                <1> 		mov edx , eax				;string lenght		
   134 00000235 4889FE              <1> 		mov rsi , rdi				;strng ptr
   135 00000238 BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   136 0000023D B801000000          <1> 		mov rax , 1				; Write sysCall
   137 00000242 0F05                <1> 		syscall
   138                              <1> 	
   139 00000244 C3                  <1> 		ret
   140                              <1> 
   141                              <1> ;-------------------------------------------------------------------------------		
   142                              <1> 		
   143                              <1> vV_io_out_buffer_end:
   144                              <1> 
   145 00000245 010425[83010000]    <1> 	add [vV_output_buffer_content] , eax
   146                              <1> 
   147 0000024C C3                  <1> 	ret
   148                              <1> 
   149                              <1> ;-------------------------------------------------------------------------------
   150                              <1> 
   151                              <1> vV_io_out_char:
   152                              <1> 
   153                              <1> 	
   154 0000024D E827000000          <1> 	call vV_io_read_char
   155 00000252 E8D5FFFFFF          <1> 	call vV_io_out_direct_end
   156                              <1> 	
   157 00000257 C3                  <1> 	ret
   158                              <1> 	
   159                              <1> vV_io_out_packed_char:
   160                              <1> 
   161                              <1> 	
   162 00000258 E842000000          <1> 	call vV_io_read_packed_char
   163                              <1> 	
   164 0000025D E8CAFFFFFF          <1> 	call vV_io_out_direct_end
   165                              <1> 	
   166 00000262 C3                  <1> 	ret
   167                              <1> 	
   168                              <1> vV_io_out_char_buffer:
   169                              <1> 
   170 00000263 E811000000          <1> 	call vV_io_read_char
   171                              <1> 	
   172 00000268 E8D8FFFFFF          <1> 	call vV_io_out_buffer_end
   173                              <1> 	
   174 0000026D C3                  <1> 	ret
   175                              <1> 	
   176                              <1> vV_io_out_packed_char_buffer:
   177                              <1> 
   178 0000026E E82C000000          <1> 	call vV_io_read_packed_char
   179                              <1> 	
   180 00000273 E8CDFFFFFF          <1> 	call vV_io_out_buffer_end
   181                              <1> 	
   182 00000278 C3                  <1> 	ret
   183                              <1> 	
   184                              <1> vV_io_read_char:
   185                              <1> 
   186                              <1> 	vV_pop eax
   186                              <2> 
   186 00000279 4983EF04            <2>  sub vV_sp , 4
   186 0000027D 418B07              <2>  mov %1 , [vV_sp]
   186                              <2> 
   187                              <1> 	
   188 00000280 48BF-               <1> 	mov rdi , vV_output_buffer
   188 00000282 [8701000000000000]  <1>
   189 0000028A 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   190                              <1> 	
   191 00000291 678807              <1> 	mov [edi] , al
   192                              <1> 	
   193 00000294 BF[87010000]        <1> 	mov edi , vV_output_buffer
   194 00000299 B801000000          <1> 	mov eax , 1
   195                              <1> 	
   196 0000029E C3                  <1> 	ret	
   197                              <1> 	
   198                              <1> vV_io_read_packed_char:
   199                              <1> 
   200                              <1> 	vV_pop eax
   200                              <2> 
   200 0000029F 4983EF04            <2>  sub vV_sp , 4
   200 000002A3 418B07              <2>  mov %1 , [vV_sp]
   200                              <2> 
   201                              <1> 	
   202 000002A6 48BF-               <1> 	mov rdi , vV_output_buffer
   202 000002A8 [8701000000000000]  <1>
   203 000002B0 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   204                              <1> 	
   205 000002B7 678907              <1> 	mov [edi] , eax
   206                              <1> 	
   207 000002BA BF[87010000]        <1> 	mov edi , vV_output_buffer
   208 000002BF B804000000          <1> 	mov eax , 4	
   209                              <1> 	
   210 000002C4 C3                  <1> 	ret
   211                              <1> 		
   212                              <1> ;-------------------------------------------------------------------------------
   213                              <1> ;-------------------------------------------------------------------------------
   214                              <1> ;-------------------------------------------------------------------------------
   215                              <1> ;-------------------------------------------------------------------------------
   216                              <1> ;-------------------------------------------------------------------------------
   217                              <1> ;-------------------------------------------------------------------------------
   218                              <1> ;-------------------------------------------------------------------------------
   219                              <1> 	
   220                              <1> vV_io_read:
   221                              <1> 
   222                              <1> 								
   223 000002C5 48BE-               <1> 		mov rsi , vV_input_buffer		;ptr to string destination	
   223 000002C7 [8400000000000000]  <1>
   224 000002CF BAFF000000          <1> 		mov edx , vV_input_buffer_size				;string lenght	
   225 000002D4 BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   226 000002D9 B800000000          <1> 		mov rax , 0				; read sysCall
   227                              <1> 		
   228 000002DE 0F05                <1> 		syscall
   229                              <1> 	
   230                              <1> ;-------------Buffer_Overflow_Execption  
   231                              <1> 
   232                              <1> 
   233                              <1> 
   234 000002E0 3DFF000000          <1> 		cmp eax , 255				;Check if Buffer Is Full
   235                              <1> 		
   236 000002E5 721F                <1> 			jb .no_overflow
   237                              <1> 			
   238 000002E7 803C25[82010000]0A  <1> 		cmp BYTE[vV_input_buffer + vV_input_buffer_size-1] , 0xa	;Check if Buffer end with "\n"
   239                              <1> 		
   240 000002EF 7415                <1> 			je .no_overflow
   241                              <1> 		
   242                              <1> 		
   243 000002F1 50                  <1> 			push rax
   244 000002F2 53                  <1> 			push rbx
   245                              <1> 		
   246 000002F3 B401                <1> 			mov ah , vV_ERR_IO_I_OVERFLOW
   247 000002F5 6683C800            <1> 			or ax , 0
   248 000002F9 4831DB              <1> 			xor rbx , rbx
   249 000002FC 4889F3              <1> 			mov rbx , rsi
   250                              <1> 		
   251 000002FF E86DFDFFFF          <1> 			call vV_error
   252                              <1> 		
   253 00000304 5B                  <1> 			pop rbx
   254 00000305 58                  <1> 			pop rax
   255                              <1> 		
   256                              <1> 			;ret
   257                              <1> 		
   258                              <1> 		.no_overflow:
   259                              <1> 		
   260 00000306 C3                  <1> 			ret
   261                              <1> 		
   262                              <1> 		
   263                              <1> 	
   264                              <1> 	
   265                              <1> vV_io_get_default:
   266                              <1> 
   267 00000307 41BA[A7030000]      <1> 	mov r10d , vV_ascii_as_dec			;TODO: default settings
   268 0000030D E801000000          <1> 	call vV_io_get
   269 00000312 C3                  <1> 	ret
   270                              <1> 	
   271                              <1> 	
   272                              <1> vV_io_get:						;convert inputed value to 
   273                              <1> 							;32bit int, push it on
   274                              <1> 							;the stack
   275 00000313 E8ADFFFFFF          <1> 	call vV_io_read
   276                              <1> 		
   277                              <1> ;----------------------------------------------	
   278                              <1> 
   279 00000318 53                  <1> 	push rbx				;Save rbx (conversion uses it) 
   280                              <1> 
   281 00000319 89C3                <1> 		mov ebx , eax 			;send char count by ebx
   282 0000031B 31FF                <1> 		xor edi , edi 			;zero out counter
   283 0000031D BE[84000000]        <1> 		mov esi , vV_input_buffer	;Set source to I_buffer
   284                              <1> 		
   285                              <1> 
   286 00000322 41FFD2              <1> 		call r10
   287                              <1> 		
   288 00000325 5B                  <1> 	pop rbx
   289                              <1> 	
   290                              <1> 		vV_push eax
   290                              <2> 
   290 00000326 418907              <2>  mov DWORD[vV_sp] , %1
   290 00000329 4983C704            <2>  add vV_sp , 4
   290                              <2> 
   291                              <1> 		
   292 0000032D C3                  <1> 		ret
   293                              <1> 
   294                              <1> 
   295                              <1> ;-------------------------------------------------------------------------------
   296                              <1> ;-------------------------------------------------------------------------------
   297                              <1> 
   298                              <1> 
   299                              <1> vV_io_get_char:
   300                              <1> 
   301                              <1> 
   302 0000032E E892FFFFFF          <1> 	call vV_io_read
   303                              <1> 	
   304 00000333 31D2                <1> 	xor edx , edx
   305                              <1> 	
   306 00000335 8A1425[84000000]    <1> 	mov dl , [vV_input_buffer]
   307                              <1> 	
   308                              <1> 	vV_push edx
   308                              <2> 
   308 0000033C 418917              <2>  mov DWORD[vV_sp] , %1
   308 0000033F 4983C704            <2>  add vV_sp , 4
   308                              <2> 
   309                              <1> 	
   310 00000343 C3                  <1> 	ret
   311                              <1> 	
   312                              <1> vV_io_get_packed_char:
   313                              <1> 
   314 00000344 C70425[84000000]00- <1> 	mov DWORD [vV_input_buffer] , 0
   314 0000034C 000000              <1>
   315                              <1> 
   316 0000034F E871FFFFFF          <1> 	call vV_io_read
   317                              <1> 	
   318 00000354 31D2                <1> 	xor edx , edx
   319                              <1> 	
   320 00000356 8B1425[84000000]    <1> 	mov edx, [vV_input_buffer]
   321                              <1> 	
   322                              <1> 	vV_push edx
   322                              <2> 
   322 0000035D 418917              <2>  mov DWORD[vV_sp] , %1
   322 00000360 4983C704            <2>  add vV_sp , 4
   322                              <2> 
   323                              <1> 	
   324 00000364 C3                  <1> 	ret
   325                              <1> 	
   326                              <1> 		
   327                              <1> 		
   328                              <1> 
   329                              <1> 
   330                              <1> 
     8                                  %include "vVc/assembly/w_runtime/vV_ascii.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> segment .text 
     4                              <1> 
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> vV_ascii_as_hex2:						;Jumped to from parse_num OR called
     9                              <1> 								;use edi as counter/offset in string !Set if direct call
    10                              <1> 								;use esi as source string
    11                              <1> 								;concatenate result in eax
    12                              <1> 								;parse digit in cl
    13                              <1> 								
    14                              <1> 								;use r8 for base
    15                              <1> 								;use r9 for max_value
    16                              <1> 								
    17                              <1> 							
    18                              <1> 	;mov r8 , 16	
    19                              <1> 	
    20                              <1> 	.start_loop:
    21                              <1> 	
    22 00000365 678A0C3E            <1> 		mov cl , [esi + edi]
    23                              <1> 	
    24                              <1> 		
    25 00000369 80F930              <1> 		cmp cl , 48
    26                              <1> 		
    27 0000036C 7265                <1> 			jb vV_ascii_unvalid
    28                              <1> 			
    29 0000036E 80F93A              <1> 		cmp cl , 58
    30                              <1> 		
    31 00000371 720D                <1> 			jb .pass_int
    32                              <1> 			
    33 00000373 80F966              <1> 			cmp cl , 'f'
    34                              <1> 			
    35 00000376 775B                <1> 				ja vV_ascii_unvalid
    36                              <1> 			
    37 00000378 80F961              <1> 			cmp cl , 'a'
    38                              <1> 			
    39 0000037B 7256                <1> 				jb vV_ascii_unvalid
    40                              <1> 				
    41 0000037D 80E927              <1> 			sub cl , 39
    42                              <1> 				
    43                              <1> 			
    44                              <1> 		.pass_int:	
    45                              <1> 			
    46 00000380 80E930              <1> 		sub cl , '0'
    47                              <1> 		
    48                              <1> 		
    49                              <1> 		
    50 00000383 31D2                <1> 		xor edx , edx
    51                              <1> 		
    52 00000385 F8                  <1> 		clc
    53                              <1> 		
    54 00000386 41F7E0              <1> 		mul r8d
    55                              <1> 		
    56 00000389 725D                <1> 		jc vV_ascii_overflow
    57                              <1> 		
    58 0000038B 01C8                <1> 		add eax , ecx
    59                              <1> 		
    60                              <1> 		.pass02:
    61                              <1> 		
    62 0000038D FFC7                <1> 		inc edi
    63                              <1> 		
    64 0000038F 39DF                <1> 		cmp edi , ebx
    65                              <1> 		
    66 00000391 72D2                <1> 		jb .start_loop
    67                              <1> 
    68                              <1> 		
    69 00000393 C3                  <1> 		ret	
    70                              <1> 		
    71                              <1> 		
    72                              <1> ;
    73                              <1> ;				ebx		esi
    74                              <1> ;	ascii_to_format( buffer_size , buffer_adress ) 
    75                              <1> ;		
    76                              <1> ;
    77                              <1> ;	set:	rcx,rdx (rax) to 0
    78                              <1> ;		r8,r9
    79                              <1> ;		
    80                              <1> ;	call: specialized dexodefunction
    81                              <1> 		
    82                              <1> vV_ascii_as_hex:
    83                              <1> 	
    84 00000394 FFCB                <1> 	dec ebx
    85 00000396 41B810000000        <1> 	mov r8 , 16	
    86 0000039C 4831C0              <1> 	xor rax , rax 		;(just in case not switching from dec mode)			
    87 0000039F 4831C9              <1> 	xor rcx , rcx
    88 000003A2 4831D2              <1> 	xor rdx , rdx
    89 000003A5 EBBE                <1> 	jmp vV_ascii_as_hex2
    90                              <1> 
    91                              <1> vV_ascii_as_dec:
    92                              <1> 
    93 000003A7 FFCB                <1> 	dec ebx
    94 000003A9 41B80A000000        <1> 	mov r8 , 10			
    95 000003AF 41B93A000000        <1> 	mov r9 , 58
    96 000003B5 4831C9              <1> 	xor rcx , rcx
    97 000003B8 4831D2              <1> 	xor rdx , rdx
    98 000003BB EB5E                <1> 	jmp vV_ascii_as_decbin
    99                              <1> 
   100                              <1> vV_ascii_as_bin:
   101                              <1> 
   102 000003BD FFCB                <1> 	dec ebx
   103 000003BF 41B802000000        <1> 	mov r8 , 2			
   104 000003C5 41B932000000        <1> 	mov r9 , 50
   105 000003CB 4831C9              <1> 	xor rcx , rcx
   106 000003CE 4831D2              <1> 	xor rdx , rdx
   107                              <1> 	
   108 000003D1 EB48                <1> 	jmp vV_ascii_as_decbin
   109                              <1> 	
   110                              <1> vV_ascii_unvalid:
   111                              <1> 	
   112                              <1> 		;mov rax , 24;	#TODO: Defined Errors code/ data in file
   113                              <1> 		;xor rdx , rdx
   114                              <1> 		;mov dl , cl
   115                              <1> 		
   116                              <1> 		;call w_forced_exit
   117                              <1> 		
   118 000003D3 50                  <1> 		push rax
   119 000003D4 53                  <1> 		push rbx
   120                              <1> 		
   121 000003D5 B403                <1> 		mov ah , vV_ERR_IO_I_UNVALID
   122 000003D7 6683C800            <1> 		or ax , 0
   123 000003DB 4831DB              <1> 		xor rbx , rbx
   124 000003DE 88CB                <1> 		mov bl , cl
   125                              <1> 		
   126 000003E0 E88CFCFFFF          <1> 		call vV_error
   127                              <1> 		
   128 000003E5 5B                  <1> 		pop rbx
   129 000003E6 58                  <1> 		pop rax
   130                              <1> 		
   131 000003E7 C3                  <1> 		ret
   132                              <1> 		
   133                              <1> 		
   134                              <1> 		
   135                              <1> 		
   136                              <1> vV_ascii_overflow:
   137                              <1> 	
   138 000003E8 50                  <1> 		push rax
   139 000003E9 53                  <1> 		push rbx
   140                              <1> 		
   141 000003EA 4831DB              <1> 		xor rbx , rbx
   142 000003ED 4889C3              <1> 		mov rbx , rax
   143                              <1> 		
   144                              <1> 		;or rbx , 0x00010000
   145                              <1> 		
   146 000003F0 B401                <1> 		mov ah , vV_ERR_IO_I_OVERFLOW
   147 000003F2 6683C800            <1> 		or ax , 0
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151 000003F6 E876FCFFFF          <1> 		call vV_error
   152                              <1> 		
   153 000003FB 5B                  <1> 		pop rbx
   154 000003FC 58                  <1> 		pop rax
   155                              <1> 		
   156                              <1> 		;TODO: Maybe use vV_error return value for decision making
   157                              <1> 		
   158 000003FD B8FFFFFFFF          <1> 		mov eax , -1
   159                              <1> 		
   160 00000402 C3                  <1> 		ret
   161                              <1> 		
   162                              <1> 		
   163                              <1> vV_ascii_change_to_hex:
   164                              <1> 		
   165 00000403 83F800              <1> 		cmp eax , 0
   166                              <1> 			
   167 00000406 75CB                <1> 			jne vV_ascii_unvalid
   168                              <1> 			
   169 00000408 41B810000000        <1> 		mov r8 , 16
   170 0000040E 4831C9              <1> 		xor rcx , rcx
   171 00000411 4831C0              <1> 		xor rax ,rax
   172                              <1> 				
   173 00000414 FFC7                <1> 		inc edi
   174 00000416 E94AFFFFFF          <1> 		jmp vV_ascii_as_hex2		
   175                              <1> 		
   176                              <1> 	
   177                              <1> 
   178                              <1> 
   179                              <1> vV_ascii_as_decbin:						;ebx: number of char to read
   180                              <1> 
   181                              <1> 	
   182                              <1> 
   183                              <1> 								;use edi as counter/offset in string
   184                              <1> 								;concatenate result in eax
   185                              <1> 								;parse digit in cl
   186                              <1> 								
   187                              <1> 								;use r8 for base
   188                              <1> 								;use r9 for max_value					
   189                              <1> 								;itou
   190                              <1> 	;xor edi, edi			;should be set by caller
   191 0000041B 4831C0              <1> 	xor rax , rax
   192                              <1> 	
   193 0000041E 4831C9              <1> 	xor rcx , rcx
   194                              <1> 	
   195 00000421 4831D2              <1> 	xor rdx , rdx
   196                              <1> 	
   197                              <1> 	
   198                              <1> 	.start_loop:
   199                              <1> 	
   200 00000424 678A0C3E            <1> 		mov cl , [esi + edi]
   201                              <1> 		
   202                              <1> 		
   203 00000428 80F962              <1> 		cmp cl , 'b'										
   204 0000042B 7513                <1> 			jne .pass01
   205                              <1> 		
   206                              <1> 		.format_change:
   207                              <1> 			
   208 0000042D 83F800              <1> 			cmp eax , 0
   209                              <1> 			
   210 00000430 75A1                <1> 				jne vV_ascii_unvalid
   211                              <1> 				
   212 00000432 41B802000000        <1> 			mov r8 , 2
   213                              <1> 			
   214 00000438 41B932000000        <1> 			mov r9 , 50
   215                              <1> 	
   216 0000043E EB26                <1> 			jmp .pass02
   217                              <1> 		
   218                              <1> 		
   219                              <1> 	
   220                              <1> 		.pass01:
   221                              <1> 		
   222 00000440 80F968              <1> 		cmp cl , 'h'											
   223 00000443 74BE                <1> 			je vV_ascii_change_to_hex
   224 00000445 80F978              <1> 		cmp cl , 'x'											
   225 00000448 74B9                <1> 			je vV_ascii_change_to_hex
   226                              <1> 			
   227                              <1> 			
   228 0000044A 4438C9              <1> 		cmp cl , r9b
   229                              <1> 		
   230 0000044D 7384                <1> 			jae vV_ascii_unvalid
   231                              <1> 		
   232 0000044F 80F930              <1> 		cmp cl , 48
   233                              <1> 		
   234 00000452 0F827BFFFFFF        <1> 			jb vV_ascii_unvalid
   235                              <1> 			
   236                              <1> 		
   237                              <1> 			
   238 00000458 80E930              <1> 		sub cl , 48
   239                              <1> 		
   240 0000045B 4831D2              <1> 		xor rdx , rdx
   241 0000045E F8                  <1> 		clc
   242                              <1> 		
   243 0000045F 41F7E0              <1> 		mul r8d
   244                              <1> 		
   245 00000462 7284                <1> 		jc vV_ascii_overflow
   246                              <1> 		
   247 00000464 01C8                <1> 		add eax , ecx
   248                              <1> 		
   249                              <1> 		.pass02:
   250                              <1> 		
   251 00000466 FFC7                <1> 		inc edi
   252                              <1> 		
   253 00000468 39DF                <1> 		cmp edi , ebx
   254                              <1> 		
   255 0000046A 72B8                <1> 		jb .start_loop
   256                              <1> 		
   257                              <1> 		
   258 0000046C C3                  <1> 		ret			; result should be in eax
   259                              <1> 		
   260                              <1> 
   261                              <1> 	
   262                              <1> ;------------------------------------------------------------------------------------------
   263                              <1> ;------------------------------------------------------------------------------------------
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> vV_ascii_int_to_hex:					;value in eax
   268                              <1> 						;dest in rdi
   269                              <1> 
   270                              <1> 
   271                              <1> 
   272 0000046D 31C9                <1> 	xor ecx , ecx	
   273                              <1> 	
   274 0000046F BE10000000          <1> 	mov esi , 16
   275                              <1> 
   276                              <1> 	
   277                              <1> 	.loop01:
   278                              <1> 	
   279 00000474 4831D2              <1> 		xor rdx , rdx
   280                              <1> 		
   281 00000477 F7F6                <1> 		div esi
   282                              <1> 		
   283                              <1> 		
   284 00000479 80FA0A              <1> 		cmp dl , 10
   285                              <1> 		
   286 0000047C 7203                <1> 		jb .dec
   287                              <1> 		
   288 0000047E 80C207              <1> 			add dl , 7
   289                              <1> 		
   290                              <1> 		.dec:
   291                              <1> 		
   292 00000481 80C230              <1> 			add dl , '0'
   293                              <1> 		
   294                              <1> 		
   295 00000484 52                  <1> 		push rdx
   296                              <1> 		
   297 00000485 FFC1                <1> 		inc ecx
   298                              <1> 		
   299 00000487 39F0                <1> 		cmp eax , esi
   300                              <1> 		
   301 00000489 73E9                <1> 		jae .loop01
   302                              <1> 	
   303                              <1> 	
   304 0000048B 3C0A                <1> 	cmp al , 10
   305                              <1> 		
   306 0000048D 7202                <1> 		jb .dec2
   307                              <1> 		
   308 0000048F 0407                <1> 			add al , 7
   309                              <1> 		
   310                              <1> 		.dec2:
   311                              <1> 		
   312 00000491 0430                <1> 			add al , '0'	
   313 00000493 8807                <1> 	mov [rdi] , al
   314                              <1> 	
   315 00000495 EB1B                <1> 	jmp vV_ascii_pop_digits
   316                              <1> 		
   317                              <1> 	
   318                              <1> 	
   319                              <1> 	
   320                              <1> vV_ascii_int_to_dec:					;value in eax
   321                              <1> 						;dest in rdi
   322                              <1> 						;max_dest_size in r9d
   323                              <1> 
   324                              <1> 
   325                              <1> 
   326 00000497 31C9                <1> 	xor ecx , ecx	
   327                              <1> 	
   328 00000499 BE0A000000          <1> 	mov esi , 10
   329                              <1> 	
   330                              <1> 
   331                              <1> 
   332                              <1> 	
   333                              <1> 	.loop01:
   334                              <1> 	
   335 0000049E 4831D2              <1> 		xor rdx , rdx
   336                              <1> 		
   337 000004A1 F7F6                <1> 		div esi
   338                              <1> 		
   339                              <1> 		
   340 000004A3 80C230              <1> 		add dl , '0'
   341 000004A6 52                  <1> 		push rdx
   342                              <1> 		
   343 000004A7 FFC1                <1> 		inc ecx
   344                              <1> 		
   345 000004A9 83F80A              <1> 		cmp eax , 10
   346                              <1> 		
   347 000004AC 73F0                <1> 		jae .loop01
   348                              <1> 	
   349 000004AE 0430                <1> 	add al , '0'	
   350 000004B0 8807                <1> 	mov [rdi] , al
   351                              <1> 		
   352                              <1> 	
   353                              <1> 		
   354                              <1> vV_ascii_pop_digits:			; Need nb of digits currently on stack(ecx)
   355                              <1> 						;dest in rdi
   356 000004B2 41B801000000        <1> 		mov r8d , 1
   357 000004B8 FFC1                <1> 		inc ecx
   358                              <1> 		
   359 000004BA 4439C9              <1> 		cmp ecx , r9d
   360                              <1> 		
   361 000004BD 7219                <1> 		jb .loopstart
   362                              <1> 		
   363                              <1> 	
   364 000004BF 50                  <1> 			push rax
   365 000004C0 53                  <1> 			push rbx
   366                              <1> 		
   367 000004C1 B410                <1> 			mov ah , vV_ERR_MEMORY_BUFFER_LIMIT
   368 000004C3 6683C800            <1> 			or ax , 0
   369 000004C7 4831DB              <1> 			xor rbx , rbx
   370 000004CA 89FB                <1> 			mov ebx , edi
   371                              <1> 		
   372 000004CC E8A0FBFFFF          <1> 			call vV_error
   373                              <1> 		
   374 000004D1 5B                  <1> 			pop rbx
   375 000004D2 58                  <1> 			pop rax
   376                              <1> 			
   377 000004D3 4489C9              <1> 			mov ecx , r9d		;Should protect memory..
   378 000004D6 FFC9                <1> 			dec ecx		;will need testing
   379                              <1> 		
   380                              <1> 						
   381                              <1> 		.loopstart:
   382                              <1> 		
   383 000004D8 5A                  <1> 			pop rdx
   384 000004D9 6742881407          <1> 			mov BYTE[edi + r8d] , dl
   385 000004DE 41FFC0              <1> 			inc r8d
   386                              <1> 			
   387 000004E1 4139C8              <1> 			cmp r8d , ecx
   388                              <1> 		
   389 000004E4 72F2                <1> 		jb .loopstart
   390                              <1> 	
   391                              <1> 	
   392 000004E6 89C8                <1> 		mov eax , ecx
   393                              <1> 		
   394 000004E8 C3                  <1> 		ret	
   395                              <1> 	
   396                              <1> 	
   397                              <1> vV_ascii_int_to_bin:					;value in eax, 
   398                              <1> 							
   399                              <1> 
   400                              <1> 
   401 000004E9 31C9                <1> 	xor ecx , ecx
   402                              <1> 	
   403                              <1> 	
   404                              <1> 	.loop01:
   405                              <1> 	
   406                              <1> 		
   407 000004EB D1E8                <1> 		shr eax , 1
   408                              <1> 		
   409 000004ED 7205                <1> 		jc .one
   410                              <1> 		
   411 000004EF B230                <1> 			mov dl , '0'
   412 000004F1 52                  <1> 			push rdx
   413                              <1> 			
   414 000004F2 EB03                <1> 		jmp .next
   415                              <1> 		.one:
   416                              <1> 			
   417 000004F4 B231                <1> 			mov dl , '1'
   418 000004F6 52                  <1> 			push rdx
   419                              <1> 		
   420                              <1> 		.next:
   421                              <1> 		
   422 000004F7 FFC1                <1> 		inc ecx
   423                              <1> 		
   424 000004F9 83F801              <1> 		cmp eax , 1
   425                              <1> 		
   426 000004FC 77ED                <1> 		ja .loop01
   427                              <1> 	
   428 000004FE 0430                <1> 	add al , '0'	
   429 00000500 8807                <1> 	mov [rdi] , al
   430                              <1> 	
   431 00000502 EBAE                <1> 	jmp vV_ascii_pop_digits
   432                              <1> 	
   433                              <1> 	
   434                              <1> ;Will need a special version for String stack
   435                              <1> 
   436                              <1> 
   437                              <1> 
   438                              <1> 
   439                              <1> 
   440                              <1> 
   441                              <1> 
     9                                  %include "w_samples/assembly/collatzbuf_vars.was"	
     1                              <1>  segment .data 
     2                              <1> 
     3                              <1>  i_global:
     4 0000012C 40420F0000000000    <1> .max: dq 1000000
     5 00000134 0300000000000000    <1> .memoed: dq 3
     6 0000013C 0300000000000000    <1> .current: dq 3
     7 00000144 0000000000000000    <1> .biggest: dq 0
     8                              <1>  segment .bss 
     9                              <1> 
    10                              <1> 	u_global:
    11 00000286 <res 003D0900>      <1> .memo: resb 4000000 
    12 003D0B86 <res 00000004>      <1> .biggest_source: resb 4 
    10                                  %include "vVc/assembly/w_runtime/vV_system90.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	
     5                              <1> 	
     6                              <1> 	stacks: 
     7                              <1> 
     8                              <1> 
     9 003D0B8A <res 00040000>      <1> 	string_stack_start: resb 262144
    10                              <1> 
    11                              <1> 
    12                              <1> 	
    13                              <1> 	
    14                              <1> 						
    15 00410B8A <res 00020000>      <1> 	fake_stack_start: resb 131072
    11                                  
    12                                  
    13                                  
    14                                  global w_entry_point
    15                                  
    16                                  
    17                                  
    18                                  segment .text 
    19                                  
    20                                  
    21                                  imp:		
    22 00000504 55                      	push rbp	
    23 00000505 4889E5                  	mov rbp , rsp	
    24                                  
    25                                  ;------Setup Phase
    26                                  
    27                                  ;------Init Phase
    28                                  
    29                                  .tailcall:		;Body Section	
    30                                  
    31                                   ;OpADR: [0]  ; DUP opcode (1)			
    32                                  
    33                                  	vV_dup 1			
    33                              <1> 
    33 00000508 B901000000          <1>  mov ecx , %1
    33 0000050D 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
    33 00000511 4C89FF              <1>  mov rdi , vV_sp
    33                              <1> 
    33 00000514 F3A5                <1>  rep movsd
    33                              <1> 
    33 00000516 4983C704            <1>  add vV_sp , cell(%1)
    33                              <1> 
    34                                  
    35                                  
    36                                   ;OpADR: [1]  ; LSH opcode 					
    37                                  
    38 0000051A 41D167FC                	shl DWORD vV_top , 1			
    39                                  
    40                                   ;OpADR: [2]  ; PUSH opcode 
    41                                  
    42                                  	vV_push 1 
    42                              <1> 
    42 0000051E 41C70701000000      <1>  mov DWORD[vV_sp] , %1
    42 00000525 4983C704            <1>  add vV_sp , 4
    42                              <1> 
    43                                  
    44                                  
    45                                   ;OpADR: [3]  ; ADD opcode 					
    46                                  
    47 00000529 418B47F8                	mov eax , vV_2nd			
    48 0000052D 410347FC                	add eax , vV_top			
    49 00000531 418947F8                	mov vV_2nd , eax			
    50                                  
    51                                  	vV_dec_sp 1		
    51                              <1> 
    51 00000535 4983EF04            <1>  sub vV_sp , cell(%1)
    51                              <1> 
    52                                  
    53                                   ;OpADR: [4]  ; ADD opcode 					
    54                                  
    55 00000539 418B47F8                	mov eax , vV_2nd			
    56 0000053D 410347FC                	add eax , vV_top			
    57 00000541 418947F8                	mov vV_2nd , eax			
    58                                  
    59                                  	vV_dec_sp 1		
    59                              <1> 
    59 00000545 4983EF04            <1>  sub vV_sp , cell(%1)
    59                              <1> 
    60                                  
    61                                   ;OpADR: [5]  ; End of func opcode					
    62                                  
    63                                  
    64                                  ;------Cleanup Phase
    65                                  
    66                                  ;------frame restore Phase
    67 00000549 4889EC                  	mov rsp , rbp	
    68 0000054C 5D                      	pop rbp	
    69 0000054D C3                      	ret	
    70                                  collatz:		
    71 0000054E 55                      	push rbp	
    72 0000054F 4889E5                  	mov rbp , rsp	
    73                                  
    74                                  ;------Setup Phase
    75 00000552 4883EC18                	sub rsp , 24	;Space for local vars	
    76                                  
    77                                  ;------Init Phase
    78 00000556 C745F800000000          mov DWORD[rbp  - 8 ] , 0		; space for lvar 0 (c)	
    79                                  
    80                                  .tailcall:		;Body Section	
    81                                  
    82                                   ;OpADR: [6]  ; Var assignement					
    83                                  
    84                                  vV_pop eax
    84                              <1> 
    84 0000055D 4983EF04            <1>  sub vV_sp , 4
    84 00000561 418B07              <1>  mov %1 , [vV_sp]
    84                              <1> 
    85 00000564 8945F0                  mov [rbp - 16] , eax
    86                                  
    87                                  
    88                                  	wblock_3:		
    89                                  
    90                                  ;------------------------------------------------------
    91                                  
    92                                  
    93                                   ;OpADR: [7]  ; Var invocation					
    94                                  
    95 00000567 8B45F0                  mov eax , [rbp - 16]
    96                                  vV_push eax
    96                              <1> 
    96 0000056A 418907              <1>  mov DWORD[vV_sp] , %1
    96 0000056D 4983C704            <1>  add vV_sp , 4
    96                              <1> 
    97                                  
    98                                   ;OpADR: [8]  ; Var invocation					
    99                                  
   100 00000571 8B0425[34010000]        mov eax , [i_global.memoed]
   101                                  vV_push eax
   101                              <1> 
   101 00000578 418907              <1>  mov DWORD[vV_sp] , %1
   101 0000057B 4983C704            <1>  add vV_sp , 4
   101                              <1> 
   102                                  
   103                                   ;OpADR: [9]  ; LESS opcode					
   104                                  
   105 0000057F 418B47FC                	mov eax , vV_top			
   106 00000583 413947F8                	cmp DWORD vV_2nd , eax			
   107                                  
   108 00000587 73(0B)                  	jae short 0xb				
   109                                  
   110 00000589 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   111                                  
   112 00000591 EB(09)                  	jmp short 0x9				
   113                                  
   114 00000593 41C747F800000000        			mov DWORD vV_2nd , 0	
   115                                  
   116                                  	vV_dec_sp 1				
   116                              <1> 
   116 0000059B 4983EF04            <1>  sub vV_sp , cell(%1)
   116                              <1> 
   117                                  
   118                                   ;OpADR: [10]  ; IF opcode					
   119                                  
   120                                  	vV_dec_sp 1			
   120                              <1> 
   120 0000059F 4983EF04            <1>  sub vV_sp , cell(%1)
   120                              <1> 
   121 000005A3 41830F00                	or DWORD[vV_sp] , 0			
   122 000005A7 745F                    	je wblock_0	
   123                                  
   124                                   ;OpADR: [11]  ; Var invocation					
   125                                  
   126 000005A9 8B45F0                  mov eax , [rbp - 16]
   127                                  vV_push eax
   127                              <1> 
   127 000005AC 418907              <1>  mov DWORD[vV_sp] , %1
   127 000005AF 4983C704            <1>  add vV_sp , 4
   127                              <1> 
   128                                  
   129                                   ;OpADR: [12]  ; Var invocation					
   130                                  
   131 000005B3 31C0                    	xor eax , eax	
   132                                  	vV_pop edi		
   132                              <1> 
   132 000005B5 4983EF04            <1>  sub vV_sp , 4
   132 000005B9 418B3F              <1>  mov %1 , [vV_sp]
   132                              <1> 
   133 000005BC 81FF40420F00            	cmp edi , 1000000		
   134 000005C2 0F8DC5FAFFFF            	jge vV_bound_error		
   135 000005C8 01F8                    	add eax , edi			
   136 000005CA C1E002                  	shl eax , 2	
   137 000005CD 89C6                    	mov esi , eax		
   138 000005CF BF[86020000]            	mov edi , u_global.memo
   139 000005D4 678B0437                mov eax , [edi + esi]
   140                                  vV_push eax
   140                              <1> 
   140 000005D8 418907              <1>  mov DWORD[vV_sp] , %1
   140 000005DB 4983C704            <1>  add vV_sp , 4
   140                              <1> 
   141                                  
   142                                   ;OpADR: [13]  ; Var invocation					
   143                                  
   144 000005DF 8B45F8                  mov eax , [rbp - 8]
   145                                  vV_push eax
   145                              <1> 
   145 000005E2 418907              <1>  mov DWORD[vV_sp] , %1
   145 000005E5 4983C704            <1>  add vV_sp , 4
   145                              <1> 
   146                                  
   147                                   ;OpADR: [14]  ; ADD opcode 					
   148                                  
   149 000005E9 418B47F8                	mov eax , vV_2nd			
   150 000005ED 410347FC                	add eax , vV_top			
   151 000005F1 418947F8                	mov vV_2nd , eax			
   152                                  
   153                                  	vV_dec_sp 1		
   153                              <1> 
   153 000005F5 4983EF04            <1>  sub vV_sp , cell(%1)
   153                              <1> 
   154                                  
   155                                   ;OpADR: [15]  ; Var assignement					
   156                                  
   157                                  vV_pop eax
   157                              <1> 
   157 000005F9 4983EF04            <1>  sub vV_sp , 4
   157 000005FD 418B07              <1>  mov %1 , [vV_sp]
   157                              <1> 
   158 00000600 8945F8                  mov [rbp - 8] , eax
   159                                  
   160                                   ;OpADR: [16]  ; Break opcode					
   161                                  
   162 00000603 E9CA000000              	jmp wblock_4		
   163                                  
   164                                  
   165                                  	wblock_0:		
   166                                  
   167                                  ;------------------------------------------------------
   168                                  
   169                                  
   170                                   ;OpADR: [17]  ; Var invocation					
   171                                  
   172 00000608 8B45F0                  mov eax , [rbp - 16]
   173                                  vV_push eax
   173                              <1> 
   173 0000060B 418907              <1>  mov DWORD[vV_sp] , %1
   173 0000060E 4983C704            <1>  add vV_sp , 4
   173                              <1> 
   174                                  
   175                                   ;OpADR: [18]  ; PUSH opcode 
   176                                  
   177                                  	vV_push 1 
   177                              <1> 
   177 00000612 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   177 00000619 4983C704            <1>  add vV_sp , 4
   177                              <1> 
   178                                  
   179                                  
   180                                   ;OpADR: [19]  ; OR opcode					
   181                                  
   182 0000061D 418B47FC                	mov eax , vV_top			
   183 00000621 412147F8                	and DWORD vV_2nd , eax			
   184                                  
   185                                  	vV_dec_sp 1				
   185                              <1> 
   185 00000625 4983EF04            <1>  sub vV_sp , cell(%1)
   185                              <1> 
   186                                  
   187                                   ;OpADR: [20]  ; IF opcode					
   188                                  
   189                                  	vV_dec_sp 1			
   189                              <1> 
   189 00000629 4983EF04            <1>  sub vV_sp , cell(%1)
   189                              <1> 
   190 0000062D 41830F00                	or DWORD[vV_sp] , 0			
   191 00000631 7411                    	je wblock_2	
   192                                  
   193                                   ;OpADR: [21]  ; Var invocation					
   194                                  
   195 00000633 8B45F0                  mov eax , [rbp - 16]
   196                                  vV_push eax
   196                              <1> 
   196 00000636 418907              <1>  mov DWORD[vV_sp] , %1
   196 00000639 4983C704            <1>  add vV_sp , 4
   196                              <1> 
   197                                  
   198                                   ;OpADR: [22]  ; Function Call					
   199                                  
   200 0000063D E8C2FEFFFF              		call imp			
   201                                  
   202                                   ;OpADR: [23]  ; ELIF opcode					
   203                                  
   204 00000642 EB0E                    	jmp wblock_1	
   205                                  
   206                                  
   207                                  	wblock_2:		
   208                                  
   209                                  ;------------------------------------------------------
   210                                  
   211                                  
   212                                   ;OpADR: [24]  ; Var invocation					
   213                                  
   214 00000644 8B45F0                  mov eax , [rbp - 16]
   215                                  vV_push eax
   215                              <1> 
   215 00000647 418907              <1>  mov DWORD[vV_sp] , %1
   215 0000064A 4983C704            <1>  add vV_sp , 4
   215                              <1> 
   216                                  
   217                                   ;OpADR: [25]  ; RSH opcode 					
   218                                  
   219 0000064E 41D16FFC                	shr DWORD vV_top , 1			
   220                                  
   221                                  
   222                                  	wblock_1:		
   223                                  
   224                                  ;------------------------------------------------------
   225                                  
   226                                  
   227                                   ;OpADR: [26]  ; Var assignement					
   228                                  
   229                                  vV_pop eax
   229                              <1> 
   229 00000652 4983EF04            <1>  sub vV_sp , 4
   229 00000656 418B07              <1>  mov %1 , [vV_sp]
   229                              <1> 
   230 00000659 8945F0                  mov [rbp - 16] , eax
   231                                  
   232                                   ;OpADR: [27]  ; Var invocation					
   233                                  
   234 0000065C 8B45F8                  mov eax , [rbp - 8]
   235                                  vV_push eax
   235                              <1> 
   235 0000065F 418907              <1>  mov DWORD[vV_sp] , %1
   235 00000662 4983C704            <1>  add vV_sp , 4
   235                              <1> 
   236                                  
   237                                   ;OpADR: [28]  ; PUSH opcode 
   238                                  
   239                                  	vV_push 1 
   239                              <1> 
   239 00000666 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   239 0000066D 4983C704            <1>  add vV_sp , 4
   239                              <1> 
   240                                  
   241                                  
   242                                   ;OpADR: [29]  ; ADD opcode 					
   243                                  
   244 00000671 418B47F8                	mov eax , vV_2nd			
   245 00000675 410347FC                	add eax , vV_top			
   246 00000679 418947F8                	mov vV_2nd , eax			
   247                                  
   248                                  	vV_dec_sp 1		
   248                              <1> 
   248 0000067D 4983EF04            <1>  sub vV_sp , cell(%1)
   248                              <1> 
   249                                  
   250                                   ;OpADR: [30]  ; Var assignement					
   251                                  
   252                                  vV_pop eax
   252                              <1> 
   252 00000681 4983EF04            <1>  sub vV_sp , 4
   252 00000685 418B07              <1>  mov %1 , [vV_sp]
   252                              <1> 
   253 00000688 8945F8                  mov [rbp - 8] , eax
   254                                  
   255                                   ;OpADR: [31]  ; Var invocation					
   256                                  
   257 0000068B 8B45F0                  mov eax , [rbp - 16]
   258                                  vV_push eax
   258                              <1> 
   258 0000068E 418907              <1>  mov DWORD[vV_sp] , %1
   258 00000691 4983C704            <1>  add vV_sp , 4
   258                              <1> 
   259                                  
   260                                   ;OpADR: [32]  ; PUSH opcode 
   261                                  
   262                                  	vV_push 1 
   262                              <1> 
   262 00000695 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   262 0000069C 4983C704            <1>  add vV_sp , 4
   262                              <1> 
   263                                  
   264                                  
   265                                   ;OpADR: [33]  ; EQUAL opcode					
   266                                  
   267 000006A0 418B47FC                	mov eax , vV_top			
   268 000006A4 413947F8                	cmp DWORD vV_2nd , eax			
   269                                  
   270 000006A8 75(0B)                  	jnz short 0xb				
   271                                  
   272 000006AA 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   273                                  
   274 000006B2 EB(09)                  	jmp short 0x9				
   275                                  
   276 000006B4 41C747F800000000        			mov DWORD vV_2nd , 0	
   277                                  
   278                                  	vV_dec_sp 1				
   278                              <1> 
   278 000006BC 4983EF04            <1>  sub vV_sp , cell(%1)
   278                              <1> 
   279                                  
   280                                   ;OpADR: [34]  ; NOT opcode 					
   281                                  
   282 000006C0 41F757FC                	not DWORD vV_top			
   283                                  
   284                                   ;OpADR: [35]  ; WHILE opcode					
   285                                  
   286                                  	vV_dec_sp 1				
   286                              <1> 
   286 000006C4 4983EF04            <1>  sub vV_sp , cell(%1)
   286                              <1> 
   287 000006C8 41830F00                	or DWORD[vV_sp] , 0			
   288 000006CC 0F8595FEFFFF            	jne wblock_3		
   289                                  
   290                                  
   291                                  	wblock_4:		
   292                                  
   293                                  ;------------------------------------------------------
   294                                  
   295                                  
   296                                   ;OpADR: [36]  ; Var invocation					
   297                                  
   298 000006D2 8B45F8                  mov eax , [rbp - 8]
   299                                  vV_push eax
   299                              <1> 
   299 000006D5 418907              <1>  mov DWORD[vV_sp] , %1
   299 000006D8 4983C704            <1>  add vV_sp , 4
   299                              <1> 
   300                                  
   301                                   ;OpADR: [37]  ; End of func opcode					
   302                                  
   303                                  
   304                                  ;------Cleanup Phase
   305                                  
   306                                  ;------frame restore Phase
   307 000006DC 4889EC                  	mov rsp , rbp	
   308 000006DF 5D                      	pop rbp	
   309 000006E0 C3                      	ret	
   310                                  print_bigger:		
   311 000006E1 55                      	push rbp	
   312 000006E2 4889E5                  	mov rbp , rsp	
   313                                  
   314                                  ;------Setup Phase
   315                                  
   316                                  ;------Init Phase
   317                                  
   318                                  .tailcall:		;Body Section	
   319                                  
   320                                   ;OpADR: [38]  ; Var invocation					
   321                                  
   322 000006E5 8B0425[3C010000]        mov eax , [i_global.current]
   323                                  vV_push eax
   323                              <1> 
   323 000006EC 418907              <1>  mov DWORD[vV_sp] , %1
   323 000006EF 4983C704            <1>  add vV_sp , 4
   323                              <1> 
   324                                  
   325                                   ;OpADR: [39]  ; BUFF_OUT opcode (0)			
   326                                  
   327 000006F3 E8DDFAFFFF              	call vV_io_out_buffer_default			
   328                                  						
   329                                  
   330                                   ;OpADR: [40]  ; PUSH opcode 
   331                                  
   332                                  	vV_push 540680224 
   332                              <1> 
   332 000006F8 41C70720203A20      <1>  mov DWORD[vV_sp] , %1
   332 000006FF 4983C704            <1>  add vV_sp , 4
   332                              <1> 
   333                                  
   334                                  
   335                                   ;OpADR: [41]  ; BUFF_OUT opcode (9)			
   336                                  
   337                                  
   338 00000703 E866FBFFFF              	call vV_io_out_packed_char_buffer				
   339                                  						
   340                                  
   341                                   ;OpADR: [42]  ; DUP opcode (1)			
   342                                  
   343                                  	vV_dup 1			
   343                              <1> 
   343 00000708 B901000000          <1>  mov ecx , %1
   343 0000070D 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   343 00000711 4C89FF              <1>  mov rdi , vV_sp
   343                              <1> 
   343 00000714 F3A5                <1>  rep movsd
   343                              <1> 
   343 00000716 4983C704            <1>  add vV_sp , cell(%1)
   343                              <1> 
   344                                  
   345                                  
   346                                   ;OpADR: [43]  ; BUFF_OUT opcode (0)			
   347                                  
   348 0000071A E8B6FAFFFF              	call vV_io_out_buffer_default			
   349                                  						
   350                                  
   351                                   ;OpADR: [44]  ; FLUSH opcode					
   352                                  
   353 0000071F E87EFAFFFF              		call vV_io_flush	
   354                                  
   355                                   ;OpADR: [45]  ; End of func opcode					
   356                                  
   357                                  
   358                                  ;------Cleanup Phase
   359                                  
   360                                  ;------frame restore Phase
   361 00000724 4889EC                  	mov rsp , rbp	
   362 00000727 5D                      	pop rbp	
   363 00000728 C3                      	ret	
   364                                  
   365                                  		
   366                                  
   367                                  
   368                                  
   369                                  vV_entry_point:
   370                                  
   371                                  
   372 00000729 4889E5                  	mov rbp, rsp			;Setup Stack Frame
   373                                  	
   374                                  	
   375                                   ;OpADR: [0]  ; PUSH opcode 
   376                                  
   377                                  	vV_push 1 
   377                              <1> 
   377 0000072C 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   377 00000733 4983C704            <1>  add vV_sp , 4
   377                              <1> 
   378                                  
   379                                  
   380                                   ;OpADR: [1]  ; Var assignement					
   381                                  
   382 00000737 31C0                    	xor eax , eax	
   383 00000739 BF01000000              	mov edi , 1			
   384 0000073E 81FF40420F00            	cmp edi , 1000000		
   385 00000744 0F8D43F9FFFF            	jge vV_bound_error		
   386 0000074A 01F8                    	add eax , edi			
   387 0000074C C1E002                  	shl eax , 2	
   388 0000074F 89C6                    	mov esi , eax		
   389 00000751 BF[86020000]            	mov edi , u_global.memo
   390                                  vV_pop eax
   390                              <1> 
   390 00000756 4983EF04            <1>  sub vV_sp , 4
   390 0000075A 418B07              <1>  mov %1 , [vV_sp]
   390                              <1> 
   391 0000075D 67890437                mov [edi + esi] , eax
   392                                  
   393                                   ;OpADR: [2]  ; PUSH opcode 
   394                                  
   395                                  	vV_push 2 
   395                              <1> 
   395 00000761 41C70702000000      <1>  mov DWORD[vV_sp] , %1
   395 00000768 4983C704            <1>  add vV_sp , 4
   395                              <1> 
   396                                  
   397                                  
   398                                   ;OpADR: [3]  ; Var assignement					
   399                                  
   400 0000076C 31C0                    	xor eax , eax	
   401 0000076E BF02000000              	mov edi , 2			
   402 00000773 81FF40420F00            	cmp edi , 1000000		
   403 00000779 0F8D0EF9FFFF            	jge vV_bound_error		
   404 0000077F 01F8                    	add eax , edi			
   405 00000781 C1E002                  	shl eax , 2	
   406 00000784 89C6                    	mov esi , eax		
   407 00000786 BF[86020000]            	mov edi , u_global.memo
   408                                  vV_pop eax
   408                              <1> 
   408 0000078B 4983EF04            <1>  sub vV_sp , 4
   408 0000078F 418B07              <1>  mov %1 , [vV_sp]
   408                              <1> 
   409 00000792 67890437                mov [edi + esi] , eax
   410                                  
   411                                   ;OpADR: [4]  ; Function Call					
   412                                  
   413 00000796 E8B3FDFFFF              		call collatz			
   414                                  
   415                                  
   416                                  	wblock_7:		
   417                                  
   418                                  ;------------------------------------------------------
   419                                  
   420                                  
   421                                   ;OpADR: [5]  ; Var invocation					
   422                                  
   423 0000079B 8B0425[3C010000]        mov eax , [i_global.current]
   424                                  vV_push eax
   424                              <1> 
   424 000007A2 418907              <1>  mov DWORD[vV_sp] , %1
   424 000007A5 4983C704            <1>  add vV_sp , 4
   424                              <1> 
   425                                  
   426                                   ;OpADR: [6]  ; Function Call					
   427                                  
   428 000007A9 E8A0FDFFFF              		call collatz			
   429                                  
   430                                   ;OpADR: [7]  ; DUP opcode (1)			
   431                                  
   432                                  	vV_dup 1			
   432                              <1> 
   432 000007AE B901000000          <1>  mov ecx , %1
   432 000007B3 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   432 000007B7 4C89FF              <1>  mov rdi , vV_sp
   432                              <1> 
   432 000007BA F3A5                <1>  rep movsd
   432                              <1> 
   432 000007BC 4983C704            <1>  add vV_sp , cell(%1)
   432                              <1> 
   433                                  
   434                                  
   435                                   ;OpADR: [8]  ; Var invocation					
   436                                  
   437 000007C0 8B0425[3C010000]        mov eax , [i_global.current]
   438                                  vV_push eax
   438                              <1> 
   438 000007C7 418907              <1>  mov DWORD[vV_sp] , %1
   438 000007CA 4983C704            <1>  add vV_sp , 4
   438                              <1> 
   439                                  
   440                                   ;OpADR: [9]  ; Var assignement					
   441                                  
   442 000007CE 31C0                    	xor eax , eax	
   443                                  	vV_pop edi		
   443                              <1> 
   443 000007D0 4983EF04            <1>  sub vV_sp , 4
   443 000007D4 418B3F              <1>  mov %1 , [vV_sp]
   443                              <1> 
   444 000007D7 81FF40420F00            	cmp edi , 1000000		
   445 000007DD 0F8DAAF8FFFF            	jge vV_bound_error		
   446 000007E3 01F8                    	add eax , edi			
   447 000007E5 C1E002                  	shl eax , 2	
   448 000007E8 89C6                    	mov esi , eax		
   449 000007EA BF[86020000]            	mov edi , u_global.memo
   450                                  vV_pop eax
   450                              <1> 
   450 000007EF 4983EF04            <1>  sub vV_sp , 4
   450 000007F3 418B07              <1>  mov %1 , [vV_sp]
   450                              <1> 
   451 000007F6 67890437                mov [edi + esi] , eax
   452                                  
   453                                   ;OpADR: [10]  ; DUP opcode (1)			
   454                                  
   455                                  	vV_dup 1			
   455                              <1> 
   455 000007FA B901000000          <1>  mov ecx , %1
   455 000007FF 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   455 00000803 4C89FF              <1>  mov rdi , vV_sp
   455                              <1> 
   455 00000806 F3A5                <1>  rep movsd
   455                              <1> 
   455 00000808 4983C704            <1>  add vV_sp , cell(%1)
   455                              <1> 
   456                                  
   457                                  
   458                                   ;OpADR: [11]  ; Var invocation					
   459                                  
   460 0000080C 8B0425[44010000]        mov eax , [i_global.biggest]
   461                                  vV_push eax
   461                              <1> 
   461 00000813 418907              <1>  mov DWORD[vV_sp] , %1
   461 00000816 4983C704            <1>  add vV_sp , 4
   461                              <1> 
   462                                  
   463                                   ;OpADR: [12]  ; MORE opcode					
   464                                  
   465 0000081A 418B47FC                	mov eax , vV_top			
   466 0000081E 413947F8                	cmp DWORD vV_2nd , eax			
   467                                  
   468 00000822 76(0B)                  	jbe short 0xb				
   469                                  
   470 00000824 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   471                                  
   472 0000082C EB(09)                  	jmp short 0x9				
   473                                  
   474 0000082E 41C747F800000000        			mov DWORD vV_2nd , 0	
   475                                  
   476                                  	vV_dec_sp 1				
   476                              <1> 
   476 00000836 4983EF04            <1>  sub vV_sp , cell(%1)
   476                              <1> 
   477                                  
   478                                   ;OpADR: [13]  ; IF opcode					
   479                                  
   480                                  	vV_dec_sp 1			
   480                              <1> 
   480 0000083A 4983EF04            <1>  sub vV_sp , cell(%1)
   480                              <1> 
   481 0000083E 41830F00                	or DWORD[vV_sp] , 0			
   482 00000842 742C                    	je wblock_6	
   483                                  
   484                                   ;OpADR: [14]  ; Var assignement					
   485                                  
   486                                  vV_pop eax
   486                              <1> 
   486 00000844 4983EF04            <1>  sub vV_sp , 4
   486 00000848 418B07              <1>  mov %1 , [vV_sp]
   486                              <1> 
   487 0000084B 890425[44010000]        mov [i_global.biggest] , eax
   488                                  
   489                                   ;OpADR: [15]  ; Var invocation					
   490                                  
   491 00000852 8B0425[3C010000]        mov eax , [i_global.current]
   492                                  vV_push eax
   492                              <1> 
   492 00000859 418907              <1>  mov DWORD[vV_sp] , %1
   492 0000085C 4983C704            <1>  add vV_sp , 4
   492                              <1> 
   493                                  
   494                                   ;OpADR: [16]  ; Var assignement					
   495                                  
   496                                  vV_pop eax
   496                              <1> 
   496 00000860 4983EF04            <1>  sub vV_sp , 4
   496 00000864 418B07              <1>  mov %1 , [vV_sp]
   496                              <1> 
   497 00000867 890425[860B3D00]        mov [u_global.biggest_source] , eax
   498                                  
   499                                   ;OpADR: [17]  ; ELIF opcode					
   500                                  
   501 0000086E EB04                    	jmp wblock_5	
   502                                  
   503                                  
   504                                  	wblock_6:		
   505                                  
   506                                  ;------------------------------------------------------
   507                                  
   508                                  
   509                                   ;OpADR: [18]  ; DROP opcode 
   510                                  
   511 00000870 4983EF04                	sub vV_sp , 4	
   512                                  
   513                                  
   514                                  	wblock_5:		
   515                                  
   516                                  ;------------------------------------------------------
   517                                  
   518                                  
   519                                   ;OpADR: [19]  ; Var invocation					
   520                                  
   521 00000874 8B0425[3C010000]        mov eax , [i_global.current]
   522                                  vV_push eax
   522                              <1> 
   522 0000087B 418907              <1>  mov DWORD[vV_sp] , %1
   522 0000087E 4983C704            <1>  add vV_sp , 4
   522                              <1> 
   523                                  
   524                                   ;OpADR: [20]  ; PUSH opcode 
   525                                  
   526                                  	vV_push 1 
   526                              <1> 
   526 00000882 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   526 00000889 4983C704            <1>  add vV_sp , 4
   526                              <1> 
   527                                  
   528                                  
   529                                   ;OpADR: [21]  ; ADD opcode 					
   530                                  
   531 0000088D 418B47F8                	mov eax , vV_2nd			
   532 00000891 410347FC                	add eax , vV_top			
   533 00000895 418947F8                	mov vV_2nd , eax			
   534                                  
   535                                  	vV_dec_sp 1		
   535                              <1> 
   535 00000899 4983EF04            <1>  sub vV_sp , cell(%1)
   535                              <1> 
   536                                  
   537                                   ;OpADR: [22]  ; Var assignement					
   538                                  
   539                                  vV_pop eax
   539                              <1> 
   539 0000089D 4983EF04            <1>  sub vV_sp , 4
   539 000008A1 418B07              <1>  mov %1 , [vV_sp]
   539                              <1> 
   540 000008A4 890425[3C010000]        mov [i_global.current] , eax
   541                                  
   542                                   ;OpADR: [23]  ; Var invocation					
   543                                  
   544 000008AB 8B0425[34010000]        mov eax , [i_global.memoed]
   545                                  vV_push eax
   545                              <1> 
   545 000008B2 418907              <1>  mov DWORD[vV_sp] , %1
   545 000008B5 4983C704            <1>  add vV_sp , 4
   545                              <1> 
   546                                  
   547                                   ;OpADR: [24]  ; PUSH opcode 
   548                                  
   549                                  	vV_push 1 
   549                              <1> 
   549 000008B9 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   549 000008C0 4983C704            <1>  add vV_sp , 4
   549                              <1> 
   550                                  
   551                                  
   552                                   ;OpADR: [25]  ; ADD opcode 					
   553                                  
   554 000008C4 418B47F8                	mov eax , vV_2nd			
   555 000008C8 410347FC                	add eax , vV_top			
   556 000008CC 418947F8                	mov vV_2nd , eax			
   557                                  
   558                                  	vV_dec_sp 1		
   558                              <1> 
   558 000008D0 4983EF04            <1>  sub vV_sp , cell(%1)
   558                              <1> 
   559                                  
   560                                   ;OpADR: [26]  ; Var assignement					
   561                                  
   562                                  vV_pop eax
   562                              <1> 
   562 000008D4 4983EF04            <1>  sub vV_sp , 4
   562 000008D8 418B07              <1>  mov %1 , [vV_sp]
   562                              <1> 
   563 000008DB 890425[34010000]        mov [i_global.memoed] , eax
   564                                  
   565                                   ;OpADR: [27]  ; Var invocation					
   566                                  
   567 000008E2 8B0425[3C010000]        mov eax , [i_global.current]
   568                                  vV_push eax
   568                              <1> 
   568 000008E9 418907              <1>  mov DWORD[vV_sp] , %1
   568 000008EC 4983C704            <1>  add vV_sp , 4
   568                              <1> 
   569                                  
   570                                   ;OpADR: [28]  ; Var invocation					
   571                                  
   572 000008F0 8B0425[2C010000]        mov eax , [i_global.max]
   573                                  vV_push eax
   573                              <1> 
   573 000008F7 418907              <1>  mov DWORD[vV_sp] , %1
   573 000008FA 4983C704            <1>  add vV_sp , 4
   573                              <1> 
   574                                  
   575                                   ;OpADR: [29]  ; LESS opcode					
   576                                  
   577 000008FE 418B47FC                	mov eax , vV_top			
   578 00000902 413947F8                	cmp DWORD vV_2nd , eax			
   579                                  
   580 00000906 73(0B)                  	jae short 0xb				
   581                                  
   582 00000908 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   583                                  
   584 00000910 EB(09)                  	jmp short 0x9				
   585                                  
   586 00000912 41C747F800000000        			mov DWORD vV_2nd , 0	
   587                                  
   588                                  	vV_dec_sp 1				
   588                              <1> 
   588 0000091A 4983EF04            <1>  sub vV_sp , cell(%1)
   588                              <1> 
   589                                  
   590                                   ;OpADR: [30]  ; WHILE opcode					
   591                                  
   592                                  	vV_dec_sp 1				
   592                              <1> 
   592 0000091E 4983EF04            <1>  sub vV_sp , cell(%1)
   592                              <1> 
   593 00000922 41830F00                	or DWORD[vV_sp] , 0			
   594 00000926 0F856FFEFFFF            	jne wblock_7		
   595                                  
   596                                   ;OpADR: [31]  ; PUSH opcode 
   597                                  
   598                                  	vV_push 538982944 
   598                              <1> 
   598 0000092C 41C707203A2020      <1>  mov DWORD[vV_sp] , %1
   598 00000933 4983C704            <1>  add vV_sp , 4
   598                              <1> 
   599                                  
   600                                  
   601                                   ;OpADR: [32]  ; Var invocation					
   602                                  
   603 00000937 8B0425[2C010000]        mov eax , [i_global.max]
   604                                  vV_push eax
   604                              <1> 
   604 0000093E 418907              <1>  mov DWORD[vV_sp] , %1
   604 00000941 4983C704            <1>  add vV_sp , 4
   604                              <1> 
   605                                  
   606                                   ;OpADR: [33]  ; PUSH opcode 
   607                                  
   608                                  	vV_push 538998639 
   608                              <1> 
   608 00000945 41C7076F772020      <1>  mov DWORD[vV_sp] , %1
   608 0000094C 4983C704            <1>  add vV_sp , 4
   608                              <1> 
   609                                  
   610                                  
   611                                   ;OpADR: [34]  ; PUSH opcode 
   612                                  
   613                                  	vV_push 1818583584 
   613                              <1> 
   613 00000950 41C7072062656C      <1>  mov DWORD[vV_sp] , %1
   613 00000957 4983C704            <1>  add vV_sp , 4
   613                              <1> 
   614                                  
   615                                  
   616                                   ;OpADR: [35]  ; PUSH opcode 
   617                                  
   618                                  	vV_push 2054447468 
   618                              <1> 
   618 0000095B 41C7076C61747A      <1>  mov DWORD[vV_sp] , %1
   618 00000962 4983C704            <1>  add vV_sp , 4
   618                              <1> 
   619                                  
   620                                  
   621                                   ;OpADR: [36]  ; PUSH opcode 
   622                                  
   623                                  	vV_push 1819231008 
   623                              <1> 
   623 00000966 41C70720436F6C      <1>  mov DWORD[vV_sp] , %1
   623 0000096D 4983C704            <1>  add vV_sp , 4
   623                              <1> 
   624                                  
   625                                  
   626                                   ;OpADR: [37]  ; PUSH opcode 
   627                                  
   628                                  	vV_push 1953719655 
   628                              <1> 
   628 00000971 41C70767657374      <1>  mov DWORD[vV_sp] , %1
   628 00000978 4983C704            <1>  add vV_sp , 4
   628                              <1> 
   629                                  
   630                                  
   631                                   ;OpADR: [38]  ; PUSH opcode 
   632                                  
   633                                  	vV_push 1734951456 
   633                              <1> 
   633 0000097C 41C70720426967      <1>  mov DWORD[vV_sp] , %1
   633 00000983 4983C704            <1>  add vV_sp , 4
   633                              <1> 
   634                                  
   635                                  
   636                                   ;OpADR: [39]  ; BUFF_OUT opcode (9)			
   637                                  
   638                                  
   639 00000987 E8E2F8FFFF              	call vV_io_out_packed_char_buffer				
   640                                  						
   641                                  
   642                                   ;OpADR: [40]  ; BUFF_OUT opcode (9)			
   643                                  
   644                                  
   645 0000098C E8DDF8FFFF              	call vV_io_out_packed_char_buffer				
   646                                  						
   647                                  
   648                                   ;OpADR: [41]  ; BUFF_OUT opcode (9)			
   649                                  
   650                                  
   651 00000991 E8D8F8FFFF              	call vV_io_out_packed_char_buffer				
   652                                  						
   653                                  
   654                                   ;OpADR: [42]  ; BUFF_OUT opcode (9)			
   655                                  
   656                                  
   657 00000996 E8D3F8FFFF              	call vV_io_out_packed_char_buffer				
   658                                  						
   659                                  
   660                                   ;OpADR: [43]  ; BUFF_OUT opcode (9)			
   661                                  
   662                                  
   663 0000099B E8CEF8FFFF              	call vV_io_out_packed_char_buffer				
   664                                  						
   665                                  
   666                                   ;OpADR: [44]  ; BUFF_OUT opcode (9)			
   667                                  
   668                                  
   669 000009A0 E8C9F8FFFF              	call vV_io_out_packed_char_buffer				
   670                                  						
   671                                  
   672                                   ;OpADR: [45]  ; BUFF_OUT opcode (0)			
   673                                  
   674 000009A5 E82BF8FFFF              	call vV_io_out_buffer_default			
   675                                  						
   676                                  
   677                                   ;OpADR: [46]  ; BUFF_OUT opcode (9)			
   678                                  
   679                                  
   680 000009AA E8BFF8FFFF              	call vV_io_out_packed_char_buffer				
   681                                  						
   682                                  
   683                                   ;OpADR: [47]  ; Var invocation					
   684                                  
   685 000009AF 8B0425[860B3D00]        mov eax , [u_global.biggest_source]
   686                                  vV_push eax
   686                              <1> 
   686 000009B6 418907              <1>  mov DWORD[vV_sp] , %1
   686 000009B9 4983C704            <1>  add vV_sp , 4
   686                              <1> 
   687                                  
   688                                   ;OpADR: [48]  ; BUFF_OUT opcode (0)			
   689                                  
   690 000009BD E813F8FFFF              	call vV_io_out_buffer_default			
   691                                  						
   692                                  
   693                                   ;OpADR: [49]  ; Var invocation					
   694                                  
   695 000009C2 8B0425[44010000]        mov eax , [i_global.biggest]
   696                                  vV_push eax
   696                              <1> 
   696 000009C9 418907              <1>  mov DWORD[vV_sp] , %1
   696 000009CC 4983C704            <1>  add vV_sp , 4
   696                              <1> 
   697                                  
   698                                   ;OpADR: [50]  ; PUSH opcode 
   699                                  
   700                                  	vV_push 538994804 
   700                              <1> 
   700 000009D0 41C70774682020      <1>  mov DWORD[vV_sp] , %1
   700 000009D7 4983C704            <1>  add vV_sp , 4
   700                              <1> 
   701                                  
   702                                  
   703                                   ;OpADR: [51]  ; PUSH opcode 
   704                                  
   705                                  	vV_push 1769414688 
   705                              <1> 
   705 000009DB 41C70720207769      <1>  mov DWORD[vV_sp] , %1
   705 000009E2 4983C704            <1>  add vV_sp , 4
   705                              <1> 
   706                                  
   707                                  
   708                                   ;OpADR: [52]  ; BUFF_OUT opcode (9)			
   709                                  
   710                                  
   711 000009E6 E883F8FFFF              	call vV_io_out_packed_char_buffer				
   712                                  						
   713                                  
   714                                   ;OpADR: [53]  ; BUFF_OUT opcode (9)			
   715                                  
   716                                  
   717 000009EB E87EF8FFFF              	call vV_io_out_packed_char_buffer				
   718                                  						
   719                                  
   720                                   ;OpADR: [54]  ; BUFF_OUT opcode (0)			
   721                                  
   722 000009F0 E8E0F7FFFF              	call vV_io_out_buffer_default			
   723                                  						
   724                                  
   725                                   ;OpADR: [55]  ; FLUSH opcode					
   726                                  
   727 000009F5 E8A8F7FFFF              		call vV_io_flush	
   728                                  
   729                                   ;OpADR: [56]  ; PUSH opcode 
   730                                  
   731                                  	vV_push 543521122 
   731                              <1> 
   731 000009FA 41C70762796520      <1>  mov DWORD[vV_sp] , %1
   731 00000A01 4983C704            <1>  add vV_sp , 4
   731                              <1> 
   732                                  
   733                                  
   734                                   ;OpADR: [57]  ; OUT opcode (9)			
   735                                  
   736                                  								
   737 00000A05 E84EF8FFFF              	call vV_io_out_packed_char				
   738                                  						
   739                                  		
   740 00000A0A C3                      		ret
   741                                  
   742                                  ;Transpiled from vV with vVc version 0.0.4
   743                                  		
   744                                  		
