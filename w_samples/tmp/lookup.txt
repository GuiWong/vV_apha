     1                                  %include "vVc/assembly/w_runtime/vV_defines.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> ;------------------Variables From Project-------------
     5                              <1> 
     6                              <1> 	;------------------Should come from io module(need refactoring)
     7                              <1> 
     8                              <1> 
     9                              <1> 	%define vV_input_buffer_size 255
    10                              <1> 	%define vV_output_buffer_size 255
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;------------------Implementation Relative-------------
    15                              <1> 
    16                              <1> %deftok vV_sp 'r15'
    17                              <1> 
    18                              <1> %deftok vV_spS 'r14'
    19                              <1> 
    20                              <1> %deftok vV_sdir '-'
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24                              <1> 
    25                              <1> ;------------------Stack Shortcuts--------------------
    26                              <1> 
    27                              <1> %define cell(a) (a*4)
    28                              <1> 
    29                              <1> 
    30                              <1> %define vV_top [vV_sp vV_sdir %+ cell(1)]
    31                              <1> %define vV_2nd [vV_sp vV_sdir %+ cell(2)]
    32                              <1> 
    33                              <1> %define vV_stack_v(a) ([vV_sp vV_sdir %+ cell(a)])
    34                              <1> 
    35                              <1> 
    36                              <1> ;-------------------Out_Format Pointer------------------
    37                              <1> 
    38                              <1> %deftok vV_FORMAT_BIN "vV_ascii_int_to_bin"
    39                              <1> %deftok vV_FORMAT_DEC "vV_ascii_int_to_dec"
    40                              <1> %deftok vV_FORMAT_HEX "vV_ascii_int_to_hex"
    41                              <1> 
    42                              <1> 
    43                              <1> 
    44                              <1> ;--------------------Op Macros--------------------------
    45                              <1> 
    46                              <1> %macro vV_push 1
    47                              <1> 
    48                              <1> 	mov DWORD[vV_sp] , %1
    49                              <1> 	add vV_sp , 4
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro vV_pop 1
    54                              <1> 
    55                              <1> 	sub vV_sp , 4
    56                              <1> 	mov %1 , [vV_sp]
    57                              <1> 	
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro vV_swap 0
    61                              <1> 
    62                              <1> 	mov edx , [vV_sp-4]
    63                              <1> 	mov eax , [vV_sp-8]
    64                              <1> 	mov [vV_sp-8] , edx 
    65                              <1> 	mov [vV_sp-4] , eax 
    66                              <1> 	
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro vV_dup 1
    70                              <1> 
    71                              <1> 	mov ecx , %1
    72                              <1> 	lea rsi , [vV_sp-cell(%1)]
    73                              <1> 	mov rdi , vV_sp
    74                              <1> 		
    75                              <1> 	rep movsd
    76                              <1> 	
    77                              <1> 	add vV_sp , cell(%1)
    78                              <1> 	
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> 
    82                              <1> %macro vV_dec_sp 1
    83                              <1> 
    84                              <1> 	sub vV_sp , cell(%1)
    85                              <1> 	
    86                              <1> %endmacro
    87                              <1> 	
     2                                  %include "vVc/assembly/w_runtime/vV_error_code.asm"		
     1                              <1> 
     2                              <1> %define vV_ERR_IO_I_OVERFLOW 1
     3                              <1> %define vV_ERR_IO_O_OVERFLOW 2
     4                              <1> %define vV_ERR_IO_I_UNVALID 3
     5                              <1> %define vV_ERR_IO_O_UNVALID 4
     6                              <1> %define vV_ERR_IO_I_VALUE_OVERFLOW 5
     7                              <1> 
     8                              <1> 
     9                              <1> %define vV_ERR_VALUE_OVERFLOW 8
    10                              <1> 
    11                              <1> 
    12                              <1> %define vV_ERR_MEMORY_BUFFER_LIMIT 16
    13                              <1> %define vV_ERR_MEMORY_OUT_OF_BOUND 17
    14                              <1> 
    15                              <1> 
    16                              <1> 
    17                              <1> %define vV_ERR_USER_UNDEFINED 31
     3                                  %include "vVc/assembly/w_runtime/vV_runtime.asm"		
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> 
     4                              <1> ;%include "vVc/assembly/w_runtime/vV_errors.asm"
     5                              <1> ;%include "vVc/assembly/w_runtime/vV_system00.asm"
     6                              <1> ;%include "vVc/assembly/w_runtime/vV_system10.asm"
     7                              <1> ;%include "vVc/assembly/w_runtime/vV_system90.asm"
     8                              <1> 
     9                              <1> 
    10                              <1> global _start
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;extern vV_entry_point			;Defined by main program
    15                              <1> 
    16                              <1> 
    17                              <1> 
    18                              <1> 	
    19                              <1> segment .data 
    20                              <1> 
    21                              <1> 
    22                              <1> 	
    23                              <1> 
    24                              <1> segment .text 
    25                              <1> 
    26                              <1> 
    27                              <1> 	vV_forced_exit:				;rax hold exit code
    28                              <1> 							;Removed default error printing
    29                              <1> 							;This will now happens in errors module
    30                              <1> 
    31 00000000 4889C7              <1> 		mov rdi, rax
    32 00000003 B83C000000          <1> 		mov rax, SYS_EXIT
    33 00000008 0F05                <1> 		syscall
    34                              <1> 		
    35                              <1> 		
    36                              <1> 
    37                              <1> 
    38                              <1> 	save_regs:			;In case called from other process
    39                              <1> 	
    40 0000000A 58                  <1> 		pop rax
    41                              <1> 	
    42 0000000B 53                  <1> 		push rbx
    43 0000000C 4154                <1> 		push r12
    44 0000000E 4155                <1> 		push r13
    45 00000010 4156                <1> 		push r14
    46 00000012 4157                <1> 		push r15
    47                              <1> 		
    48 00000014 50                  <1> 		push rax
    49                              <1> 		
    50 00000015 C3                  <1> 		ret
    51                              <1> 		
    52                              <1> 	restore_regs:
    53                              <1> 	
    54 00000016 58                  <1> 		pop rax
    55                              <1> 	
    56 00000017 415F                <1> 		pop r15
    57 00000019 415E                <1> 		pop r14
    58 0000001B 415D                <1> 		pop r13
    59 0000001D 415C                <1> 		pop r12
    60 0000001F 5B                  <1> 		pop rbx
    61                              <1> 		
    62 00000020 50                  <1> 		push rax
    63                              <1> 		
    64 00000021 C3                  <1> 		ret
    65                              <1> 		
    66                              <1> 	setup_memory:
    67                              <1> 	
    68 00000022 C70425[90000000]00- <1> 		mov DWORD [vV_input_buffer_content] , 0
    68 0000002A 000000              <1>
    69 0000002D C70425[93010000]00- <1> 		mov DWORD [vV_output_buffer_content] , 0
    69 00000035 000000              <1>
    70                              <1> 		
    71                              <1> 		;mov DWORD [endofline] , 0xa
    72                              <1> 		
    73 00000038 C70425[28010000]-   <1> 		mov DWORD[vV_sys_format_mode] , vV_ascii_int_to_dec
    73 0000003F [0A050000]          <1>
    74                              <1> 		
    75                              <1> 		
    76 00000043 B9FFFFFF3F          <1> 		mov ecx , 1073741823
    77 00000048 48290C25[40000000]  <1> 		sub QWORD[vV_local_offset] , rcx
    78                              <1> 		
    79                              <1> 		
    80 00000050 C3                  <1> 		ret
    81                              <1> 		
    82                              <1> 		
    83                              <1> 	
    84                              <1> 		
    85                              <1> _start:				;Entry point of Every Program
    86                              <1> 	
    87                              <1> 		
    88                              <1> 
    89 00000051 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
    90                              <1> 	
    91 00000054 48892C25[40000000]  <1> 	mov QWORD[vV_local_offset] , rbp
    92 0000005C 48892C25[48000000]  <1> 	mov QWORD[vV_initial_frame] , rbp
    93                              <1> 	
    94 00000064 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
    94 00000066 [9602040000000000]  <1>
    95                              <1> 	
    96 0000006E E897FFFFFF          <1> 	call save_regs				;just in case
    97                              <1> 	
    98                              <1> 	
    99 00000073 E8AAFFFFFF          <1> 	call setup_memory			;all memory setup at start
   100                              <1> 	
   101                              <1> 	
   102                              <1> 	
   103 00000078 E8FA040000          <1> 	call vV_entry_point			;Start the program 
   104                              <1> vV_initial_return:
   105                              <1> 	
   106 0000007D E894FFFFFF          <1> 	call restore_regs
   107                              <1> 	
   108                              <1> 
   109                              <1> ;------------------------------------------------------------------------------
   110                              <1> 
   111 00000082 B83C000000          <1> 	mov rax, SYS_EXIT
   112 00000087 BF00000000          <1> 	mov rdi, 0		;Normal exit procedure (no code returned from main)
   113 0000008C 0F05                <1> 	syscall
   114                              <1> 	
   115                              <1> 	
   116                              <1> 	
   117                              <1> 	
   118                              <1> 	
     4                                  %include "vVc/assembly/w_runtime/vV_system00.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5 00000000 <res 00000040>      <1> 	vV_sys_start:	resd 16		;not used now
     6 00000040 <res 00000008>      <1> 	vV_local_offset: resq 1
     7 00000048 <res 00000008>      <1> 	vV_initial_frame: resq 1
     8                              <1> 	
     9                              <1> 	
    10                              <1> segment .data
    11                              <1> 
    12                              <1> 
    13                              <1> ;--Start of Memory----------------------------------------------------------
    14                              <1> 
    15                              <1> 	ALIGN 8
    16                              <1> 	
    17                              <1> ;--System adresses offsets----------------
    18                              <1> 
    19                              <1> 	
    20                              <1> 	
    21                              <1> 	
    22                              <1> ;---------------------Error Managment----------
    23                              <1> 
    24                              <1> 
    25                              <1> ;error vectors	
    26                              <1> 	
    27                              <1> 	vV_error_vectors:
    28 00000000 [3C01000000000000]- <1> 	times 17 dq vV_error_unhandeled
    28 00000000 <rept>              <1>
    29 00000088 [C600000000000000]  <1> 	dq vV_error_invalid_index
    30 00000090 [3C01000000000000]- <1> 	times 13 dq vV_error_unhandeled
    30 00000090 <rept>              <1>
    31 000000F8 [BA00000000000000]  <1> 	dq vV_user_error
    32                              <1> 
    33                              <1> 	
    34                              <1> 	
    35                              <1> segment .text
    36                              <1> 
    37                              <1> 
    38                              <1> vV_error:
    39                              <1> 
    40 0000008E 52                  <1> 	push rdx
    41                              <1> 	
    42 0000008F 4831D2              <1> 	xor rdx , rdx
    43                              <1> 	
    44 00000092 88E2                <1> 	mov dl , ah
    45                              <1> 	
    46 00000094 C0E203              <1> 	shl dl , 3
    47                              <1> 	
    48 00000097 67FF92[00000000]    <1> 	call [vV_error_vectors + edx]
    49                              <1> 	
    50                              <1> 	
    51 0000009E 5A                  <1> 	pop rdx
    52                              <1> 	
    53 0000009F C3                  <1> 	ret
    54                              <1> 	
    55                              <1> 	
    56                              <1> vV_error_fatal:
    57                              <1> 
    58                              <1> 	
    59 000000A0 88D0                <1> 	mov al , dl
    60                              <1> 	
    61 000000A2 C0E803              <1> 	shr al , 3
    62                              <1> 
    63 000000A5 E856FFFFFF          <1> 	call vV_forced_exit
    64                              <1> 	
    65                              <1> vV_bound_error:
    66                              <1> 
    67 000000AA 89CB                <1> 	mov ebx , ecx
    68 000000AC B411                <1> 	mov ah , vV_ERR_MEMORY_OUT_OF_BOUND
    69 000000AE E8DBFFFFFF          <1> 	call vV_error	
    70                              <1> 	
    71 000000B3 B011                <1> 	mov al , vV_ERR_MEMORY_OUT_OF_BOUND
    72 000000B5 E846FFFFFF          <1> 	call vV_forced_exit
    73                              <1> 	
    74                              <1> vV_user_error:
    75                              <1> 	
    76 000000BA E87D000000          <1> 	call vV_error_unhandeled
    77                              <1> 	
    78 000000BF B01F                <1> 	mov al , vV_ERR_USER_UNDEFINED
    79 000000C1 E83AFFFFFF          <1> 	call vV_forced_exit
    80                              <1> 	
    81                              <1> 	
    82                              <1> 	
    83                              <1> 	
    84                              <1> 	
    85                              <1> 
    86                              <1> 	
     5                                  %include "vVc/assembly/w_runtime/vV_errors.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> segment .bss
     5                              <1> 
     6                              <1> 
     7                              <1> 	ALIGNB 4
     8                              <1> 		
     9                              <1> 	vV_error_buffer:
    10 00000050 <res 00000040>      <1> 	resb 64
    11                              <1> 	vV_end_err_buff:
    12                              <1> 	vV_error_buffer_size equ vV_end_err_buff-vV_error_buffer
    13                              <1> 
    14                              <1> 
    15                              <1> 
    16                              <1> 
    17                              <1> segment .data
    18                              <1> 
    19                              <1> ;Error String	
    20                              <1> 
    21                              <1> 	
    22                              <1> 	vV_error_msg:
    23 00000100 556E68616E64656C65- <1> 	.default: db "Unhandeled Error "
    23 00000109 64204572726F7220    <1>
    24                              <1> 	default_size equ $-.default
    25 00000111 496E76616C69642049- <1> 	.invalid_index: db "Invalid Index Error : "
    25 0000011A 6E646578204572726F- <1>
    25 00000123 72203A20            <1>
    26                              <1> 	inv_indx_size equ $-.invalid_index
    27                              <1> 
    28                              <1> 
    29                              <1> 
    30                              <1> segment .text
    31                              <1> 
    32                              <1> 
    33                              <1> vV_error_invalid_index:
    34                              <1> 
    35                              <1> 
    36 000000C6 56                  <1> 	push rsi
    37 000000C7 57                  <1> 	push rdi	;Save reg used by syscall
    38 000000C8 4151                <1> 	push r9	;and by conversion func
    39 000000CA 53                  <1> 	push rbx	;Save Arg
    40                              <1> 	
    41 000000CB BA16000000          <1> 	mov edx , inv_indx_size				;string lenght
    42 000000D0 48BE-               <1> 	mov rsi , vV_error_msg.invalid_index			;strng ptr
    42 000000D2 [1101000000000000]  <1>
    43 000000DA BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    44 000000DF B801000000          <1> 	mov rax , 1				; Write sysCall
    45 000000E4 0F05                <1> 	syscall	
    46                              <1> 	
    47                              <1> 	
    48 000000E6 58                  <1> 	pop rax
    49                              <1> 	
    50 000000E7 BF[50000000]        <1> 	mov edi , vV_error_buffer
    51 000000EC 41B940000000        <1> 	mov r9d , vV_error_buffer_size
    52 000000F2 E813040000          <1> 	call vV_ascii_int_to_dec	
    53                              <1> 
    54 000000F7 67C680[50000000]0A  <1> 	mov BYTE[vV_error_buffer + eax] , 0xa
    55                              <1> 	
    56 000000FF FFC0                <1> 	inc eax
    57                              <1> 	
    58 00000101 89C2                <1> 	mov edx , eax				;string lenght
    59 00000103 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
    59 00000105 [5000000000000000]  <1>
    60 0000010D BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    61 00000112 B801000000          <1> 	mov rax , 1				; Write sysCall
    62 00000117 0F05                <1> 	syscall
    63                              <1> 	
    64 00000119 4159                <1> 	pop r9
    65 0000011B 5F                  <1> 	pop rdi
    66 0000011C 5E                  <1> 	pop rsi
    67                              <1> 	
    68                              <1> 	
    69 0000011D 4889F8              <1> 	mov rax , rdi 
    70                              <1> 	vV_push eax
    70                              <2> 
    70 00000120 418907              <2>  mov DWORD[vV_sp] , %1
    70 00000123 4983C704            <2>  add vV_sp , 4
    70                              <2> 
    71 00000127 E82A010000          <1> 	call vV_io_out_default
    72 0000012C E8E4000000          <1> 	call vV_io_flush
    73                              <1> 	
    74 00000131 E885000000          <1> 	call vV_climb_call_stack
    75 00000136 E865FFFFFF          <1> 	call vV_error_fatal
    76                              <1> 	
    77 0000013B C3                  <1> 	ret
    78                              <1> 	
    79                              <1> 	
    80                              <1> 	
    81                              <1> 
    82                              <1> 	
    83                              <1> vV_error_unhandeled:
    84                              <1> 
    85                              <1> 
    86 0000013C 56                  <1> 	push rsi
    87 0000013D 57                  <1> 	push rdi	;Save reg used by syscall
    88 0000013E 4151                <1> 	push r9	;and by conversion func
    89                              <1> 	
    90                              <1> 	
    91                              <1> ;push rax	;Save flags ( and value)
    92                              <1> 
    93 00000140 53                  <1> 	push rbx	;Save Arg
    94 00000141 52                  <1> push rdx		;Save error code
    95                              <1> 	
    96                              <1> 	
    97 00000142 BA11000000          <1> 	mov edx , default_size				;string lenght
    98 00000147 48BE-               <1> 	mov rsi , vV_error_msg.default			;strng ptr
    98 00000149 [0001000000000000]  <1>
    99 00000151 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
   100 00000156 B801000000          <1> 	mov rax , 1				; Write sysCall
   101 0000015B 0F05                <1> 	syscall	
   102                              <1> 	
   103                              <1> 	
   104 0000015D 58                  <1> pop rax	;error code
   105                              <1> 
   106                              <1> 
   107 0000015E C0E803              <1> 	shr al , 3
   108                              <1> 	
   109                              <1> 	
   110 00000161 BF[50000000]        <1> 	mov edi , vV_error_buffer
   111 00000166 41B940000000        <1> 	mov r9d , vV_error_buffer_size
   112                              <1> 	
   113                              <1> 
   114 0000016C E899030000          <1> 	call vV_ascii_int_to_dec	
   115                              <1> 	
   116                              <1> 		
   117                              <1> 	
   118 00000171 67C680[50000000]20  <1> 	mov BYTE[vV_error_buffer + eax] , ' '
   119                              <1> 	
   120                              <1> 	
   121                              <1> 	
   122                              <1> 	
   123 00000179 67488DB8[51000000]  <1> 	lea rdi , [vV_error_buffer + eax + 1]
   124 00000181 4129F9              <1> 	sub r9d , edi
   125                              <1> 	
   126 00000184 58                  <1> 	pop rax
   127                              <1> 	
   128 00000185 E880030000          <1> 	call vV_ascii_int_to_dec
   129                              <1> 	
   130 0000018A 674C8D0C07          <1> 	lea r9 , [edi + eax]
   131                              <1> 	
   132 0000018F 41C6010A            <1> 	mov BYTE[r9] , 0xa
   133                              <1> 	
   134 00000193 49FFC1              <1> 	inc r9
   135                              <1> 	
   136 00000196 4981E9[50000000]    <1> 	sub r9 , vV_error_buffer
   137                              <1> 	
   138 0000019D 4489CA              <1> 	mov edx , r9d				;string lenght
   139 000001A0 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
   139 000001A2 [5000000000000000]  <1>
   140 000001AA BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
   141 000001AF B801000000          <1> 	mov rax , 1				; Write sysCall
   142 000001B4 0F05                <1> 	syscall
   143                              <1> 	
   144 000001B6 4159                <1> 	pop r9
   145 000001B8 5F                  <1> 	pop rdi
   146 000001B9 5E                  <1> 	pop rsi
   147                              <1> 	
   148                              <1> 	
   149                              <1> 	
   150                              <1> 	
   151 000001BA C3                  <1> 	ret
   152                              <1> 	
   153                              <1> 	
   154                              <1> 	
   155                              <1> vV_climb_call_stack:
   156                              <1> 
   157 000001BB 4889E9              <1> 	mov rcx , rbp
   158                              <1> 	
   159 000001BE 51                  <1> 	push rcx
   160                              <1> 	
   161                              <1> 	
   162                              <1> 	..@loop_call:
   163                              <1> 	
   164                              <1> 	;xor rax , rax
   165 000001BF 488B4108            <1> 	mov rax , [rcx+8]
   166                              <1> 	
   167 000001C3 483D[7D000000]      <1> 	cmp rax , vV_initial_return
   168                              <1> 	
   169 000001C9 7413                <1> 	je ..@exit
   170                              <1> 	
   171                              <1> 	vV_push eax	
   171                              <2> 
   171 000001CB 418907              <2>  mov DWORD[vV_sp] , %1
   171 000001CE 4983C704            <2>  add vV_sp , 4
   171                              <2> 
   172 000001D2 E87F000000          <1> 	call vV_io_out_default
   173                              <1> 	
   174 000001D7 59                  <1> 	pop rcx 
   175 000001D8 488B09              <1> 	mov rcx , [rcx]
   176 000001DB 51                  <1> 	push rcx
   177                              <1> 	
   178 000001DC EBE1                <1> 	jmp ..@loop_call
   179                              <1> 	..@exit:
   180                              <1> 	
   181                              <1> 	vV_push eax	
   181                              <2> 
   181 000001DE 418907              <2>  mov DWORD[vV_sp] , %1
   181 000001E1 4983C704            <2>  add vV_sp , 4
   181                              <2> 
   182 000001E5 E86C000000          <1> 	call vV_io_out_default
   183                              <1> 	
   184 000001EA 59                  <1> 	pop rcx 
   185                              <1> 	
   186 000001EB C3                  <1> 	ret
   187                              <1> 	
   188                              <1> 	
   189                              <1> 	
   190                              <1> 		
   191                              <1> 		
   192                              <1> 		
   193                              <1> 		
   194                              <1> 		
   195                              <1> 		
   196                              <1> 		
   197                              <1> 		
   198                              <1> 		
   199                              <1> 		
   200                              <1> 		
   201                              <1> 		
   202                              <1> 		
   203                              <1> 		
   204                              <1> 		
   205                              <1> 		
   206                              <1> 		
   207                              <1> 		
   208                              <1> 		
   209                              <1> 
     6                                  %include "vVc/assembly/w_runtime/vV_system10.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5                              <1> 	
     6                              <1> 	
     7                              <1> 	;------------Input Buffer
     8                              <1> 
     9                              <1> 
    10                              <1> 	
    11 00000090 <res 00000004>      <1> 	vV_input_buffer_content: resb 4			;Input Buffer current content
    12 00000094 <res 000000FF>      <1> 	vV_input_buffer: resb vV_input_buffer_size		;Input Buffer of 256 char
    13                              <1> 	
    14                              <1> 	
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;------------Output Buffer
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22 00000193 <res 00000004>      <1> 	vV_output_buffer_content: resb 4			;Output Buffer current content
    23 00000197 <res 000000FF>      <1> 	vV_output_buffer: resb vV_output_buffer_size		;Output Buffer of 256 char
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> 	
    28                              <1> ;------------Number Buffer
    29                              <1> 
    30                              <1> 
    31                              <1> 	
    32                              <1> 	
    33                              <1> 	;w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34                              <1> 	;endofline: resb 1					;Maybe Not Needed
    35                              <1> 	
    36                              <1> 
    37                              <1> 
    38                              <1> segment .data
    39 00000127 90                  <1> 	ALIGN 4
    40 00000128 [0A050000]          <1> 	vV_sys_format_mode: dd vV_ascii_int_to_dec
     7                                  %include "vVc/assembly/w_runtime/vV_io.asm"			
     1                              <1> 
     2                              <1> 
     3                              <1> ;%include "vVc/assembly/w_runtime/vV_ascii.asm"
     4                              <1> 
     5                              <1> 
     6                              <1> ;Group all read/wrie syscalls
     7                              <1> 
     8                              <1> ;global convert_to_string
     9                              <1> ;global convert_to_int
    10                              <1> 
    11                              <1> ;extern vV_input_buffer
    12                              <1> ;extern vV_output_buffer
    13                              <1> ;extern w_number_buffer
    14                              <1> 
    15                              <1> global wio_out
    16                              <1> global wio_get
    17                              <1> global wio_get_str_raw
    18                              <1> global wio_get_str_null
    19                              <1> global wio_get_str_nline
    20                              <1> global wio_move_in_to_out
    21                              <1> 
    22                              <1> 
    23                              <1> segment .text 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> vV_io_flush_no_nline:							;Temporary
    28                              <1> 	
    29                              <1> 	
    30                              <1> 	
    31 000001EC 8B1425[93010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    32                              <1> 	
    33 000001F3 C70425[93010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    33 000001FB 000000              <1>
    34                              <1> 	
    35 000001FE 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    35 00000200 [9701000000000000]  <1>
    36                              <1> 		
    37 00000208 BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    38 0000020D B801000000          <1> 	mov rax , 1					; Write sysCall
    39 00000212 0F05                <1> 	syscall
    40                              <1> 	
    41                              <1> 	
    42                              <1> 	
    43 00000214 C3                  <1> 	ret
    44                              <1> 
    45                              <1> vV_io_flush:
    46                              <1> 	
    47                              <1> 	
    48                              <1> 	
    49 00000215 8B1425[93010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    50                              <1> 	
    51 0000021C C70425[93010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    51 00000224 000000              <1>
    52                              <1> 	
    53 00000227 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    53 00000229 [9701000000000000]  <1>
    54                              <1> 		
    55 00000231 67C682[97010000]0A  <1> 	mov BYTE[vV_output_buffer + edx] , 0xa
    56 00000239 FFC2                <1> 	inc edx
    57                              <1> 		
    58 0000023B BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    59 00000240 B801000000          <1> 	mov rax , 1					; Write sysCall
    60 00000245 0F05                <1> 	syscall
    61                              <1> 	
    62                              <1> 	
    63                              <1> 	
    64 00000247 C3                  <1> 	ret
    65                              <1> 	
    66                              <1> 		
    67                              <1> ;-------------------------------------------------------------------------------
    68                              <1> ;-------------------------------------------------------------------------------
    69                              <1> 	
    70                              <1> vV_io_out_buffer_default:
    71                              <1> 
    72 00000248 448B1425[28010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    73 00000250 E80F000000          <1> 	call vV_io_out_buffer
    74 00000255 C3                  <1> 	ret
    75                              <1> 	
    76                              <1> vV_io_out_default:
    77                              <1> 
    78 00000256 448B1425[28010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    79 0000025E E80C000000          <1> 	call vV_io_out
    80 00000263 C3                  <1> 	ret
    81                              <1> 
    82                              <1> ;-------------------------------------------------------------------------------
    83                              <1> ;-------------------------------------------------------------------------------
    84                              <1> 	
    85                              <1> vV_io_out_buffer:				;print str repr of Top Of Stack element
    86                              <1> 						
    87                              <1> 						
    88 00000264 E811000000          <1> 	call vV_io_out01			
    89 00000269 E84A000000          <1> 	call vV_io_out_buffer_end
    90 0000026E C3                  <1> 	ret
    91                              <1> 
    92                              <1> ;-------------------------------------------------------------------------------
    93                              <1> 		
    94                              <1> vV_io_out:					;print str repr of Top Of Stack element
    95                              <1> 
    96                              <1> 
    97 0000026F E806000000          <1> 	call vV_io_out01					
    98 00000274 E826000000          <1> 	call vV_io_out_direct_end
    99 00000279 C3                  <1> 	ret
   100                              <1> 
   101                              <1> ;-------------------------------------------------------------------------------	
   102                              <1> ;-------------------------------------------------------------------------------	
   103                              <1> 
   104                              <1> vV_io_out01:					;print str repr of Top Of Stack element
   105                              <1> 
   106                              <1> 
   107                              <1> 	vV_pop eax				;get value in eax
   107                              <2> 
   107 0000027A 4983EF04            <2>  sub vV_sp , 4
   107 0000027E 418B07              <2>  mov %1 , [vV_sp]
   107                              <2> 
   108                              <1> 	
   109 00000281 BF[97010000]        <1> 	mov edi , vV_output_buffer		;set dest as O_buff
   110 00000286 033C25[93010000]    <1> 	add edi ,DWORD[vV_output_buffer_content]		;set offset to start of freespace
   111                              <1> 	
   112 0000028D 57                  <1> push rdi					;Save buffer origin
   113                              <1> 	
   114 0000028E 41B9FF000000        <1> 	mov r9 , 255				;set Max buffer available	
   115 00000294 4129F9              <1> 	sub r9d , edi				;#TODO: Stop HardCoding VALUES!!!!
   116 00000297 41FFD2              <1> 		call r10			;call current conversion format function
   117 0000029A 4831FF              <1> 	xor rdi , rdi
   118                              <1> 	
   119 0000029D 5F                  <1> pop rdi						;recover Buffer origin
   120                              <1> 	
   121 0000029E C3                  <1> 	ret
   122                              <1> 
   123                              <1> ;-------------------------------------------------------------------------------	
   124                              <1> 	
   125                              <1> vV_io_out_direct_end:
   126                              <1> 
   127                              <1> 
   128                              <1> 
   129 0000029F 67C604070A          <1> 	mov BYTE[edi + eax] , 0xa		;add new_line
   130                              <1> 		
   131 000002A4 FFC0                <1> 		inc eax
   132                              <1> 		
   133 000002A6 89C2                <1> 		mov edx , eax				;string lenght		
   134 000002A8 4889FE              <1> 		mov rsi , rdi				;strng ptr
   135 000002AB BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   136 000002B0 B801000000          <1> 		mov rax , 1				; Write sysCall
   137 000002B5 0F05                <1> 		syscall
   138                              <1> 	
   139 000002B7 C3                  <1> 		ret
   140                              <1> 
   141                              <1> ;-------------------------------------------------------------------------------		
   142                              <1> 		
   143                              <1> vV_io_out_buffer_end:
   144                              <1> 
   145 000002B8 010425[93010000]    <1> 	add [vV_output_buffer_content] , eax
   146                              <1> 
   147 000002BF C3                  <1> 	ret
   148                              <1> 
   149                              <1> ;-------------------------------------------------------------------------------
   150                              <1> 
   151                              <1> vV_io_out_char:
   152                              <1> 
   153                              <1> 	
   154 000002C0 E827000000          <1> 	call vV_io_read_char
   155 000002C5 E8D5FFFFFF          <1> 	call vV_io_out_direct_end
   156                              <1> 	
   157 000002CA C3                  <1> 	ret
   158                              <1> 	
   159                              <1> vV_io_out_packed_char:
   160                              <1> 
   161                              <1> 	
   162 000002CB E842000000          <1> 	call vV_io_read_packed_char
   163                              <1> 	
   164 000002D0 E8CAFFFFFF          <1> 	call vV_io_out_direct_end
   165                              <1> 	
   166 000002D5 C3                  <1> 	ret
   167                              <1> 	
   168                              <1> vV_io_out_char_buffer:
   169                              <1> 
   170 000002D6 E811000000          <1> 	call vV_io_read_char
   171                              <1> 	
   172 000002DB E8D8FFFFFF          <1> 	call vV_io_out_buffer_end
   173                              <1> 	
   174 000002E0 C3                  <1> 	ret
   175                              <1> 	
   176                              <1> vV_io_out_packed_char_buffer:
   177                              <1> 
   178 000002E1 E82C000000          <1> 	call vV_io_read_packed_char
   179                              <1> 	
   180 000002E6 E8CDFFFFFF          <1> 	call vV_io_out_buffer_end
   181                              <1> 	
   182 000002EB C3                  <1> 	ret
   183                              <1> 	
   184                              <1> vV_io_read_char:
   185                              <1> 
   186                              <1> 	vV_pop eax
   186                              <2> 
   186 000002EC 4983EF04            <2>  sub vV_sp , 4
   186 000002F0 418B07              <2>  mov %1 , [vV_sp]
   186                              <2> 
   187                              <1> 	
   188 000002F3 48BF-               <1> 	mov rdi , vV_output_buffer
   188 000002F5 [9701000000000000]  <1>
   189 000002FD 033C25[93010000]    <1> 	add edi , [vV_output_buffer_content]
   190                              <1> 	
   191 00000304 678807              <1> 	mov [edi] , al
   192                              <1> 	
   193 00000307 BF[97010000]        <1> 	mov edi , vV_output_buffer
   194 0000030C B801000000          <1> 	mov eax , 1
   195                              <1> 	
   196 00000311 C3                  <1> 	ret	
   197                              <1> 	
   198                              <1> vV_io_read_packed_char:
   199                              <1> 
   200                              <1> 	vV_pop eax
   200                              <2> 
   200 00000312 4983EF04            <2>  sub vV_sp , 4
   200 00000316 418B07              <2>  mov %1 , [vV_sp]
   200                              <2> 
   201                              <1> 	
   202 00000319 48BF-               <1> 	mov rdi , vV_output_buffer
   202 0000031B [9701000000000000]  <1>
   203 00000323 033C25[93010000]    <1> 	add edi , [vV_output_buffer_content]
   204                              <1> 	
   205 0000032A 678907              <1> 	mov [edi] , eax
   206                              <1> 	
   207 0000032D BF[97010000]        <1> 	mov edi , vV_output_buffer
   208 00000332 B804000000          <1> 	mov eax , 4	
   209                              <1> 	
   210 00000337 C3                  <1> 	ret
   211                              <1> 		
   212                              <1> ;-------------------------------------------------------------------------------
   213                              <1> ;-------------------------------------------------------------------------------
   214                              <1> ;-------------------------------------------------------------------------------
   215                              <1> ;-------------------------------------------------------------------------------
   216                              <1> ;-------------------------------------------------------------------------------
   217                              <1> ;-------------------------------------------------------------------------------
   218                              <1> ;-------------------------------------------------------------------------------
   219                              <1> 	
   220                              <1> vV_io_read:
   221                              <1> 
   222                              <1> 								
   223 00000338 48BE-               <1> 		mov rsi , vV_input_buffer		;ptr to string destination	
   223 0000033A [9400000000000000]  <1>
   224 00000342 BAFF000000          <1> 		mov edx , vV_input_buffer_size				;string lenght	
   225 00000347 BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   226 0000034C B800000000          <1> 		mov rax , 0				; read sysCall
   227                              <1> 		
   228 00000351 0F05                <1> 		syscall
   229                              <1> 	
   230                              <1> ;-------------Buffer_Overflow_Execption  
   231                              <1> 
   232                              <1> 
   233                              <1> 
   234 00000353 3DFF000000          <1> 		cmp eax , 255				;Check if Buffer Is Full
   235                              <1> 		
   236 00000358 721F                <1> 			jb .no_overflow
   237                              <1> 			
   238 0000035A 803C25[92010000]0A  <1> 		cmp BYTE[vV_input_buffer + vV_input_buffer_size-1] , 0xa	;Check if Buffer end with "\n"
   239                              <1> 		
   240 00000362 7415                <1> 			je .no_overflow
   241                              <1> 		
   242                              <1> 		
   243 00000364 50                  <1> 			push rax
   244 00000365 53                  <1> 			push rbx
   245                              <1> 		
   246 00000366 B401                <1> 			mov ah , vV_ERR_IO_I_OVERFLOW
   247 00000368 6683C800            <1> 			or ax , 0
   248 0000036C 4831DB              <1> 			xor rbx , rbx
   249 0000036F 4889F3              <1> 			mov rbx , rsi
   250                              <1> 		
   251 00000372 E817FDFFFF          <1> 			call vV_error
   252                              <1> 		
   253 00000377 5B                  <1> 			pop rbx
   254 00000378 58                  <1> 			pop rax
   255                              <1> 		
   256                              <1> 			;ret
   257                              <1> 		
   258                              <1> 		.no_overflow:
   259                              <1> 		
   260 00000379 C3                  <1> 			ret
   261                              <1> 		
   262                              <1> 		
   263                              <1> 	
   264                              <1> 	
   265                              <1> vV_io_get_default:
   266                              <1> 
   267 0000037A 41BA[1A040000]      <1> 	mov r10d , vV_ascii_as_dec			;TODO: default settings
   268 00000380 E801000000          <1> 	call vV_io_get
   269 00000385 C3                  <1> 	ret
   270                              <1> 	
   271                              <1> 	
   272                              <1> vV_io_get:						;convert inputed value to 
   273                              <1> 							;32bit int, push it on
   274                              <1> 							;the stack
   275 00000386 E8ADFFFFFF          <1> 	call vV_io_read
   276                              <1> 		
   277                              <1> ;----------------------------------------------	
   278                              <1> 
   279 0000038B 53                  <1> 	push rbx				;Save rbx (conversion uses it) 
   280                              <1> 
   281 0000038C 89C3                <1> 		mov ebx , eax 			;send char count by ebx
   282 0000038E 31FF                <1> 		xor edi , edi 			;zero out counter
   283 00000390 BE[94000000]        <1> 		mov esi , vV_input_buffer	;Set source to I_buffer
   284                              <1> 		
   285                              <1> 
   286 00000395 41FFD2              <1> 		call r10
   287                              <1> 		
   288 00000398 5B                  <1> 	pop rbx
   289                              <1> 	
   290                              <1> 		vV_push eax
   290                              <2> 
   290 00000399 418907              <2>  mov DWORD[vV_sp] , %1
   290 0000039C 4983C704            <2>  add vV_sp , 4
   290                              <2> 
   291                              <1> 		
   292 000003A0 C3                  <1> 		ret
   293                              <1> 
   294                              <1> 
   295                              <1> ;-------------------------------------------------------------------------------
   296                              <1> ;-------------------------------------------------------------------------------
   297                              <1> 
   298                              <1> 
   299                              <1> vV_io_get_char:
   300                              <1> 
   301                              <1> 
   302 000003A1 E892FFFFFF          <1> 	call vV_io_read
   303                              <1> 	
   304 000003A6 31D2                <1> 	xor edx , edx
   305                              <1> 	
   306 000003A8 8A1425[94000000]    <1> 	mov dl , [vV_input_buffer]
   307                              <1> 	
   308                              <1> 	vV_push edx
   308                              <2> 
   308 000003AF 418917              <2>  mov DWORD[vV_sp] , %1
   308 000003B2 4983C704            <2>  add vV_sp , 4
   308                              <2> 
   309                              <1> 	
   310 000003B6 C3                  <1> 	ret
   311                              <1> 	
   312                              <1> vV_io_get_packed_char:
   313                              <1> 
   314 000003B7 C70425[94000000]00- <1> 	mov DWORD [vV_input_buffer] , 0
   314 000003BF 000000              <1>
   315                              <1> 
   316 000003C2 E871FFFFFF          <1> 	call vV_io_read
   317                              <1> 	
   318 000003C7 31D2                <1> 	xor edx , edx
   319                              <1> 	
   320 000003C9 8B1425[94000000]    <1> 	mov edx, [vV_input_buffer]
   321                              <1> 	
   322                              <1> 	vV_push edx
   322                              <2> 
   322 000003D0 418917              <2>  mov DWORD[vV_sp] , %1
   322 000003D3 4983C704            <2>  add vV_sp , 4
   322                              <2> 
   323                              <1> 	
   324 000003D7 C3                  <1> 	ret
   325                              <1> 	
   326                              <1> 		
   327                              <1> 		
   328                              <1> 
   329                              <1> 
   330                              <1> 
     8                                  %include "vVc/assembly/w_runtime/vV_ascii.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> segment .text 
     4                              <1> 
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> vV_ascii_as_hex2:						;Jumped to from parse_num OR called
     9                              <1> 								;use edi as counter/offset in string !Set if direct call
    10                              <1> 								;use esi as source string
    11                              <1> 								;concatenate result in eax
    12                              <1> 								;parse digit in cl
    13                              <1> 								
    14                              <1> 								;use r8 for base
    15                              <1> 								;use r9 for max_value
    16                              <1> 								
    17                              <1> 							
    18                              <1> 	;mov r8 , 16	
    19                              <1> 	
    20                              <1> 	.start_loop:
    21                              <1> 	
    22 000003D8 678A0C3E            <1> 		mov cl , [esi + edi]
    23                              <1> 	
    24                              <1> 		
    25 000003DC 80F930              <1> 		cmp cl , 48
    26                              <1> 		
    27 000003DF 7265                <1> 			jb vV_ascii_unvalid
    28                              <1> 			
    29 000003E1 80F93A              <1> 		cmp cl , 58
    30                              <1> 		
    31 000003E4 720D                <1> 			jb .pass_int
    32                              <1> 			
    33 000003E6 80F966              <1> 			cmp cl , 'f'
    34                              <1> 			
    35 000003E9 775B                <1> 				ja vV_ascii_unvalid
    36                              <1> 			
    37 000003EB 80F961              <1> 			cmp cl , 'a'
    38                              <1> 			
    39 000003EE 7256                <1> 				jb vV_ascii_unvalid
    40                              <1> 				
    41 000003F0 80E927              <1> 			sub cl , 39
    42                              <1> 				
    43                              <1> 			
    44                              <1> 		.pass_int:	
    45                              <1> 			
    46 000003F3 80E930              <1> 		sub cl , '0'
    47                              <1> 		
    48                              <1> 		
    49                              <1> 		
    50 000003F6 31D2                <1> 		xor edx , edx
    51                              <1> 		
    52 000003F8 F8                  <1> 		clc
    53                              <1> 		
    54 000003F9 41F7E0              <1> 		mul r8d
    55                              <1> 		
    56 000003FC 725D                <1> 		jc vV_ascii_overflow
    57                              <1> 		
    58 000003FE 01C8                <1> 		add eax , ecx
    59                              <1> 		
    60                              <1> 		.pass02:
    61                              <1> 		
    62 00000400 FFC7                <1> 		inc edi
    63                              <1> 		
    64 00000402 39DF                <1> 		cmp edi , ebx
    65                              <1> 		
    66 00000404 72D2                <1> 		jb .start_loop
    67                              <1> 
    68                              <1> 		
    69 00000406 C3                  <1> 		ret	
    70                              <1> 		
    71                              <1> 		
    72                              <1> ;
    73                              <1> ;				ebx		esi
    74                              <1> ;	ascii_to_format( buffer_size , buffer_adress ) 
    75                              <1> ;		
    76                              <1> ;
    77                              <1> ;	set:	rcx,rdx (rax) to 0
    78                              <1> ;		r8,r9
    79                              <1> ;		
    80                              <1> ;	call: specialized dexodefunction
    81                              <1> 		
    82                              <1> vV_ascii_as_hex:
    83                              <1> 	
    84 00000407 FFCB                <1> 	dec ebx
    85 00000409 41B810000000        <1> 	mov r8 , 16	
    86 0000040F 4831C0              <1> 	xor rax , rax 		;(just in case not switching from dec mode)			
    87 00000412 4831C9              <1> 	xor rcx , rcx
    88 00000415 4831D2              <1> 	xor rdx , rdx
    89 00000418 EBBE                <1> 	jmp vV_ascii_as_hex2
    90                              <1> 
    91                              <1> vV_ascii_as_dec:
    92                              <1> 
    93 0000041A FFCB                <1> 	dec ebx
    94 0000041C 41B80A000000        <1> 	mov r8 , 10			
    95 00000422 41B93A000000        <1> 	mov r9 , 58
    96 00000428 4831C9              <1> 	xor rcx , rcx
    97 0000042B 4831D2              <1> 	xor rdx , rdx
    98 0000042E EB5E                <1> 	jmp vV_ascii_as_decbin
    99                              <1> 
   100                              <1> vV_ascii_as_bin:
   101                              <1> 
   102 00000430 FFCB                <1> 	dec ebx
   103 00000432 41B802000000        <1> 	mov r8 , 2			
   104 00000438 41B932000000        <1> 	mov r9 , 50
   105 0000043E 4831C9              <1> 	xor rcx , rcx
   106 00000441 4831D2              <1> 	xor rdx , rdx
   107                              <1> 	
   108 00000444 EB48                <1> 	jmp vV_ascii_as_decbin
   109                              <1> 	
   110                              <1> vV_ascii_unvalid:
   111                              <1> 	
   112                              <1> 		;mov rax , 24;	#TODO: Defined Errors code/ data in file
   113                              <1> 		;xor rdx , rdx
   114                              <1> 		;mov dl , cl
   115                              <1> 		
   116                              <1> 		;call w_forced_exit
   117                              <1> 		
   118 00000446 50                  <1> 		push rax
   119 00000447 53                  <1> 		push rbx
   120                              <1> 		
   121 00000448 B403                <1> 		mov ah , vV_ERR_IO_I_UNVALID
   122 0000044A 6683C800            <1> 		or ax , 0
   123 0000044E 4831DB              <1> 		xor rbx , rbx
   124 00000451 88CB                <1> 		mov bl , cl
   125                              <1> 		
   126 00000453 E836FCFFFF          <1> 		call vV_error
   127                              <1> 		
   128 00000458 5B                  <1> 		pop rbx
   129 00000459 58                  <1> 		pop rax
   130                              <1> 		
   131 0000045A C3                  <1> 		ret
   132                              <1> 		
   133                              <1> 		
   134                              <1> 		
   135                              <1> 		
   136                              <1> vV_ascii_overflow:
   137                              <1> 	
   138 0000045B 50                  <1> 		push rax
   139 0000045C 53                  <1> 		push rbx
   140                              <1> 		
   141 0000045D 4831DB              <1> 		xor rbx , rbx
   142 00000460 4889C3              <1> 		mov rbx , rax
   143                              <1> 		
   144                              <1> 		;or rbx , 0x00010000
   145                              <1> 		
   146 00000463 B401                <1> 		mov ah , vV_ERR_IO_I_OVERFLOW
   147 00000465 6683C800            <1> 		or ax , 0
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151 00000469 E820FCFFFF          <1> 		call vV_error
   152                              <1> 		
   153 0000046E 5B                  <1> 		pop rbx
   154 0000046F 58                  <1> 		pop rax
   155                              <1> 		
   156                              <1> 		;TODO: Maybe use vV_error return value for decision making
   157                              <1> 		
   158 00000470 B8FFFFFFFF          <1> 		mov eax , -1
   159                              <1> 		
   160 00000475 C3                  <1> 		ret
   161                              <1> 		
   162                              <1> 		
   163                              <1> vV_ascii_change_to_hex:
   164                              <1> 		
   165 00000476 83F800              <1> 		cmp eax , 0
   166                              <1> 			
   167 00000479 75CB                <1> 			jne vV_ascii_unvalid
   168                              <1> 			
   169 0000047B 41B810000000        <1> 		mov r8 , 16
   170 00000481 4831C9              <1> 		xor rcx , rcx
   171 00000484 4831C0              <1> 		xor rax ,rax
   172                              <1> 				
   173 00000487 FFC7                <1> 		inc edi
   174 00000489 E94AFFFFFF          <1> 		jmp vV_ascii_as_hex2		
   175                              <1> 		
   176                              <1> 	
   177                              <1> 
   178                              <1> 
   179                              <1> vV_ascii_as_decbin:						;ebx: number of char to read
   180                              <1> 
   181                              <1> 	
   182                              <1> 
   183                              <1> 								;use edi as counter/offset in string
   184                              <1> 								;concatenate result in eax
   185                              <1> 								;parse digit in cl
   186                              <1> 								
   187                              <1> 								;use r8 for base
   188                              <1> 								;use r9 for max_value					
   189                              <1> 								;itou
   190                              <1> 	;xor edi, edi			;should be set by caller
   191 0000048E 4831C0              <1> 	xor rax , rax
   192                              <1> 	
   193 00000491 4831C9              <1> 	xor rcx , rcx
   194                              <1> 	
   195 00000494 4831D2              <1> 	xor rdx , rdx
   196                              <1> 	
   197                              <1> 	
   198                              <1> 	.start_loop:
   199                              <1> 	
   200 00000497 678A0C3E            <1> 		mov cl , [esi + edi]
   201                              <1> 		
   202                              <1> 		
   203 0000049B 80F962              <1> 		cmp cl , 'b'										
   204 0000049E 7513                <1> 			jne .pass01
   205                              <1> 		
   206                              <1> 		.format_change:
   207                              <1> 			
   208 000004A0 83F800              <1> 			cmp eax , 0
   209                              <1> 			
   210 000004A3 75A1                <1> 				jne vV_ascii_unvalid
   211                              <1> 				
   212 000004A5 41B802000000        <1> 			mov r8 , 2
   213                              <1> 			
   214 000004AB 41B932000000        <1> 			mov r9 , 50
   215                              <1> 	
   216 000004B1 EB26                <1> 			jmp .pass02
   217                              <1> 		
   218                              <1> 		
   219                              <1> 	
   220                              <1> 		.pass01:
   221                              <1> 		
   222 000004B3 80F968              <1> 		cmp cl , 'h'											
   223 000004B6 74BE                <1> 			je vV_ascii_change_to_hex
   224 000004B8 80F978              <1> 		cmp cl , 'x'											
   225 000004BB 74B9                <1> 			je vV_ascii_change_to_hex
   226                              <1> 			
   227                              <1> 			
   228 000004BD 4438C9              <1> 		cmp cl , r9b
   229                              <1> 		
   230 000004C0 7384                <1> 			jae vV_ascii_unvalid
   231                              <1> 		
   232 000004C2 80F930              <1> 		cmp cl , 48
   233                              <1> 		
   234 000004C5 0F827BFFFFFF        <1> 			jb vV_ascii_unvalid
   235                              <1> 			
   236                              <1> 		
   237                              <1> 			
   238 000004CB 80E930              <1> 		sub cl , 48
   239                              <1> 		
   240 000004CE 4831D2              <1> 		xor rdx , rdx
   241 000004D1 F8                  <1> 		clc
   242                              <1> 		
   243 000004D2 41F7E0              <1> 		mul r8d
   244                              <1> 		
   245 000004D5 7284                <1> 		jc vV_ascii_overflow
   246                              <1> 		
   247 000004D7 01C8                <1> 		add eax , ecx
   248                              <1> 		
   249                              <1> 		.pass02:
   250                              <1> 		
   251 000004D9 FFC7                <1> 		inc edi
   252                              <1> 		
   253 000004DB 39DF                <1> 		cmp edi , ebx
   254                              <1> 		
   255 000004DD 72B8                <1> 		jb .start_loop
   256                              <1> 		
   257                              <1> 		
   258 000004DF C3                  <1> 		ret			; result should be in eax
   259                              <1> 		
   260                              <1> 
   261                              <1> 	
   262                              <1> ;------------------------------------------------------------------------------------------
   263                              <1> ;------------------------------------------------------------------------------------------
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> vV_ascii_int_to_hex:					;value in eax
   268                              <1> 						;dest in rdi
   269                              <1> 
   270                              <1> 
   271                              <1> 
   272 000004E0 31C9                <1> 	xor ecx , ecx	
   273                              <1> 	
   274 000004E2 BE10000000          <1> 	mov esi , 16
   275                              <1> 
   276                              <1> 	
   277                              <1> 	.loop01:
   278                              <1> 	
   279 000004E7 4831D2              <1> 		xor rdx , rdx
   280                              <1> 		
   281 000004EA F7F6                <1> 		div esi
   282                              <1> 		
   283                              <1> 		
   284 000004EC 80FA0A              <1> 		cmp dl , 10
   285                              <1> 		
   286 000004EF 7203                <1> 		jb .dec
   287                              <1> 		
   288 000004F1 80C207              <1> 			add dl , 7
   289                              <1> 		
   290                              <1> 		.dec:
   291                              <1> 		
   292 000004F4 80C230              <1> 			add dl , '0'
   293                              <1> 		
   294                              <1> 		
   295 000004F7 52                  <1> 		push rdx
   296                              <1> 		
   297 000004F8 FFC1                <1> 		inc ecx
   298                              <1> 		
   299 000004FA 39F0                <1> 		cmp eax , esi
   300                              <1> 		
   301 000004FC 73E9                <1> 		jae .loop01
   302                              <1> 	
   303                              <1> 	
   304 000004FE 3C0A                <1> 	cmp al , 10
   305                              <1> 		
   306 00000500 7202                <1> 		jb .dec2
   307                              <1> 		
   308 00000502 0407                <1> 			add al , 7
   309                              <1> 		
   310                              <1> 		.dec2:
   311                              <1> 		
   312 00000504 0430                <1> 			add al , '0'	
   313 00000506 8807                <1> 	mov [rdi] , al
   314                              <1> 	
   315 00000508 EB1B                <1> 	jmp vV_ascii_pop_digits
   316                              <1> 		
   317                              <1> 	
   318                              <1> 	
   319                              <1> 	
   320                              <1> vV_ascii_int_to_dec:					;value in eax
   321                              <1> 						;dest in rdi
   322                              <1> 						;max_dest_size in r9d
   323                              <1> 
   324                              <1> 
   325                              <1> 
   326 0000050A 31C9                <1> 	xor ecx , ecx	
   327                              <1> 	
   328 0000050C BE0A000000          <1> 	mov esi , 10
   329                              <1> 	
   330                              <1> 
   331                              <1> 
   332                              <1> 	
   333                              <1> 	.loop01:
   334                              <1> 	
   335 00000511 4831D2              <1> 		xor rdx , rdx
   336                              <1> 		
   337 00000514 F7F6                <1> 		div esi
   338                              <1> 		
   339                              <1> 		
   340 00000516 80C230              <1> 		add dl , '0'
   341 00000519 52                  <1> 		push rdx
   342                              <1> 		
   343 0000051A FFC1                <1> 		inc ecx
   344                              <1> 		
   345 0000051C 83F80A              <1> 		cmp eax , 10
   346                              <1> 		
   347 0000051F 73F0                <1> 		jae .loop01
   348                              <1> 	
   349 00000521 0430                <1> 	add al , '0'	
   350 00000523 8807                <1> 	mov [rdi] , al
   351                              <1> 		
   352                              <1> 	
   353                              <1> 		
   354                              <1> vV_ascii_pop_digits:			; Need nb of digits currently on stack(ecx)
   355                              <1> 						;dest in rdi
   356 00000525 41B801000000        <1> 		mov r8d , 1
   357 0000052B FFC1                <1> 		inc ecx
   358                              <1> 		
   359 0000052D 4439C9              <1> 		cmp ecx , r9d
   360                              <1> 		
   361 00000530 7219                <1> 		jb .loopstart
   362                              <1> 		
   363                              <1> 	
   364 00000532 50                  <1> 			push rax
   365 00000533 53                  <1> 			push rbx
   366                              <1> 		
   367 00000534 B410                <1> 			mov ah , vV_ERR_MEMORY_BUFFER_LIMIT
   368 00000536 6683C800            <1> 			or ax , 0
   369 0000053A 4831DB              <1> 			xor rbx , rbx
   370 0000053D 89FB                <1> 			mov ebx , edi
   371                              <1> 		
   372 0000053F E84AFBFFFF          <1> 			call vV_error
   373                              <1> 		
   374 00000544 5B                  <1> 			pop rbx
   375 00000545 58                  <1> 			pop rax
   376                              <1> 			
   377 00000546 4489C9              <1> 			mov ecx , r9d		;Should protect memory..
   378 00000549 FFC9                <1> 			dec ecx		;will need testing
   379                              <1> 		
   380                              <1> 						
   381                              <1> 		.loopstart:
   382                              <1> 		
   383 0000054B 5A                  <1> 			pop rdx
   384 0000054C 6742881407          <1> 			mov BYTE[edi + r8d] , dl
   385 00000551 41FFC0              <1> 			inc r8d
   386                              <1> 			
   387 00000554 4139C8              <1> 			cmp r8d , ecx
   388                              <1> 		
   389 00000557 72F2                <1> 		jb .loopstart
   390                              <1> 	
   391                              <1> 	
   392 00000559 89C8                <1> 		mov eax , ecx
   393                              <1> 		
   394 0000055B C3                  <1> 		ret	
   395                              <1> 	
   396                              <1> 	
   397                              <1> vV_ascii_int_to_bin:					;value in eax, 
   398                              <1> 							
   399                              <1> 
   400                              <1> 
   401 0000055C 31C9                <1> 	xor ecx , ecx
   402                              <1> 	
   403                              <1> 	
   404                              <1> 	.loop01:
   405                              <1> 	
   406                              <1> 		
   407 0000055E D1E8                <1> 		shr eax , 1
   408                              <1> 		
   409 00000560 7205                <1> 		jc .one
   410                              <1> 		
   411 00000562 B230                <1> 			mov dl , '0'
   412 00000564 52                  <1> 			push rdx
   413                              <1> 			
   414 00000565 EB03                <1> 		jmp .next
   415                              <1> 		.one:
   416                              <1> 			
   417 00000567 B231                <1> 			mov dl , '1'
   418 00000569 52                  <1> 			push rdx
   419                              <1> 		
   420                              <1> 		.next:
   421                              <1> 		
   422 0000056A FFC1                <1> 		inc ecx
   423                              <1> 		
   424 0000056C 83F801              <1> 		cmp eax , 1
   425                              <1> 		
   426 0000056F 77ED                <1> 		ja .loop01
   427                              <1> 	
   428 00000571 0430                <1> 	add al , '0'	
   429 00000573 8807                <1> 	mov [rdi] , al
   430                              <1> 	
   431 00000575 EBAE                <1> 	jmp vV_ascii_pop_digits
   432                              <1> 	
   433                              <1> 	
   434                              <1> ;Will need a special version for String stack
   435                              <1> 
   436                              <1> 
   437                              <1> 
   438                              <1> 
   439                              <1> 
   440                              <1> 
   441                              <1> 
     9                                  %include "w_samples/assembly/helloworld_vars.was"	
     1                              <1>  segment .bss
     2                              <1> 	u_global:
     3                              <1>  segment .data
     4                              <1> 	i_global:
     5 0000012C 0B0000001F00000015- <1> .sizes: dd  11 , 31 , 21 , 26 , 48 , 35 
     5 00000135 0000001A0000003000- <1>
     5 0000013E 000023000000        <1>
     6 00000144 616E64207061737369- <1> .line5:db "and passing string type as argument"
     6 0000014D 6E6720737472696E67- <1>
     6 00000156 207479706520617320- <1>
     6 0000015F 617267756D656E74    <1>
     7 00000167 746F20616C6C6F7720- <1> .line4:db "to allow storing different sized Stings in array"
     7 00000170 73746F72696E672064- <1>
     7 00000179 6966666572656E7420- <1>
     7 00000182 73697A656420537469- <1>
     7 0000018B 6E677320696E206172- <1>
     7 00000194 726179              <1>
     8 00000197 6E6578742069732061- <1> .line3:db "next is a real String type"
     8 000001A0 207265616C20537472- <1>
     8 000001A9 696E672074797065    <1>
     9 000001B1 616E6420696E697469- <1> .line2:db "and initialized Array"
     9 000001BA 616C697A6564204172- <1>
     9 000001C3 726179              <1>
    10 000001C6 7656206E6F77207375- <1> .line1:db "vV now support String Litterals"
    10 000001CF 70706F727420537472- <1>
    10 000001D8 696E67204C69747465- <1>
    10 000001E1 72616C73            <1>
    11 000001E5 48656C6C6F20576F72- <1> .str:db "Hello World"
    11 000001EE 6C64                <1>
    10                                  %include "vVc/assembly/w_runtime/vV_system90.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	
     5                              <1> 	
     6                              <1> 	stacks: 
     7                              <1> 
     8                              <1> 
     9 00000296 <res 00040000>      <1> 	string_stack_start: resb 262144
    10                              <1> 
    11                              <1> 
    12                              <1> 	
    13                              <1> 	
    14                              <1> 						
    15 00040296 <res 00020000>      <1> 	fake_stack_start: resb 131072
    11                                  
    12                                  
    13                                  
    14                                  global w_entry_point
    15                                  
    16                                  
    17                                  
    18                                  segment .text 
    19                                  
    20                                  
    21                                  
    22                                  		
    23                                  
    24                                  
    25                                  
    26                                  vV_entry_point:
    27                                  
    28                                  
    29 00000577 55                      	push rbp
    30 00000578 4889E5                  	mov rbp, rsp			;Setup Stack Frame
    31                                  	
    32                                  	;OpADR: [0] ; PUSH opcode 
    33                                  
    34                                  	vV_push 0
    34                              <1> 
    34 0000057B 41C70700000000      <1>  mov DWORD[vV_sp] , %1
    34 00000582 4983C704            <1>  add vV_sp , 4
    34                              <1> 
    35                                  
    36                                  ;OpADR: [1] ; Var invocation
    37                                  
    38 00000586 488D3C25[2C010000]      		lea rdi , [i_global.sizes]	
    39 0000058E 4831C0                  	xor rax , rax	
    40                                  	vV_pop ecx	
    40                              <1> 
    40 00000591 4983EF04            <1>  sub vV_sp , 4
    40 00000595 418B0F              <1>  mov %1 , [vV_sp]
    40                              <1> 
    41 00000598 83F906                  	cmp ecx , 6	
    42 0000059B 0F8D09FBFFFF            	jge vV_bound_error	
    43 000005A1 01C8                    	add eax , ecx	
    44 000005A3 C1E002                  	shl eax , 2	
    45 000005A6 4801C7                  	add rdi , rax	
    46 000005A9 8B07                    	mov eax , [rdi]	
    47                                  	vV_push eax	
    47                              <1> 
    47 000005AB 418907              <1>  mov DWORD[vV_sp] , %1
    47 000005AE 4983C704            <1>  add vV_sp , 4
    47                              <1> 
    48                                  
    49                                  ;OpADR: [2] ; PUSH opcode 
    50                                  
    51                                  	vV_push 0
    51                              <1> 
    51 000005B2 41C70700000000      <1>  mov DWORD[vV_sp] , %1
    51 000005B9 4983C704            <1>  add vV_sp , 4
    51                              <1> 
    52                                  
    53                                  ;OpADR: [3] ; Loop check 
    54                                  
    55                                  		vV_pop eax	;get index
    55                              <1> 
    55 000005BD 4983EF04            <1>  sub vV_sp , 4
    55 000005C1 418B07              <1>  mov %1 , [vV_sp]
    55                              <1> 
    56 000005C4 50                      	push rax	
    57                                  	vV_pop eax	;get limit
    57                              <1> 
    57 000005C5 4983EF04            <1>  sub vV_sp , 4
    57 000005C9 418B07              <1>  mov %1 , [vV_sp]
    57                              <1> 
    58 000005CC 50                      	push rax	
    59                                  
    60                                  
    61                                  
    62                                  	wblock_helloworld0:		
    63                                  
    64                                  ;------------------------------------------------------
    65                                  
    66                                  ;OpADR: [4] ; Var invocation
    67                                  
    68 000005CD 4831C0                  		xor rax , rax
    69 000005D0 488D7C2408              	lea rdi , [rsp+8]	
    70 000005D5 4801C7                  	add rdi , rax	
    71 000005D8 8B07                    	mov eax , [rdi] 
    72                                  	vV_push eax	
    72                              <1> 
    72 000005DA 418907              <1>  mov DWORD[vV_sp] , %1
    72 000005DD 4983C704            <1>  add vV_sp , 4
    72                              <1> 
    73                                  
    74                                  ;OpADR: [5] ; Var invocation
    75                                  
    76 000005E1 488D3C25[E5010000]      		lea rdi , [i_global.str]	
    77 000005E9 4831C0                  	xor rax , rax	
    78                                  	vV_pop ecx	
    78                              <1> 
    78 000005EC 4983EF04            <1>  sub vV_sp , 4
    78 000005F0 418B0F              <1>  mov %1 , [vV_sp]
    78                              <1> 
    79 000005F3 83F90B                  	cmp ecx , 11	
    80 000005F6 0F8DAEFAFFFF            	jge vV_bound_error	
    81 000005FC 01C8                    	add eax , ecx	
    82 000005FE 4801C7                  	add rdi , rax	
    83 00000601 8A07                    	mov al , [rdi]	
    84                                  	vV_push eax	
    84                              <1> 
    84 00000603 418907              <1>  mov DWORD[vV_sp] , %1
    84 00000606 4983C704            <1>  add vV_sp , 4
    84                              <1> 
    85                                  
    86                                  ;OpADR: [6] ; OUT opcode (8)
    87                                  
    88 0000060A E8C7FCFFFF              	call vV_io_out_char_buffer
    89                                  
    90                                  ;OpADR: [7] ; ; Loop init 
    91                                  
    92 0000060F FF442408                		inc DWORD[rsp + 8]
    93 00000613 488B442408              	mov rax , [rsp + 8]	;get index
    94 00000618 488B0C24                	mov rcx , [rsp]	;get max
    95 0000061C 39C8                    	cmp eax , ecx	
    96 0000061E 72AD                    	jb wblock_helloworld0	
    97                                  
    98                                  
    99                                  
   100                                  	wblock_helloworld1:		
   101                                  
   102                                  ;------------------------------------------------------
   103                                  
   104                                  ;OpADR: [8] ; Loop Cleanup 
   105                                  
   106 00000620 4883C410                	add rsp , 16	
   107                                  
   108                                  ;OpADR: [9] ; FLUSH opcode
   109                                  
   110 00000624 E8ECFBFFFF              	call vV_io_flush 
   111                                  
   112                                  ;OpADR: [10] ; FLUSH opcode
   113                                  
   114 00000629 E8E7FBFFFF              	call vV_io_flush 
   115                                  
   116                                  ;OpADR: [11] ; PUSH opcode 
   117                                  
   118                                  	vV_push 1
   118                              <1> 
   118 0000062E 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   118 00000635 4983C704            <1>  add vV_sp , 4
   118                              <1> 
   119                                  
   120                                  ;OpADR: [12] ; Var invocation
   121                                  
   122 00000639 488D3C25[2C010000]      		lea rdi , [i_global.sizes]	
   123 00000641 4831C0                  	xor rax , rax	
   124                                  	vV_pop ecx	
   124                              <1> 
   124 00000644 4983EF04            <1>  sub vV_sp , 4
   124 00000648 418B0F              <1>  mov %1 , [vV_sp]
   124                              <1> 
   125 0000064B 83F906                  	cmp ecx , 6	
   126 0000064E 0F8D56FAFFFF            	jge vV_bound_error	
   127 00000654 01C8                    	add eax , ecx	
   128 00000656 C1E002                  	shl eax , 2	
   129 00000659 4801C7                  	add rdi , rax	
   130 0000065C 8B07                    	mov eax , [rdi]	
   131                                  	vV_push eax	
   131                              <1> 
   131 0000065E 418907              <1>  mov DWORD[vV_sp] , %1
   131 00000661 4983C704            <1>  add vV_sp , 4
   131                              <1> 
   132                                  
   133                                  ;OpADR: [13] ; PUSH opcode 
   134                                  
   135                                  	vV_push 0
   135                              <1> 
   135 00000665 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   135 0000066C 4983C704            <1>  add vV_sp , 4
   135                              <1> 
   136                                  
   137                                  ;OpADR: [14] ; Loop check 
   138                                  
   139                                  		vV_pop eax	;get index
   139                              <1> 
   139 00000670 4983EF04            <1>  sub vV_sp , 4
   139 00000674 418B07              <1>  mov %1 , [vV_sp]
   139                              <1> 
   140 00000677 50                      	push rax	
   141                                  	vV_pop eax	;get limit
   141                              <1> 
   141 00000678 4983EF04            <1>  sub vV_sp , 4
   141 0000067C 418B07              <1>  mov %1 , [vV_sp]
   141                              <1> 
   142 0000067F 50                      	push rax	
   143                                  
   144                                  
   145                                  
   146                                  	wblock_helloworld2:		
   147                                  
   148                                  ;------------------------------------------------------
   149                                  
   150                                  ;OpADR: [15] ; Var invocation
   151                                  
   152 00000680 4831C0                  		xor rax , rax
   153 00000683 488D7C2408              	lea rdi , [rsp+8]	
   154 00000688 4801C7                  	add rdi , rax	
   155 0000068B 8B07                    	mov eax , [rdi] 
   156                                  	vV_push eax	
   156                              <1> 
   156 0000068D 418907              <1>  mov DWORD[vV_sp] , %1
   156 00000690 4983C704            <1>  add vV_sp , 4
   156                              <1> 
   157                                  
   158                                  ;OpADR: [16] ; Var invocation
   159                                  
   160 00000694 488D3C25[C6010000]      		lea rdi , [i_global.line1]	
   161 0000069C 4831C0                  	xor rax , rax	
   162                                  	vV_pop ecx	
   162                              <1> 
   162 0000069F 4983EF04            <1>  sub vV_sp , 4
   162 000006A3 418B0F              <1>  mov %1 , [vV_sp]
   162                              <1> 
   163 000006A6 83F91F                  	cmp ecx , 31	
   164 000006A9 0F8DFBF9FFFF            	jge vV_bound_error	
   165 000006AF 01C8                    	add eax , ecx	
   166 000006B1 4801C7                  	add rdi , rax	
   167 000006B4 8A07                    	mov al , [rdi]	
   168                                  	vV_push eax	
   168                              <1> 
   168 000006B6 418907              <1>  mov DWORD[vV_sp] , %1
   168 000006B9 4983C704            <1>  add vV_sp , 4
   168                              <1> 
   169                                  
   170                                  ;OpADR: [17] ; OUT opcode (8)
   171                                  
   172 000006BD E814FCFFFF              	call vV_io_out_char_buffer
   173                                  
   174                                  ;OpADR: [18] ; ; Loop init 
   175                                  
   176 000006C2 FF442408                		inc DWORD[rsp + 8]
   177 000006C6 488B442408              	mov rax , [rsp + 8]	;get index
   178 000006CB 488B0C24                	mov rcx , [rsp]	;get max
   179 000006CF 39C8                    	cmp eax , ecx	
   180 000006D1 72AD                    	jb wblock_helloworld2	
   181                                  
   182                                  
   183                                  
   184                                  	wblock_helloworld3:		
   185                                  
   186                                  ;------------------------------------------------------
   187                                  
   188                                  ;OpADR: [19] ; Loop Cleanup 
   189                                  
   190 000006D3 4883C410                	add rsp , 16	
   191                                  
   192                                  ;OpADR: [20] ; FLUSH opcode
   193                                  
   194 000006D7 E839FBFFFF              	call vV_io_flush 
   195                                  
   196                                  ;OpADR: [21] ; PUSH opcode 
   197                                  
   198                                  	vV_push 2
   198                              <1> 
   198 000006DC 41C70702000000      <1>  mov DWORD[vV_sp] , %1
   198 000006E3 4983C704            <1>  add vV_sp , 4
   198                              <1> 
   199                                  
   200                                  ;OpADR: [22] ; Var invocation
   201                                  
   202 000006E7 488D3C25[2C010000]      		lea rdi , [i_global.sizes]	
   203 000006EF 4831C0                  	xor rax , rax	
   204                                  	vV_pop ecx	
   204                              <1> 
   204 000006F2 4983EF04            <1>  sub vV_sp , 4
   204 000006F6 418B0F              <1>  mov %1 , [vV_sp]
   204                              <1> 
   205 000006F9 83F906                  	cmp ecx , 6	
   206 000006FC 0F8DA8F9FFFF            	jge vV_bound_error	
   207 00000702 01C8                    	add eax , ecx	
   208 00000704 C1E002                  	shl eax , 2	
   209 00000707 4801C7                  	add rdi , rax	
   210 0000070A 8B07                    	mov eax , [rdi]	
   211                                  	vV_push eax	
   211                              <1> 
   211 0000070C 418907              <1>  mov DWORD[vV_sp] , %1
   211 0000070F 4983C704            <1>  add vV_sp , 4
   211                              <1> 
   212                                  
   213                                  ;OpADR: [23] ; PUSH opcode 
   214                                  
   215                                  	vV_push 0
   215                              <1> 
   215 00000713 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   215 0000071A 4983C704            <1>  add vV_sp , 4
   215                              <1> 
   216                                  
   217                                  ;OpADR: [24] ; Loop check 
   218                                  
   219                                  		vV_pop eax	;get index
   219                              <1> 
   219 0000071E 4983EF04            <1>  sub vV_sp , 4
   219 00000722 418B07              <1>  mov %1 , [vV_sp]
   219                              <1> 
   220 00000725 50                      	push rax	
   221                                  	vV_pop eax	;get limit
   221                              <1> 
   221 00000726 4983EF04            <1>  sub vV_sp , 4
   221 0000072A 418B07              <1>  mov %1 , [vV_sp]
   221                              <1> 
   222 0000072D 50                      	push rax	
   223                                  
   224                                  
   225                                  
   226                                  	wblock_helloworld4:		
   227                                  
   228                                  ;------------------------------------------------------
   229                                  
   230                                  ;OpADR: [25] ; Var invocation
   231                                  
   232 0000072E 4831C0                  		xor rax , rax
   233 00000731 488D7C2408              	lea rdi , [rsp+8]	
   234 00000736 4801C7                  	add rdi , rax	
   235 00000739 8B07                    	mov eax , [rdi] 
   236                                  	vV_push eax	
   236                              <1> 
   236 0000073B 418907              <1>  mov DWORD[vV_sp] , %1
   236 0000073E 4983C704            <1>  add vV_sp , 4
   236                              <1> 
   237                                  
   238                                  ;OpADR: [26] ; Var invocation
   239                                  
   240 00000742 488D3C25[B1010000]      		lea rdi , [i_global.line2]	
   241 0000074A 4831C0                  	xor rax , rax	
   242                                  	vV_pop ecx	
   242                              <1> 
   242 0000074D 4983EF04            <1>  sub vV_sp , 4
   242 00000751 418B0F              <1>  mov %1 , [vV_sp]
   242                              <1> 
   243 00000754 83F915                  	cmp ecx , 21	
   244 00000757 0F8D4DF9FFFF            	jge vV_bound_error	
   245 0000075D 01C8                    	add eax , ecx	
   246 0000075F 4801C7                  	add rdi , rax	
   247 00000762 8A07                    	mov al , [rdi]	
   248                                  	vV_push eax	
   248                              <1> 
   248 00000764 418907              <1>  mov DWORD[vV_sp] , %1
   248 00000767 4983C704            <1>  add vV_sp , 4
   248                              <1> 
   249                                  
   250                                  ;OpADR: [27] ; OUT opcode (8)
   251                                  
   252 0000076B E866FBFFFF              	call vV_io_out_char_buffer
   253                                  
   254                                  ;OpADR: [28] ; ; Loop init 
   255                                  
   256 00000770 FF442408                		inc DWORD[rsp + 8]
   257 00000774 488B442408              	mov rax , [rsp + 8]	;get index
   258 00000779 488B0C24                	mov rcx , [rsp]	;get max
   259 0000077D 39C8                    	cmp eax , ecx	
   260 0000077F 72AD                    	jb wblock_helloworld4	
   261                                  
   262                                  
   263                                  
   264                                  	wblock_helloworld5:		
   265                                  
   266                                  ;------------------------------------------------------
   267                                  
   268                                  ;OpADR: [29] ; Loop Cleanup 
   269                                  
   270 00000781 4883C410                	add rsp , 16	
   271                                  
   272                                  ;OpADR: [30] ; FLUSH opcode
   273                                  
   274 00000785 E88BFAFFFF              	call vV_io_flush 
   275                                  
   276                                  ;OpADR: [31] ; PUSH opcode 
   277                                  
   278                                  	vV_push 3
   278                              <1> 
   278 0000078A 41C70703000000      <1>  mov DWORD[vV_sp] , %1
   278 00000791 4983C704            <1>  add vV_sp , 4
   278                              <1> 
   279                                  
   280                                  ;OpADR: [32] ; Var invocation
   281                                  
   282 00000795 488D3C25[2C010000]      		lea rdi , [i_global.sizes]	
   283 0000079D 4831C0                  	xor rax , rax	
   284                                  	vV_pop ecx	
   284                              <1> 
   284 000007A0 4983EF04            <1>  sub vV_sp , 4
   284 000007A4 418B0F              <1>  mov %1 , [vV_sp]
   284                              <1> 
   285 000007A7 83F906                  	cmp ecx , 6	
   286 000007AA 0F8DFAF8FFFF            	jge vV_bound_error	
   287 000007B0 01C8                    	add eax , ecx	
   288 000007B2 C1E002                  	shl eax , 2	
   289 000007B5 4801C7                  	add rdi , rax	
   290 000007B8 8B07                    	mov eax , [rdi]	
   291                                  	vV_push eax	
   291                              <1> 
   291 000007BA 418907              <1>  mov DWORD[vV_sp] , %1
   291 000007BD 4983C704            <1>  add vV_sp , 4
   291                              <1> 
   292                                  
   293                                  ;OpADR: [33] ; PUSH opcode 
   294                                  
   295                                  	vV_push 0
   295                              <1> 
   295 000007C1 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   295 000007C8 4983C704            <1>  add vV_sp , 4
   295                              <1> 
   296                                  
   297                                  ;OpADR: [34] ; Loop check 
   298                                  
   299                                  		vV_pop eax	;get index
   299                              <1> 
   299 000007CC 4983EF04            <1>  sub vV_sp , 4
   299 000007D0 418B07              <1>  mov %1 , [vV_sp]
   299                              <1> 
   300 000007D3 50                      	push rax	
   301                                  	vV_pop eax	;get limit
   301                              <1> 
   301 000007D4 4983EF04            <1>  sub vV_sp , 4
   301 000007D8 418B07              <1>  mov %1 , [vV_sp]
   301                              <1> 
   302 000007DB 50                      	push rax	
   303                                  
   304                                  
   305                                  
   306                                  	wblock_helloworld6:		
   307                                  
   308                                  ;------------------------------------------------------
   309                                  
   310                                  ;OpADR: [35] ; Var invocation
   311                                  
   312 000007DC 4831C0                  		xor rax , rax
   313 000007DF 488D7C2408              	lea rdi , [rsp+8]	
   314 000007E4 4801C7                  	add rdi , rax	
   315 000007E7 8B07                    	mov eax , [rdi] 
   316                                  	vV_push eax	
   316                              <1> 
   316 000007E9 418907              <1>  mov DWORD[vV_sp] , %1
   316 000007EC 4983C704            <1>  add vV_sp , 4
   316                              <1> 
   317                                  
   318                                  ;OpADR: [36] ; Var invocation
   319                                  
   320 000007F0 488D3C25[97010000]      		lea rdi , [i_global.line3]	
   321 000007F8 4831C0                  	xor rax , rax	
   322                                  	vV_pop ecx	
   322                              <1> 
   322 000007FB 4983EF04            <1>  sub vV_sp , 4
   322 000007FF 418B0F              <1>  mov %1 , [vV_sp]
   322                              <1> 
   323 00000802 83F91A                  	cmp ecx , 26	
   324 00000805 0F8D9FF8FFFF            	jge vV_bound_error	
   325 0000080B 01C8                    	add eax , ecx	
   326 0000080D 4801C7                  	add rdi , rax	
   327 00000810 8A07                    	mov al , [rdi]	
   328                                  	vV_push eax	
   328                              <1> 
   328 00000812 418907              <1>  mov DWORD[vV_sp] , %1
   328 00000815 4983C704            <1>  add vV_sp , 4
   328                              <1> 
   329                                  
   330                                  ;OpADR: [37] ; OUT opcode (8)
   331                                  
   332 00000819 E8B8FAFFFF              	call vV_io_out_char_buffer
   333                                  
   334                                  ;OpADR: [38] ; ; Loop init 
   335                                  
   336 0000081E FF442408                		inc DWORD[rsp + 8]
   337 00000822 488B442408              	mov rax , [rsp + 8]	;get index
   338 00000827 488B0C24                	mov rcx , [rsp]	;get max
   339 0000082B 39C8                    	cmp eax , ecx	
   340 0000082D 72AD                    	jb wblock_helloworld6	
   341                                  
   342                                  
   343                                  
   344                                  	wblock_helloworld7:		
   345                                  
   346                                  ;------------------------------------------------------
   347                                  
   348                                  ;OpADR: [39] ; Loop Cleanup 
   349                                  
   350 0000082F 4883C410                	add rsp , 16	
   351                                  
   352                                  ;OpADR: [40] ; FLUSH opcode
   353                                  
   354 00000833 E8DDF9FFFF              	call vV_io_flush 
   355                                  
   356                                  ;OpADR: [41] ; PUSH opcode 
   357                                  
   358                                  	vV_push 4
   358                              <1> 
   358 00000838 41C70704000000      <1>  mov DWORD[vV_sp] , %1
   358 0000083F 4983C704            <1>  add vV_sp , 4
   358                              <1> 
   359                                  
   360                                  ;OpADR: [42] ; Var invocation
   361                                  
   362 00000843 488D3C25[2C010000]      		lea rdi , [i_global.sizes]	
   363 0000084B 4831C0                  	xor rax , rax	
   364                                  	vV_pop ecx	
   364                              <1> 
   364 0000084E 4983EF04            <1>  sub vV_sp , 4
   364 00000852 418B0F              <1>  mov %1 , [vV_sp]
   364                              <1> 
   365 00000855 83F906                  	cmp ecx , 6	
   366 00000858 0F8D4CF8FFFF            	jge vV_bound_error	
   367 0000085E 01C8                    	add eax , ecx	
   368 00000860 C1E002                  	shl eax , 2	
   369 00000863 4801C7                  	add rdi , rax	
   370 00000866 8B07                    	mov eax , [rdi]	
   371                                  	vV_push eax	
   371                              <1> 
   371 00000868 418907              <1>  mov DWORD[vV_sp] , %1
   371 0000086B 4983C704            <1>  add vV_sp , 4
   371                              <1> 
   372                                  
   373                                  ;OpADR: [43] ; PUSH opcode 
   374                                  
   375                                  	vV_push 0
   375                              <1> 
   375 0000086F 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   375 00000876 4983C704            <1>  add vV_sp , 4
   375                              <1> 
   376                                  
   377                                  ;OpADR: [44] ; Loop check 
   378                                  
   379                                  		vV_pop eax	;get index
   379                              <1> 
   379 0000087A 4983EF04            <1>  sub vV_sp , 4
   379 0000087E 418B07              <1>  mov %1 , [vV_sp]
   379                              <1> 
   380 00000881 50                      	push rax	
   381                                  	vV_pop eax	;get limit
   381                              <1> 
   381 00000882 4983EF04            <1>  sub vV_sp , 4
   381 00000886 418B07              <1>  mov %1 , [vV_sp]
   381                              <1> 
   382 00000889 50                      	push rax	
   383                                  
   384                                  
   385                                  
   386                                  	wblock_helloworld8:		
   387                                  
   388                                  ;------------------------------------------------------
   389                                  
   390                                  ;OpADR: [45] ; Var invocation
   391                                  
   392 0000088A 4831C0                  		xor rax , rax
   393 0000088D 488D7C2408              	lea rdi , [rsp+8]	
   394 00000892 4801C7                  	add rdi , rax	
   395 00000895 8B07                    	mov eax , [rdi] 
   396                                  	vV_push eax	
   396                              <1> 
   396 00000897 418907              <1>  mov DWORD[vV_sp] , %1
   396 0000089A 4983C704            <1>  add vV_sp , 4
   396                              <1> 
   397                                  
   398                                  ;OpADR: [46] ; Var invocation
   399                                  
   400 0000089E 488D3C25[67010000]      		lea rdi , [i_global.line4]	
   401 000008A6 4831C0                  	xor rax , rax	
   402                                  	vV_pop ecx	
   402                              <1> 
   402 000008A9 4983EF04            <1>  sub vV_sp , 4
   402 000008AD 418B0F              <1>  mov %1 , [vV_sp]
   402                              <1> 
   403 000008B0 83F930                  	cmp ecx , 48	
   404 000008B3 0F8DF1F7FFFF            	jge vV_bound_error	
   405 000008B9 01C8                    	add eax , ecx	
   406 000008BB 4801C7                  	add rdi , rax	
   407 000008BE 8A07                    	mov al , [rdi]	
   408                                  	vV_push eax	
   408                              <1> 
   408 000008C0 418907              <1>  mov DWORD[vV_sp] , %1
   408 000008C3 4983C704            <1>  add vV_sp , 4
   408                              <1> 
   409                                  
   410                                  ;OpADR: [47] ; OUT opcode (8)
   411                                  
   412 000008C7 E80AFAFFFF              	call vV_io_out_char_buffer
   413                                  
   414                                  ;OpADR: [48] ; ; Loop init 
   415                                  
   416 000008CC FF442408                		inc DWORD[rsp + 8]
   417 000008D0 488B442408              	mov rax , [rsp + 8]	;get index
   418 000008D5 488B0C24                	mov rcx , [rsp]	;get max
   419 000008D9 39C8                    	cmp eax , ecx	
   420 000008DB 72AD                    	jb wblock_helloworld8	
   421                                  
   422                                  
   423                                  
   424                                  	wblock_helloworld9:		
   425                                  
   426                                  ;------------------------------------------------------
   427                                  
   428                                  ;OpADR: [49] ; Loop Cleanup 
   429                                  
   430 000008DD 4883C410                	add rsp , 16	
   431                                  
   432                                  ;OpADR: [50] ; FLUSH opcode
   433                                  
   434 000008E1 E82FF9FFFF              	call vV_io_flush 
   435                                  
   436                                  ;OpADR: [51] ; PUSH opcode 
   437                                  
   438                                  	vV_push 5
   438                              <1> 
   438 000008E6 41C70705000000      <1>  mov DWORD[vV_sp] , %1
   438 000008ED 4983C704            <1>  add vV_sp , 4
   438                              <1> 
   439                                  
   440                                  ;OpADR: [52] ; Var invocation
   441                                  
   442 000008F1 488D3C25[2C010000]      		lea rdi , [i_global.sizes]	
   443 000008F9 4831C0                  	xor rax , rax	
   444                                  	vV_pop ecx	
   444                              <1> 
   444 000008FC 4983EF04            <1>  sub vV_sp , 4
   444 00000900 418B0F              <1>  mov %1 , [vV_sp]
   444                              <1> 
   445 00000903 83F906                  	cmp ecx , 6	
   446 00000906 0F8D9EF7FFFF            	jge vV_bound_error	
   447 0000090C 01C8                    	add eax , ecx	
   448 0000090E C1E002                  	shl eax , 2	
   449 00000911 4801C7                  	add rdi , rax	
   450 00000914 8B07                    	mov eax , [rdi]	
   451                                  	vV_push eax	
   451                              <1> 
   451 00000916 418907              <1>  mov DWORD[vV_sp] , %1
   451 00000919 4983C704            <1>  add vV_sp , 4
   451                              <1> 
   452                                  
   453                                  ;OpADR: [53] ; PUSH opcode 
   454                                  
   455                                  	vV_push 0
   455                              <1> 
   455 0000091D 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   455 00000924 4983C704            <1>  add vV_sp , 4
   455                              <1> 
   456                                  
   457                                  ;OpADR: [54] ; Loop check 
   458                                  
   459                                  		vV_pop eax	;get index
   459                              <1> 
   459 00000928 4983EF04            <1>  sub vV_sp , 4
   459 0000092C 418B07              <1>  mov %1 , [vV_sp]
   459                              <1> 
   460 0000092F 50                      	push rax	
   461                                  	vV_pop eax	;get limit
   461                              <1> 
   461 00000930 4983EF04            <1>  sub vV_sp , 4
   461 00000934 418B07              <1>  mov %1 , [vV_sp]
   461                              <1> 
   462 00000937 50                      	push rax	
   463                                  
   464                                  
   465                                  
   466                                  	wblock_helloworld10:		
   467                                  
   468                                  ;------------------------------------------------------
   469                                  
   470                                  ;OpADR: [55] ; Var invocation
   471                                  
   472 00000938 4831C0                  		xor rax , rax
   473 0000093B 488D7C2408              	lea rdi , [rsp+8]	
   474 00000940 4801C7                  	add rdi , rax	
   475 00000943 8B07                    	mov eax , [rdi] 
   476                                  	vV_push eax	
   476                              <1> 
   476 00000945 418907              <1>  mov DWORD[vV_sp] , %1
   476 00000948 4983C704            <1>  add vV_sp , 4
   476                              <1> 
   477                                  
   478                                  ;OpADR: [56] ; Var invocation
   479                                  
   480 0000094C 488D3C25[44010000]      		lea rdi , [i_global.line5]	
   481 00000954 4831C0                  	xor rax , rax	
   482                                  	vV_pop ecx	
   482                              <1> 
   482 00000957 4983EF04            <1>  sub vV_sp , 4
   482 0000095B 418B0F              <1>  mov %1 , [vV_sp]
   482                              <1> 
   483 0000095E 83F923                  	cmp ecx , 35	
   484 00000961 0F8D43F7FFFF            	jge vV_bound_error	
   485 00000967 01C8                    	add eax , ecx	
   486 00000969 4801C7                  	add rdi , rax	
   487 0000096C 8A07                    	mov al , [rdi]	
   488                                  	vV_push eax	
   488                              <1> 
   488 0000096E 418907              <1>  mov DWORD[vV_sp] , %1
   488 00000971 4983C704            <1>  add vV_sp , 4
   488                              <1> 
   489                                  
   490                                  ;OpADR: [57] ; OUT opcode (8)
   491                                  
   492 00000975 E85CF9FFFF              	call vV_io_out_char_buffer
   493                                  
   494                                  ;OpADR: [58] ; ; Loop init 
   495                                  
   496 0000097A FF442408                		inc DWORD[rsp + 8]
   497 0000097E 488B442408              	mov rax , [rsp + 8]	;get index
   498 00000983 488B0C24                	mov rcx , [rsp]	;get max
   499 00000987 39C8                    	cmp eax , ecx	
   500 00000989 72AD                    	jb wblock_helloworld10	
   501                                  
   502                                  
   503                                  
   504                                  	wblock_helloworld11:		
   505                                  
   506                                  ;------------------------------------------------------
   507                                  
   508                                  ;OpADR: [59] ; Loop Cleanup 
   509                                  
   510 0000098B 4883C410                	add rsp , 16	
   511                                  
   512                                  ;OpADR: [60] ; FLUSH opcode
   513                                  
   514 0000098F E881F8FFFF              	call vV_io_flush 
   515                                  
   516                                  		
   517 00000994 4889EC                  		mov rsp , rbp
   518 00000997 5D                      		pop rbp
   519 00000998 C3                      		ret
   520                                  
   521                                  ;Transpiled from vV with vVc version 0.0.4.5
   522                                  		
   523                                  		
