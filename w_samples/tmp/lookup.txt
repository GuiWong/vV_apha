     1                                  %include "vVc/assembly/w_runtime/vV_defines.asm"		
     1                              <1> 
     2                              <1> %deftok vV_sp 'r15'
     3                              <1> 
     4                              <1> %deftok vV_spS 'r14'
     5                              <1> 
     6                              <1> %deftok vV_sdir '-'
     7                              <1> 
     8                              <1> 
     9                              <1> %define cell(a) (a*4)
    10                              <1> 
    11                              <1> 
    12                              <1> %define vV_top [vV_sp vV_sdir %+ cell(1)]
    13                              <1> %define vV_2nd [vV_sp vV_sdir %+ cell(2)]
    14                              <1> 
    15                              <1> %define vV_stack_v(a) ([vV_sp vV_sdir %+ cell(a)])
    16                              <1> 
    17                              <1> 
    18                              <1> 
    19                              <1> %deftok vV_FORMAT_BIN "vV_ascii_int_to_bin"
    20                              <1> %deftok vV_FORMAT_DEC "vV_ascii_int_to_dec"
    21                              <1> %deftok vV_FORMAT_HEX "vV_ascii_int_to_hex"
    22                              <1> 
    23                              <1> 
    24                              <1> 
    25                              <1> %macro vV_push 1
    26                              <1> 
    27                              <1> 	mov DWORD[vV_sp] , %1
    28                              <1> 	add vV_sp , 4
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro vV_pop 1
    33                              <1> 
    34                              <1> 	sub vV_sp , 4
    35                              <1> 	mov %1 , [vV_sp]
    36                              <1> 	
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> %macro vV_swap 0
    40                              <1> 
    41                              <1> 	mov edx , [vV_sp-4]
    42                              <1> 	mov eax , [vV_sp-8]
    43                              <1> 	mov [vV_sp-8] , edx 
    44                              <1> 	mov [vV_sp-4] , eax 
    45                              <1> 	
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro vV_dup 1
    49                              <1> 
    50                              <1> 	mov ecx , %1
    51                              <1> 	lea rsi , [vV_sp-cell(%1)]
    52                              <1> 	mov rdi , vV_sp
    53                              <1> 		
    54                              <1> 	rep movsd
    55                              <1> 	
    56                              <1> 	add vV_sp , cell(%1)
    57                              <1> 	
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> 
    61                              <1> %macro vV_dec_sp 1
    62                              <1> 
    63                              <1> 	sub vV_sp , cell(%1)
    64                              <1> 	
    65                              <1> %endmacro
    66                              <1> 	
     2                                  %include "vVc/assembly/w_runtime/vV_io.asm"			
     1                              <1> 
     2                              <1> 
     3                              <1> %include "vVc/assembly/w_runtime/vV_ascii.asm"
     1                              <2> 
     2                              <2> 
     3                              <2> segment .text 
     4                              <2> 
     5                              <2> 
     6                              <2> 
     7                              <2> 
     8                              <2> vV_ascii_as_hex2:						;Jumped to from parse_num OR called
     9                              <2> 								;use edi as counter/offset in string !Set if direct call
    10                              <2> 								;use esi as source string
    11                              <2> 								;concatenate result in eax
    12                              <2> 								;parse digit in cl
    13                              <2> 								
    14                              <2> 								;use r8 for base
    15                              <2> 								;use r9 for max_value
    16                              <2> 								
    17                              <2> 							
    18                              <2> 	;mov r8 , 16	
    19                              <2> 	
    20                              <2> 	.start_loop:
    21                              <2> 	
    22 00000000 678A0C3E            <2> 		mov cl , [esi + edi]
    23                              <2> 	
    24                              <2> 		
    25 00000004 80F930              <2> 		cmp cl , 48
    26                              <2> 		
    27 00000007 7265                <2> 			jb vV_ascii_unvalid
    28                              <2> 			
    29 00000009 80F93A              <2> 		cmp cl , 58
    30                              <2> 		
    31 0000000C 720D                <2> 			jb .pass_int
    32                              <2> 			
    33 0000000E 80F966              <2> 			cmp cl , 'f'
    34                              <2> 			
    35 00000011 775B                <2> 				ja vV_ascii_unvalid
    36                              <2> 			
    37 00000013 80F961              <2> 			cmp cl , 'a'
    38                              <2> 			
    39 00000016 7256                <2> 				jb vV_ascii_unvalid
    40                              <2> 				
    41 00000018 80E927              <2> 			sub cl , 39
    42                              <2> 				
    43                              <2> 			
    44                              <2> 		.pass_int:	
    45                              <2> 			
    46 0000001B 80E930              <2> 		sub cl , '0'
    47                              <2> 		
    48                              <2> 		
    49                              <2> 		
    50 0000001E 31D2                <2> 		xor edx , edx
    51                              <2> 		
    52 00000020 F8                  <2> 		clc
    53                              <2> 		
    54 00000021 41F7E0              <2> 		mul r8d
    55                              <2> 		
    56 00000024 7257                <2> 		jc vV_ascii_overflow
    57                              <2> 		
    58 00000026 01C8                <2> 		add eax , ecx
    59                              <2> 		
    60                              <2> 		.pass02:
    61                              <2> 		
    62 00000028 FFC7                <2> 		inc edi
    63                              <2> 		
    64 0000002A 39DF                <2> 		cmp edi , ebx
    65                              <2> 		
    66 0000002C 72D2                <2> 		jb .start_loop
    67                              <2> 
    68                              <2> 		
    69 0000002E C3                  <2> 		ret	
    70                              <2> 		
    71                              <2> 		
    72                              <2> ;
    73                              <2> ;				ebx		esi
    74                              <2> ;	ascii_to_format( buffer_size , buffer_adress ) 
    75                              <2> ;		
    76                              <2> ;
    77                              <2> ;	set:	rcx,rdx (rax) to 0
    78                              <2> ;		r8,r9
    79                              <2> ;		
    80                              <2> ;	call: specialized dexodefunction
    81                              <2> 		
    82                              <2> vV_ascii_as_hex:
    83                              <2> 	
    84 0000002F FFCB                <2> 	dec ebx
    85 00000031 41B810000000        <2> 	mov r8 , 16	
    86 00000037 4831C0              <2> 	xor rax , rax 		;(just in case not switching from dec mode)			
    87 0000003A 4831C9              <2> 	xor rcx , rcx
    88 0000003D 4831D2              <2> 	xor rdx , rdx
    89 00000040 EBBE                <2> 	jmp vV_ascii_as_hex2
    90                              <2> 
    91                              <2> vV_ascii_as_dec:
    92                              <2> 
    93 00000042 FFCB                <2> 	dec ebx
    94 00000044 41B80A000000        <2> 	mov r8 , 10			
    95 0000004A 41B93A000000        <2> 	mov r9 , 58
    96 00000050 4831C9              <2> 	xor rcx , rcx
    97 00000053 4831D2              <2> 	xor rdx , rdx
    98 00000056 EB47                <2> 	jmp vV_ascii_as_decbin
    99                              <2> 
   100                              <2> vV_ascii_as_bin:
   101                              <2> 
   102 00000058 FFCB                <2> 	dec ebx
   103 0000005A 41B802000000        <2> 	mov r8 , 2			
   104 00000060 41B932000000        <2> 	mov r9 , 50
   105 00000066 4831C9              <2> 	xor rcx , rcx
   106 00000069 4831D2              <2> 	xor rdx , rdx
   107                              <2> 	
   108 0000006C EB31                <2> 	jmp vV_ascii_as_decbin
   109                              <2> 	
   110                              <2> vV_ascii_unvalid:
   111                              <2> 	
   112 0000006E B818000000          <2> 		mov rax , 24;	#TODO: Defined Errors code/ data in file
   113 00000073 4831D2              <2> 		xor rdx , rdx
   114 00000076 88CA                <2> 		mov dl , cl
   115                              <2> 		
   116 00000078 E800030000          <2> 		call w_forced_exit
   117                              <2> 		
   118                              <2> vV_ascii_overflow:
   119                              <2> 	
   120 0000007D B819000000          <2> 		mov rax , 25;	#TODO: Defined Errors code/ data in file
   121                              <2> 		;xor rdx , rdx
   122                              <2> 		;mov dl , cl
   123                              <2> 		
   124 00000082 E8F6020000          <2> 		call w_forced_exit
   125                              <2> 		
   126                              <2> 		
   127                              <2> vV_ascii_change_to_hex:
   128                              <2> 		
   129 00000087 83F800              <2> 		cmp eax , 0
   130                              <2> 			
   131 0000008A 75E2                <2> 			jne vV_ascii_unvalid
   132                              <2> 			
   133 0000008C 41B810000000        <2> 		mov r8 , 16
   134 00000092 4831C9              <2> 		xor rcx , rcx
   135 00000095 4831C0              <2> 		xor rax ,rax
   136                              <2> 				
   137 00000098 FFC7                <2> 		inc edi
   138 0000009A E961FFFFFF          <2> 		jmp vV_ascii_as_hex2		
   139                              <2> 		
   140                              <2> 	
   141                              <2> 
   142                              <2> 
   143                              <2> vV_ascii_as_decbin:						;ebx: number of char to read
   144                              <2> 
   145                              <2> 	
   146                              <2> 
   147                              <2> 								;use edi as counter/offset in string
   148                              <2> 								;concatenate result in eax
   149                              <2> 								;parse digit in cl
   150                              <2> 								
   151                              <2> 								;use r8 for base
   152                              <2> 								;use r9 for max_value					
   153                              <2> 								;itou
   154                              <2> 	;xor edi, edi			;should be set by caller
   155 0000009F 4831C0              <2> 	xor rax , rax
   156                              <2> 	
   157 000000A2 4831C9              <2> 	xor rcx , rcx
   158                              <2> 	
   159 000000A5 4831D2              <2> 	xor rdx , rdx
   160                              <2> 	
   161                              <2> 	
   162                              <2> 	.start_loop:
   163                              <2> 	
   164 000000A8 678A0C3E            <2> 		mov cl , [esi + edi]
   165                              <2> 		
   166                              <2> 		
   167 000000AC 80F962              <2> 		cmp cl , 'b'										
   168 000000AF 7513                <2> 			jne .pass01
   169                              <2> 		
   170                              <2> 		.format_change:
   171                              <2> 			
   172 000000B1 83F800              <2> 			cmp eax , 0
   173                              <2> 			
   174 000000B4 75B8                <2> 				jne vV_ascii_unvalid
   175                              <2> 				
   176 000000B6 41B802000000        <2> 			mov r8 , 2
   177                              <2> 			
   178 000000BC 41B932000000        <2> 			mov r9 , 50
   179                              <2> 	
   180 000000C2 EB22                <2> 			jmp .pass02
   181                              <2> 		
   182                              <2> 		
   183                              <2> 	
   184                              <2> 		.pass01:
   185                              <2> 		
   186 000000C4 80F968              <2> 		cmp cl , 'h'											
   187 000000C7 74BE                <2> 			je vV_ascii_change_to_hex
   188 000000C9 80F978              <2> 		cmp cl , 'x'											
   189 000000CC 74B9                <2> 			je vV_ascii_change_to_hex
   190                              <2> 			
   191                              <2> 			
   192 000000CE 4438C9              <2> 		cmp cl , r9b
   193                              <2> 		
   194 000000D1 739B                <2> 			jae vV_ascii_unvalid
   195                              <2> 		
   196 000000D3 80F930              <2> 		cmp cl , 48
   197                              <2> 		
   198 000000D6 7296                <2> 			jb vV_ascii_unvalid
   199                              <2> 			
   200                              <2> 		
   201                              <2> 			
   202 000000D8 80E930              <2> 		sub cl , 48
   203                              <2> 		
   204 000000DB 4831D2              <2> 		xor rdx , rdx
   205 000000DE F8                  <2> 		clc
   206                              <2> 		
   207 000000DF 41F7E0              <2> 		mul r8d
   208                              <2> 		
   209 000000E2 7299                <2> 		jc vV_ascii_overflow
   210                              <2> 		
   211 000000E4 01C8                <2> 		add eax , ecx
   212                              <2> 		
   213                              <2> 		.pass02:
   214                              <2> 		
   215 000000E6 FFC7                <2> 		inc edi
   216                              <2> 		
   217 000000E8 39DF                <2> 		cmp edi , ebx
   218                              <2> 		
   219 000000EA 72BC                <2> 		jb .start_loop
   220                              <2> 		
   221                              <2> 		
   222 000000EC C3                  <2> 		ret			; result should be in eax
   223                              <2> 		
   224                              <2> 
   225                              <2> 	
   226                              <2> ;------------------------------------------------------------------------------------------
   227                              <2> ;------------------------------------------------------------------------------------------
   228                              <2> 
   229                              <2> 
   230                              <2> 
   231                              <2> vV_ascii_int_to_hex:					;value in eax
   232                              <2> 						;dest in rdi
   233                              <2> 
   234                              <2> 
   235                              <2> 
   236 000000ED 31C9                <2> 	xor ecx , ecx	
   237                              <2> 	
   238 000000EF BE10000000          <2> 	mov esi , 16
   239                              <2> 
   240                              <2> 	
   241                              <2> 	.loop01:
   242                              <2> 	
   243 000000F4 4831D2              <2> 		xor rdx , rdx
   244                              <2> 		
   245 000000F7 F7F6                <2> 		div esi
   246                              <2> 		
   247                              <2> 		
   248 000000F9 80FA0A              <2> 		cmp dl , 10
   249                              <2> 		
   250 000000FC 7203                <2> 		jb .dec
   251                              <2> 		
   252 000000FE 80C207              <2> 			add dl , 7
   253                              <2> 		
   254                              <2> 		.dec:
   255                              <2> 		
   256 00000101 80C230              <2> 			add dl , '0'
   257                              <2> 		
   258                              <2> 		
   259 00000104 52                  <2> 		push rdx
   260                              <2> 		
   261 00000105 FFC1                <2> 		inc ecx
   262                              <2> 		
   263 00000107 39F0                <2> 		cmp eax , esi
   264                              <2> 		
   265 00000109 73E9                <2> 		jae .loop01
   266                              <2> 	
   267                              <2> 	
   268 0000010B 3C0A                <2> 	cmp al , 10
   269                              <2> 		
   270 0000010D 7202                <2> 		jb .dec2
   271                              <2> 		
   272 0000010F 0407                <2> 			add al , 7
   273                              <2> 		
   274                              <2> 		.dec2:
   275                              <2> 		
   276 00000111 0430                <2> 			add al , '0'	
   277 00000113 8807                <2> 	mov [rdi] , al
   278                              <2> 	
   279 00000115 EB1B                <2> 	jmp vV_ascii_pop_digits
   280                              <2> 		
   281                              <2> 	
   282                              <2> 	
   283                              <2> 	
   284                              <2> vV_ascii_int_to_dec:					;value in eax
   285                              <2> 						;dest in rdi
   286                              <2> 						;max_dest_size in r9d
   287                              <2> 
   288                              <2> 
   289                              <2> 
   290 00000117 31C9                <2> 	xor ecx , ecx	
   291                              <2> 	
   292 00000119 BE0A000000          <2> 	mov esi , 10
   293                              <2> 	
   294                              <2> 
   295                              <2> 
   296                              <2> 	
   297                              <2> 	.loop01:
   298                              <2> 	
   299 0000011E 4831D2              <2> 		xor rdx , rdx
   300                              <2> 		
   301 00000121 F7F6                <2> 		div esi
   302                              <2> 		
   303                              <2> 		
   304 00000123 80C230              <2> 		add dl , '0'
   305 00000126 52                  <2> 		push rdx
   306                              <2> 		
   307 00000127 FFC1                <2> 		inc ecx
   308                              <2> 		
   309 00000129 83F80A              <2> 		cmp eax , 10
   310                              <2> 		
   311 0000012C 73F0                <2> 		jae .loop01
   312                              <2> 	
   313 0000012E 0430                <2> 	add al , '0'	
   314 00000130 8807                <2> 	mov [rdi] , al
   315                              <2> 		
   316                              <2> 	
   317                              <2> 		
   318                              <2> vV_ascii_pop_digits:			; Need nb of digits currently on stack(ecx)
   319                              <2> 						;dest in rdi
   320 00000132 41B801000000        <2> 		mov r8d , 1
   321 00000138 FFC1                <2> 		inc ecx
   322                              <2> 		
   323 0000013A 4439C9              <2> 		cmp ecx , r9d
   324                              <2> 		
   325 0000013D 7212                <2> 		jb .loopstart
   326                              <2> 		
   327                              <2> 	
   328 0000013F B81A000000          <2> 			mov rax , 26;	#TODO: Defined Errors code/ data in file
   329 00000144 4831D2              <2> 			xor rdx , rdx
   330 00000147 89CA                <2> 			mov edx , ecx
   331 00000149 4489C9              <2> 			mov ecx , r9d
   332                              <2> 		
   333 0000014C E82C020000          <2> 			call w_forced_exit
   334                              <2> 		
   335                              <2> 						
   336                              <2> 		.loopstart:
   337                              <2> 		
   338 00000151 5A                  <2> 			pop rdx
   339 00000152 6742881407          <2> 			mov BYTE[edi + r8d] , dl
   340 00000157 41FFC0              <2> 			inc r8d
   341                              <2> 			
   342 0000015A 4139C8              <2> 			cmp r8d , ecx
   343                              <2> 		
   344 0000015D 72F2                <2> 		jb .loopstart
   345                              <2> 	
   346                              <2> 	
   347 0000015F 89C8                <2> 		mov eax , ecx
   348                              <2> 		
   349 00000161 C3                  <2> 		ret	
   350                              <2> 	
   351                              <2> 	
   352                              <2> vV_ascii_int_to_bin:					;value in eax, 
   353                              <2> 							
   354                              <2> 
   355                              <2> 
   356 00000162 31C9                <2> 	xor ecx , ecx
   357                              <2> 	
   358                              <2> 	
   359                              <2> 	.loop01:
   360                              <2> 	
   361                              <2> 		
   362 00000164 D1E8                <2> 		shr eax , 1
   363                              <2> 		
   364 00000166 7205                <2> 		jc .one
   365                              <2> 		
   366 00000168 B230                <2> 			mov dl , '0'
   367 0000016A 52                  <2> 			push rdx
   368                              <2> 			
   369 0000016B EB03                <2> 		jmp .next
   370                              <2> 		.one:
   371                              <2> 			
   372 0000016D B231                <2> 			mov dl , '1'
   373 0000016F 52                  <2> 			push rdx
   374                              <2> 		
   375                              <2> 		.next:
   376                              <2> 		
   377 00000170 FFC1                <2> 		inc ecx
   378                              <2> 		
   379 00000172 83F801              <2> 		cmp eax , 1
   380                              <2> 		
   381 00000175 73ED                <2> 		jae .loop01
   382                              <2> 	
   383                              <2> 	;add al , '1'	
   384                              <2> 	;mov [rdi] , al
   385                              <2> 	
   386 00000177 EBB9                <2> 	jmp vV_ascii_pop_digits
   387                              <2> 	
   388                              <2> 	
   389                              <2> ;Will need a special version for String stack
   390                              <2> 
   391                              <2> 
   392                              <2> 
   393                              <2> 
   394                              <2> 
   395                              <2> 
   396                              <2> 
     4                              <1> 
     5                              <1> 
     6                              <1> ;Group all read/wrie syscalls
     7                              <1> 
     8                              <1> ;global convert_to_string
     9                              <1> ;global convert_to_int
    10                              <1> 
    11                              <1> ;extern w_input_buffer
    12                              <1> ;extern w_output_buffer
    13                              <1> ;extern w_number_buffer
    14                              <1> 
    15                              <1> global wio_out
    16                              <1> global wio_get
    17                              <1> global wio_get_str_raw
    18                              <1> global wio_get_str_null
    19                              <1> global wio_get_str_nline
    20                              <1> global wio_move_in_to_out
    21                              <1> 
    22                              <1> 
    23                              <1> segment .text 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> 
    28                              <1> 
    29                              <1> 	vV_io_flush:
    30                              <1> 	
    31                              <1> 	
    32                              <1> 	
    33 00000179 8B1425[47010000]    <1> 		mov edx , DWORD[wout_count]			;string lenght	
    34 00000180 48BE-               <1> 		mov rsi , w_output_buffer			;strng ptr
    34 00000182 [4B01000000000000]  <1>
    35                              <1> 		
    36                              <1> 		;dec edx			
    37                              <1> 		;dec edx
    38                              <1> 		
    39 0000018A 67C682[4B010000]0A  <1> 		mov BYTE[w_output_buffer + edx] , 0xa
    40 00000192 FFC2                <1> 		inc edx
    41                              <1> 		
    42 00000194 BF01000000          <1> 		mov rdi , 1					;file descriptor, stdout
    43 00000199 B801000000          <1> 		mov rax , 1					; Write sysCall
    44 0000019E 0F05                <1> 		syscall
    45                              <1> 	
    46 000001A0 C3                  <1> 		ret
    47                              <1> 
    48                              <1> 
    49                              <1> 
    50                              <1> 
    51                              <1> 
    52                              <1> 
    53                              <1> 	wio_out_buff:				; print top of data stack (int->str)
    54                              <1> 	
    55 000001A1 4983EF04            <1> 		sub r15 , 4
    56                              <1> 	
    57 000001A5 418B07              <1> 		mov eax, [r15]				;set rax to top of dstack
    58                              <1> 		
    59                              <1> 		
    60                              <1> 		
    61 000001A8 BF[4B010000]        <1> 		mov edi , w_output_buffer
    62 000001AD 033C25[47010000]    <1> 		add edi ,DWORD[wout_count]
    63                              <1> 		
    64 000001B4 41B9FF000000        <1> 		mov r9 , 255
    65 000001BA 4129F9              <1> 		sub r9d , edi
    66                              <1> 		
    67 000001BD E855FFFFFF          <1> 		call vV_ascii_int_to_dec				;get str repr of rax in w_number_buffer
    68                              <1> 		
    69                              <1> 		
    70                              <1> 		;inc eax
    71 000001C2 010425[47010000]    <1> 		add [wout_count] , eax
    72                              <1> 		
    73                              <1> 	
    74 000001C9 C3                  <1> 		ret
    75                              <1> 		
    76                              <1> 	
    77                              <1> 		
    78                              <1> ;vV_io_out_format_default:
    79                              <1> ;
    80                              <1> ;	mov r10d , DWORD[vV_sys_format_mode]	
    81                              <1> ;	ret
    82                              <1> 	
    83                              <1> vV_io_out_buffer_default:
    84                              <1> 
    85 000001CA 448B1425[40000000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    86 000001D2 E80F000000          <1> 	call vV_io_out_buffer
    87 000001D7 C3                  <1> 	ret
    88                              <1> 	
    89                              <1> vV_io_out_default:
    90                              <1> 
    91 000001D8 448B1425[40000000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    92 000001E0 E80C000000          <1> 	call vV_io_out
    93 000001E5 C3                  <1> 	ret
    94                              <1> 	
    95                              <1> vV_io_out_buffer:					;print str repr of Top Of Stack element
    96                              <1> 
    97                              <1> 
    98 000001E6 E811000000          <1> 	call vV_io_out01					
    99                              <1> 	
   100 000001EB E84A000000          <1> 	call vV_io_out_buffer_end
   101                              <1> 	
   102 000001F0 C3                  <1> 	ret
   103                              <1> 		
   104                              <1> vV_io_out:					;print str repr of Top Of Stack element
   105                              <1> 
   106                              <1> 
   107 000001F1 E806000000          <1> 	call vV_io_out01					
   108                              <1> 	
   109 000001F6 E826000000          <1> 	call vV_io_out_direct_end
   110                              <1> 	
   111 000001FB C3                  <1> 	ret
   112                              <1> 	
   113                              <1> 	
   114                              <1> 
   115                              <1> vV_io_out01:					;print str repr of Top Of Stack element
   116                              <1> 
   117                              <1> 
   118                              <1> 	vV_pop eax			;get value in eax
   118                              <2> 
   118 000001FC 4983EF04            <2>  sub vV_sp , 4
   118 00000200 418B07              <2>  mov %1 , [vV_sp]
   118                              <2> 
   119                              <1> 	
   120 00000203 BF[4B010000]        <1> 	mov edi , w_output_buffer	;set dest as O_buff
   121 00000208 033C25[47010000]    <1> 	add edi ,DWORD[wout_count]	;set offset to freespace
   122                              <1> 	
   123 0000020F 57                  <1> push rdi				;Save buffer origin
   124                              <1> 	
   125 00000210 41B9FF000000        <1> 	mov r9 , 255			;set Max buffer available	#TODO: Stop HardCoding VALUES!!!!
   126 00000216 4129F9              <1> 	sub r9d , edi			;
   127                              <1> 
   128                              <1> 
   129 00000219 41FFD2              <1> 	call r10			;call current conversion format function
   130                              <1> 	
   131                              <1> 	
   132 0000021C 4831FF              <1> 	xor rdi , rdi
   133                              <1> 	
   134 0000021F 5F                  <1> pop rdi						;recover Buffer origin
   135                              <1> 	
   136 00000220 C3                  <1> 	ret
   137                              <1> 	
   138                              <1> 	
   139                              <1> vV_io_out_direct_end:
   140                              <1> 
   141                              <1> 
   142                              <1> 
   143 00000221 67C604070A          <1> 	mov BYTE[edi + eax] , 0xa		;add new_line
   144                              <1> 		
   145 00000226 FFC0                <1> 		inc eax
   146                              <1> 		
   147 00000228 89C2                <1> 		mov edx , eax				;string lenght		#TODO: remove leading 0
   148 0000022A 4889FE              <1> 		mov rsi , rdi				;strng ptr
   149 0000022D BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   150 00000232 B801000000          <1> 		mov rax , 1				; Write sysCall
   151 00000237 0F05                <1> 		syscall
   152                              <1> 	
   153 00000239 C3                  <1> 		ret
   154                              <1> 		
   155                              <1> 		
   156                              <1> vV_io_out_buffer_end:
   157                              <1> 
   158 0000023A 010425[47010000]    <1> 	add [wout_count] , eax
   159                              <1> 		
   160                              <1> 	
   161 00000241 C3                  <1> 		ret
   162                              <1> 		
   163                              <1> 
   164                              <1> 		
   165                              <1> 	
   166                              <1> 
   167                              <1> 
   168                              <1> 	wio_out:				; print top of data stack (int->str)
   169                              <1> 	
   170 00000242 4983EF04            <1> 		sub r15 , 4
   171                              <1> 	
   172 00000246 418B07              <1> 		mov eax, [r15]				;set rax to top of dstack
   173                              <1> 		
   174                              <1> 		
   175                              <1> 		
   176 00000249 BF[4B010000]        <1> 		mov edi , w_output_buffer
   177 0000024E 033C25[47010000]    <1> 		add edi ,DWORD[wout_count]
   178                              <1> 		
   179 00000255 57                  <1> 	push rdi
   180                              <1> 		
   181 00000256 41B9FF000000        <1> 		mov r9 , 255
   182 0000025C 4129F9              <1> 		sub r9d , edi
   183                              <1> 		
   184 0000025F E889FEFFFF          <1> 		call vV_ascii_int_to_hex;vV_ascii_int_to_dec				;get str repr of rax in w_number_buffer
   185                              <1> 	
   186 00000264 4831FF              <1> 	xor rdi , rdi
   187 00000267 5F                  <1> 	pop rdi	
   188                              <1> 		
   189 00000268 67C604070A          <1> 		mov BYTE[edi + eax] , 0xa
   190                              <1> 		
   191 0000026D FFC0                <1> 		inc eax
   192                              <1> 		
   193 0000026F 89C2                <1> 		mov edx , eax				;string lenght		#TODO: remove leading 0
   194 00000271 4889FE              <1> 		mov rsi , rdi				;strng ptr
   195 00000274 BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   196 00000279 B801000000          <1> 		mov rax , 1				; Write sysCall
   197 0000027E 0F05                <1> 		syscall
   198                              <1> 	
   199 00000280 C3                  <1> 		ret
   200                              <1> 		
   201                              <1> 		
   202                              <1> 	wio_get:
   203                              <1> 	
   204                              <1> 	
   205 00000281 48BE-               <1> 		mov rsi , w_input_buffer		;ptr to string destination	
   205 00000283 [4800000000000000]  <1>
   206 0000028B BAFF000000          <1> 		mov edx , 255				;string lenght		#TODO: handle multiple lenght numbers
   207 00000290 BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   208 00000295 B800000000          <1> 		mov rax , 0				; read sysCall
   209                              <1> 		
   210 0000029A 0F05                <1> 		syscall
   211                              <1> 		
   212                              <1> 		
   213                              <1> ;-------------Buffer_Overflow_Execption  (experiment) [Working for now]
   214                              <1> 
   215                              <1> 
   216                              <1> 
   217 0000029C 3DFF000000          <1> 		cmp eax , 255
   218                              <1> 		
   219 000002A1 7214                <1> 		jb .no_overflow
   220                              <1> 		
   221                              <1> 		
   222 000002A3 803C25[46010000]0A  <1> 		cmp BYTE[w_input_buffer +254] , 0xa
   223                              <1> 		
   224 000002AB 740A                <1> 		je .no_overflow
   225                              <1> 		
   226 000002AD B80C000000          <1> 			mov rax , 12		;placeholder value for now, 
   227                              <1> 						;TODO: Make ERRORS constants
   228                              <1> 		
   229 000002B2 E8C6000000          <1> 			call w_forced_exit 	;NOTE: should handle ret adress? #TODO
   230                              <1> 		
   231                              <1> 		.no_overflow:
   232                              <1> 		
   233                              <1> ;----------------------------------------------
   234                              <1> 
   235                              <1> 
   236 000002B7 53                  <1> push rbx
   237                              <1> 
   238 000002B8 89C3                <1> 		mov ebx , eax 	;char count
   239 000002BA 31FF                <1> 		xor edi , edi 
   240 000002BC BE[48000000]        <1> 		mov esi , w_input_buffer
   241                              <1> 		
   242                              <1> 
   243 000002C1 E87CFDFFFF          <1> 		call vV_ascii_as_dec
   244                              <1> 		
   245 000002C6 5B                  <1> pop rbx
   246                              <1> 		
   247 000002C7 418907              <1> 		mov [r15] , eax
   248                              <1> 		
   249 000002CA 4983C704            <1> 		add r15 , 4
   250                              <1> 		
   251 000002CE C3                  <1> 		ret
   252                              <1> 		
   253                              <1> 	wio_get_str_raw:		;removes the new_line
   254                              <1> 	
   255 000002CF 49BA-               <1> 		mov r10 , .end
   255 000002D1 [DB02000000000000]  <1>
   256                              <1> 		
   257                              <1> 		
   258                              <1> 		
   259                              <1> 		
   260 000002D9 EB39                <1> 		jmp wio_get_str
   261                              <1> 		
   262                              <1> 		.end:
   263                              <1> 		
   264 000002DB FF0C25[44000000]    <1> 		dec DWORD [w_input_buffer-4]
   265                              <1> 		
   266                              <1> 	
   267                              <1> 		
   268 000002E2 C3                  <1> 		ret
   269                              <1> 	
   270                              <1> 	wio_get_str_null:		;null terminated
   271                              <1> 	
   272 000002E3 49BA-               <1> 		mov r10 , .end
   272 000002E5 [EF02000000000000]  <1>
   273                              <1> 		
   274                              <1> 		
   275 000002ED EB25                <1> 		jmp wio_get_str
   276                              <1> 		
   277                              <1> 		.end:
   278                              <1> 		
   279 000002EF 48BE-               <1> 		mov rsi , w_input_buffer
   279 000002F1 [4800000000000000]  <1>
   280                              <1> 		
   281 000002F9 033425[44000000]    <1> 		add esi ,[w_input_buffer -4]
   282                              <1> 		
   283 00000300 48FFCE              <1> 		dec rsi
   284                              <1> 		
   285 00000303 C60600              <1> 		mov BYTE [rsi] , 0
   286                              <1> 		
   287                              <1> 		
   288                              <1> 		
   289 00000306 C3                  <1> 		ret
   290                              <1> 	
   291                              <1> 	wio_get_str_nline:		;keep the new line
   292                              <1> 	
   293 00000307 49BA-               <1> 		mov r10 , .end
   293 00000309 [1303000000000000]  <1>
   294                              <1> 		
   295                              <1> 		
   296 00000311 EB01                <1> 		jmp wio_get_str
   297                              <1> 		
   298                              <1> 		.end:
   299                              <1> 		
   300 00000313 C3                  <1> 		ret
   301                              <1> 		
   302                              <1> 		
   303                              <1> 	wio_get_str:				;arg: eax: size to read	r10: return adrr
   304                              <1> 							; ?? may use rsi for dest info???
   305                              <1> 							; then shouldn't increment rsi in get_str
   306                              <1> 							; maybe make a get_string_direct later???
   307                              <1> 							; or do adr calc before?
   308                              <1> 							; maybe 2 entry point/ 1 exit point?
   309                              <1> 	
   310                              <1> 	
   311 00000314 48BE-               <1> 		mov rsi , w_input_buffer			;ptr to string destination	
   311 00000316 [4800000000000000]  <1>
   312 0000031E 033425[44000000]    <1> 		add esi , [w_input_buffer - 4]
   313 00000325 89C2                <1> 		mov edx , eax				;string lenght		#TODO: handle multiple lenght numbers
   314                              <1> 		;sub edx , [w_input_buffer - 4]
   315 00000327 BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   316 0000032C B800000000          <1> 		mov rax , 0				; read sysCall
   317                              <1> 		
   318 00000331 0F05                <1> 		syscall
   319                              <1> 		
   320                              <1> 		
   321                              <1> 		
   322                              <1> 		
   323                              <1> 		
   324                              <1> 		;dec eax
   325                              <1> 		
   326 00000333 010425[44000000]    <1> 		add [w_input_buffer-4] , eax
   327                              <1> 		
   328                              <1> 		
   329 0000033A 41FFE2              <1> 		jmp r10
   330                              <1> 		
   331                              <1> 		
   332                              <1> 	wio_move_in_to_out:
   333                              <1> 	
   334                              <1> 	
   335 0000033D 8B0C25[44000000]    <1> 		mov ecx , [w_input_buffer-4]
   336 00000344 83C104              <1> 		add ecx , 4
   337 00000347 BE[44000000]        <1> 		mov esi , w_input_buffer-4
   338 0000034C BF[47010000]        <1> 		mov edi , w_output_buffer-4
   339                              <1> 		
   340 00000351 F3A4                <1> 		rep movsb
   341                              <1> 		
   342 00000353 C70425[44000000]00- <1> 		mov DWORD [w_input_buffer-4] , 0
   342 0000035B 000000              <1>
   343                              <1> 		
   344                              <1> 		
   345                              <1> 		
   346 0000035E C3                  <1> 		ret
   347                              <1> 	
   348                              <1> 	
   349                              <1> 		
   350                              <1> 		
   351                              <1> 	wio_flush:
   352                              <1> 	
   353                              <1> 	
   354                              <1> 		
   355 0000035F 8B1425[47010000]    <1> 		mov edx , [w_output_buffer - 4]		;string lenght
   356 00000366 48BE-               <1> 		mov rsi , w_output_buffer			;strng ptr
   356 00000368 [4B01000000000000]  <1>
   357 00000370 BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   358 00000375 B801000000          <1> 		mov rax , 1				; Write sysCall
   359 0000037A 0F05                <1> 		syscall
   360                              <1> 	
   361 0000037C C3                  <1> 		ret
   362                              <1> 		
   363                              <1> 		
   364                              <1> 		
   365                              <1> 		
   366                              <1> 		
   367                              <1> 		
   368                              <1> 		
   369                              <1> 
   370                              <1> 
   371                              <1> 
     3                                  %include "vVc/assembly/w_runtime/w_runtime.asm"		
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> ;%include "wio.asm"
     4                              <1> 
     5                              <1> %include "vVc/assembly/w_runtime/vV_system0.asm"
     1                              <2> 
     2                              <2> segment .bss
     3                              <2> 
     4                              <2> 	ALIGNB 4
     5 00000000 <res 00000040>      <2> 	vV_sys_start:	resd 16		;not used now
     6                              <2> 
     7 00000040 <res 00000004>      <2> 	vV_sys_format_mode: resd 1
     6                              <1> %include "vVc/assembly/w_runtime/vV_system1.asm"
     1                              <2> 
     2                              <2> segment .bss
     3                              <2> 
     4                              <2> 	ALIGNB 4
     5                              <2> 	
     6                              <2> 	
     7                              <2> 	;------------Input Buffer
     8                              <2> 
     9                              <2> 
    10                              <2> 	
    11 00000044 <res 00000004>      <2> 	win_count: resb 4					;Input Buffer current content
    12 00000048 <res 000000FF>      <2> 	w_input_buffer: resb 255					;Input Buffer of 256 char
    13                              <2> 	
    14                              <2> 	
    15                              <2> 	
    16                              <2> 	
    17                              <2> ;------------Output Buffer
    18                              <2> 
    19                              <2> 
    20                              <2> 
    21                              <2> 	
    22 00000147 <res 00000004>      <2> 	wout_count: resb 4					;Output Buffer current content
    23 0000014B <res 000000FF>      <2> 	w_output_buffer: resb 255					;Output Buffer of 256 char
    24                              <2> 	
    25                              <2> 	
    26                              <2> 	
    27                              <2> 	
    28                              <2> ;------------Number Buffer
    29                              <2> 
    30                              <2> 
    31                              <2> 	
    32                              <2> 	
    33 0000024A <res 0000000A>      <2> 	w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34 00000254 <res 00000001>      <2> 	endofline: resb 1					;Maybe Not Needed
    35                              <2> 	
    36                              <2> 
    37                              <2> 
    38                              <2> 
     7                              <1> %include "vVc/assembly/w_runtime/vV_memaloc.asm"
     1                              <2> 
     2                              <2> 
     3                              <2> ;Will Be Needed in version 0.0.3 for vars
     4                              <2> 
     5                              <2> segment .bss
     6                              <2> 
     7                              <2> 	
     8                              <2> 	
     9                              <2> 	var_space:
    10 00000255 <res 00000003>      <2> 	ALIGNB 4
    11                              <2> ;---------------------------var reserved Space-----	
    12                              <2> 
    13                              <2> 	var_int:
    14                              <2> 		
    15 00000258 <res 00000800>      <2> 		resd	512
    16                              <2> 		
    17                              <2> 		
    18                              <2> 	var_sting:
    19                              <2> 	
    20 00000A58 <res 00000800>      <2> 		resb 	2048
    21                              <2> 		
    22                              <2> 
     8                              <1> %include "vVc/assembly/w_runtime/vV_stack_init.asm"
     1                              <2> 
     2                              <2> segment .bss
     3                              <2> 
     4                              <2> 	
     5                              <2> 	
     6                              <2> 	stacks: 
     7                              <2> 
     8                              <2> 
     9 00001258 <res 00040000>      <2> 	string_stack_start: resb 262144
    10                              <2> 
    11                              <2> 
    12                              <2> 	
    13                              <2> 	
    14                              <2> 						
    15 00041258 <res 00020000>      <2> 	fake_stack_start: resb 131072
     9                              <1> 
    10                              <1> 
    11                              <1> global _start
    12                              <1> 
    13                              <1> global w_input_buffer
    14                              <1> global w_output_buffer
    15                              <1> global w_number_buffer
    16                              <1> 
    17                              <1> ;extern w_entry_point			;Defined by main program
    18                              <1> global w_forced_exit			;Error caused exit
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22                              <1> segment .data 
    23                              <1> 
    24 00000000 FF                  <1> 	is_main: db -1 			;May Be used for "lib" version of compile
    25                              <1> 						; or maybe another runtime?
    26 00000001 0A204572726F722028- <1> 	error: db 0xa," Error (wip) [code] [name]",0xa
    26 0000000A 77697029205B636F64- <1>
    26 00000013 655D205B6E616D655D- <1>
    26 0000001C 0A                  <1>
    27                              <1> 	errsize equ $-error
    28                              <1> 
    29                              <1> 	
    30                              <1> 
    31                              <1> segment .text 
    32                              <1> 
    33                              <1> 
    34                              <1> 	w_forced_exit:				;rax hold exit code
    35                              <1> 	
    36 0000037D 50                  <1> 		push rax
    37                              <1> 		
    38                              <1> 	
    39 0000037E BA1C000000          <1> 		mov edx , errsize				;string lenght
    40 00000383 48BE-               <1> 		mov rsi , error			;strng ptr
    40 00000385 [0100000000000000]  <1>
    41 0000038D BF02000000          <1> 		mov rdi , 2				;file descriptor, stderr
    42 00000392 B801000000          <1> 		mov rax , 1				; Write sysCall
    43 00000397 0F05                <1> 		syscall
    44                              <1> 		
    45                              <1> 		
    46 00000399 5F                  <1> 		pop rdi
    47                              <1> 		;mov rdi, rax
    48 0000039A B83C000000          <1> 		mov rax, SYS_EXIT
    49 0000039F 0F05                <1> 		syscall
    50                              <1> 		
    51                              <1> 		
    52                              <1> 
    53                              <1> 
    54                              <1> 	save_regs:			;In case called from other process
    55                              <1> 	
    56 000003A1 58                  <1> 		pop rax
    57                              <1> 	
    58 000003A2 53                  <1> 		push rbx
    59 000003A3 4154                <1> 		push r12
    60 000003A5 4155                <1> 		push r13
    61 000003A7 4156                <1> 		push r14
    62 000003A9 4157                <1> 		push r15
    63                              <1> 		
    64 000003AB 50                  <1> 		push rax
    65                              <1> 		
    66 000003AC C3                  <1> 		ret
    67                              <1> 		
    68                              <1> 	restore_regs:
    69                              <1> 	
    70 000003AD 58                  <1> 		pop rax
    71                              <1> 	
    72 000003AE 415F                <1> 		pop r15
    73 000003B0 415E                <1> 		pop r14
    74 000003B2 415D                <1> 		pop r13
    75 000003B4 415C                <1> 		pop r12
    76 000003B6 5B                  <1> 		pop rbx
    77                              <1> 		
    78 000003B7 50                  <1> 		push rax
    79                              <1> 		
    80 000003B8 C3                  <1> 		ret
    81                              <1> 		
    82                              <1> 	setup_memory:
    83                              <1> 	
    84 000003B9 C70425[44000000]00- <1> 		mov DWORD [win_count] , 0
    84 000003C1 000000              <1>
    85 000003C4 C70425[47010000]00- <1> 		mov DWORD [wout_count] , 0
    85 000003CC 000000              <1>
    86                              <1> 		
    87 000003CF C70425[54020000]0A- <1> 		mov DWORD [endofline] , 0xa
    87 000003D7 000000              <1>
    88                              <1> 		
    89 000003DA C70425[40000000]-   <1> 		mov DWORD[vV_sys_format_mode] , vV_ascii_int_to_dec
    89 000003E1 [17010000]          <1>
    90                              <1> 		
    91 000003E5 C3                  <1> 		ret
    92                              <1> 		
    93                              <1> 		
    94                              <1> 	
    95                              <1> 		
    96                              <1> _start:				;Entry point of Every Program
    97                              <1> 	
    98                              <1> 		
    99                              <1> 
   100 000003E6 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
   101                              <1> 	
   102 000003E9 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
   102 000003EB [5812040000000000]  <1>
   103                              <1> 	
   104 000003F3 E8A9FFFFFF          <1> 	call save_regs				;just in case
   105                              <1> 	
   106                              <1> 	
   107 000003F8 E8BCFFFFFF          <1> 	call setup_memory			;all memory setup at start
   108                              <1> 	
   109                              <1> 	
   110                              <1> 	
   111 000003FD E811000000          <1> 	call w_entry_point			;Start the program 
   112                              <1> 	
   113                              <1> 	
   114 00000402 E8A6FFFFFF          <1> 	call restore_regs
   115                              <1> 	
   116                              <1> ;-----------attempt to clean input buffer--------------------------------------
   117                              <1> 	
   118                              <1> 	
   119                              <1> 	
   120                              <1> 	
   121                              <1> 	
   122                              <1> 	;mov edx , [w_output_buffer - 4]		;string lenght
   123                              <1> 	;	mov rsi , w_output_buffer			;strng ptr
   124                              <1> 	;	mov rdi , 1				;file descriptor, stdout
   125                              <1> 	;	mov rax , 1				; Write sysCall
   126                              <1> 	;	syscall
   127                              <1> 
   128                              <1> ;------------------------------------------------------------------------------
   129                              <1> 
   130 00000407 B83C000000          <1> 	mov rax, SYS_EXIT
   131 0000040C BF00000000          <1> 	mov rdi, 0				;Normal exit procedure (no code returned from main, need to call exit(code) forhat)
   132 00000411 0F05                <1> 	syscall
   133                              <1> 	
   134                              <1> 	
   135                              <1> 	
   136                              <1> 	
   137                              <1> 	
     4                                  
     5                                  
     6                                  global w_entry_point
     7                                  
     8                                  
     9                                  
    10                                  segment .text 
    11                                  
    12                                  
    13                                  
    14                                  
    15                                  w_entry_point:
    16                                  
    17                                  
    18 00000413 4889E5                  	mov rbp, rsp			;Setup Stack Frame
    19                                  	
    20                                  	
    21                                   ;OpADR: (0)
    22                                  ; GET opcode (0)			
    23                                  
    24 00000416 E866FEFFFF              		call wio_get			
    25                                  
    26                                   ;OpADR: (1)
    27                                  ; GET opcode (0)			
    28                                  
    29 0000041B E861FEFFFF              		call wio_get			
    30                                  
    31                                   ;OpADR: (2)
    32                                  ; GET opcode (0)			
    33                                  
    34 00000420 E85CFEFFFF              		call wio_get			
    35                                  
    36                                   ;OpADR: (3)
    37                                  ; GET opcode (0)			
    38                                  
    39 00000425 E857FEFFFF              		call wio_get			
    40                                  
    41                                   ;OpADR: (4)
    42                                  ; ADD opcode 					
    43                                  
    44 0000042A 418B47F8                	mov eax , vV_2nd			
    45 0000042E 410347FC                	add eax , vV_top			
    46 00000432 418947F8                	mov vV_2nd , eax			
    47                                  
    48                                  	vV_dec_sp 1		
    48                              <1> 
    48 00000436 4983EF04            <1>  sub vV_sp , cell(%1)
    48                              <1> 
    49                                  
    50                                   ;OpADR: (5)
    51                                  ; ADD opcode 					
    52                                  
    53 0000043A 418B47F8                	mov eax , vV_2nd			
    54 0000043E 410347FC                	add eax , vV_top			
    55 00000442 418947F8                	mov vV_2nd , eax			
    56                                  
    57                                  	vV_dec_sp 1		
    57                              <1> 
    57 00000446 4983EF04            <1>  sub vV_sp , cell(%1)
    57                              <1> 
    58                                  
    59                                   ;OpADR: (6)
    60                                  ; ADD opcode 					
    61                                  
    62 0000044A 418B47F8                	mov eax , vV_2nd			
    63 0000044E 410347FC                	add eax , vV_top			
    64 00000452 418947F8                	mov vV_2nd , eax			
    65                                  
    66                                  	vV_dec_sp 1		
    66                              <1> 
    66 00000456 4983EF04            <1>  sub vV_sp , cell(%1)
    66                              <1> 
    67                                  
    68                                   ;OpADR: (7)
    69                                  ; DUP opcode (1)			
    70                                  
    71                                  	vV_dup 1			
    71                              <1> 
    71 0000045A B901000000          <1>  mov ecx , %1
    71 0000045F 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
    71 00000463 4C89FF              <1>  mov rdi , vV_sp
    71                              <1> 
    71 00000466 F3A5                <1>  rep movsd
    71                              <1> 
    71 00000468 4983C704            <1>  add vV_sp , cell(%1)
    71                              <1> 
    72                                  
    73                                  
    74                                   ;OpADR: (8)
    75                                  ; BUFF_OUT opcode (0)			
    76                                  
    77 0000046C E859FDFFFF              	call vV_io_out_buffer_default			
    78                                  						
    79                                  
    80                                   ;OpADR: (9)
    81                                  ; DUP opcode (1)			
    82                                  
    83                                  	vV_dup 1			
    83                              <1> 
    83 00000471 B901000000          <1>  mov ecx , %1
    83 00000476 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
    83 0000047A 4C89FF              <1>  mov rdi , vV_sp
    83                              <1> 
    83 0000047D F3A5                <1>  rep movsd
    83                              <1> 
    83 0000047F 4983C704            <1>  add vV_sp , cell(%1)
    83                              <1> 
    84                                  
    85                                  
    86                                   ;OpADR: (10)
    87                                  ; BUFF_OUT opcode (3)			
    88                                  
    89 00000483 41BA[ED000000]          	mov r10d , vV_FORMAT_HEX		
    90 00000489 E858FDFFFF              	call vV_io_out_buffer				
    91                                  						
    92                                  
    93                                   ;OpADR: (11)
    94                                  ; DUP opcode (1)			
    95                                  
    96                                  	vV_dup 1			
    96                              <1> 
    96 0000048E B901000000          <1>  mov ecx , %1
    96 00000493 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
    96 00000497 4C89FF              <1>  mov rdi , vV_sp
    96                              <1> 
    96 0000049A F3A5                <1>  rep movsd
    96                              <1> 
    96 0000049C 4983C704            <1>  add vV_sp , cell(%1)
    96                              <1> 
    97                                  
    98                                  
    99                                   ;OpADR: (12)
   100                                  ; BUFF_OUT opcode (4)			
   101                                  
   102 000004A0 41BA[62010000]          	mov r10d , vV_FORMAT_BIN		
   103 000004A6 E83BFDFFFF              	call vV_io_out_buffer				
   104                                  						
   105                                  
   106                                   ;OpADR: (13)
   107                                  ; FLUSH opcode					
   108                                  
   109 000004AB E8C9FCFFFF              		call vV_io_flush	
   110                                  		
   111 000004B0 C3                      		ret
   112                                  
   113                                  ;Transpiled from vV with vVc version 0.0.1.5
   114                                  		
   115                                  		
