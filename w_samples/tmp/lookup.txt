     1                                  %include "vVc/assembly/w_runtime/vV_defines.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> ;------------------Variables From Project-------------
     5                              <1> 
     6                              <1> 
     7                              <1> %define vV_input_buffer_size 255
     8                              <1> %define vV_output_buffer_size 255
     9                              <1> 
    10                              <1> 
    11                              <1> 
    12                              <1> ;------------------Implementation Relative-------------
    13                              <1> 
    14                              <1> %deftok vV_sp 'r15'
    15                              <1> 
    16                              <1> %deftok vV_spS 'r14'
    17                              <1> 
    18                              <1> %deftok vV_sdir '-'
    19                              <1> 
    20                              <1> 
    21                              <1> 
    22                              <1> 
    23                              <1> ;------------------Stack Shortcuts--------------------
    24                              <1> 
    25                              <1> %define cell(a) (a*4)
    26                              <1> 
    27                              <1> 
    28                              <1> %define vV_top [vV_sp vV_sdir %+ cell(1)]
    29                              <1> %define vV_2nd [vV_sp vV_sdir %+ cell(2)]
    30                              <1> 
    31                              <1> %define vV_stack_v(a) ([vV_sp vV_sdir %+ cell(a)])
    32                              <1> 
    33                              <1> 
    34                              <1> ;-------------------Out_Format Pointer------------------
    35                              <1> 
    36                              <1> %deftok vV_FORMAT_BIN "vV_ascii_int_to_bin"
    37                              <1> %deftok vV_FORMAT_DEC "vV_ascii_int_to_dec"
    38                              <1> %deftok vV_FORMAT_HEX "vV_ascii_int_to_hex"
    39                              <1> 
    40                              <1> 
    41                              <1> 
    42                              <1> ;--------------------Op Macros--------------------------
    43                              <1> 
    44                              <1> %macro vV_push 1
    45                              <1> 
    46                              <1> 	mov DWORD[vV_sp] , %1
    47                              <1> 	add vV_sp , 4
    48                              <1> 
    49                              <1> %endmacro
    50                              <1> 
    51                              <1> %macro vV_pop 1
    52                              <1> 
    53                              <1> 	sub vV_sp , 4
    54                              <1> 	mov %1 , [vV_sp]
    55                              <1> 	
    56                              <1> %endmacro
    57                              <1> 
    58                              <1> %macro vV_swap 0
    59                              <1> 
    60                              <1> 	mov edx , [vV_sp-4]
    61                              <1> 	mov eax , [vV_sp-8]
    62                              <1> 	mov [vV_sp-8] , edx 
    63                              <1> 	mov [vV_sp-4] , eax 
    64                              <1> 	
    65                              <1> %endmacro
    66                              <1> 
    67                              <1> %macro vV_dup 1
    68                              <1> 
    69                              <1> 	mov ecx , %1
    70                              <1> 	lea rsi , [vV_sp-cell(%1)]
    71                              <1> 	mov rdi , vV_sp
    72                              <1> 		
    73                              <1> 	rep movsd
    74                              <1> 	
    75                              <1> 	add vV_sp , cell(%1)
    76                              <1> 	
    77                              <1> %endmacro
    78                              <1> 
    79                              <1> 
    80                              <1> %macro vV_dec_sp 1
    81                              <1> 
    82                              <1> 	sub vV_sp , cell(%1)
    83                              <1> 	
    84                              <1> %endmacro
    85                              <1> 	
     2                                  %include "vVc/assembly/w_runtime/vV_error_code.asm"		
     1                              <1> 
     2                              <1> %define vV_ERR_IO_I_OVERFLOW 1
     3                              <1> %define vV_ERR_IO_O_OVERFLOW 2
     4                              <1> %define vV_ERR_IO_I_UNVALID 3
     5                              <1> %define vV_ERR_IO_O_UNVALID 4
     6                              <1> %define vV_ERR_IO_I_VALUE_OVERFLOW 5
     7                              <1> 
     8                              <1> 
     9                              <1> %define vV_ERR_VALUE_OVERFLOW 8
    10                              <1> 
    11                              <1> 
    12                              <1> %define vV_ERR_MEMORY_BUFFER_LIMIT 16
     3                                  %include "vVc/assembly/w_runtime/vV_runtime.asm"		
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> 
     4                              <1> ;%include "vVc/assembly/w_runtime/vV_errors.asm"
     5                              <1> ;%include "vVc/assembly/w_runtime/vV_system00.asm"
     6                              <1> ;%include "vVc/assembly/w_runtime/vV_system10.asm"
     7                              <1> ;%include "vVc/assembly/w_runtime/vV_system90.asm"
     8                              <1> 
     9                              <1> 
    10                              <1> global _start
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;extern vV_entry_point			;Defined by main program
    15                              <1> 
    16                              <1> 
    17                              <1> 
    18                              <1> 	
    19                              <1> segment .data 
    20                              <1> 
    21                              <1> 
    22                              <1> 	
    23                              <1> 
    24                              <1> segment .text 
    25                              <1> 
    26                              <1> 
    27                              <1> 	vV_forced_exit:				;rax hold exit code
    28                              <1> 							;Removed default error printing
    29                              <1> 							;This will now happens in errors module
    30                              <1> 
    31 00000000 4889C7              <1> 		mov rdi, rax
    32 00000003 B83C000000          <1> 		mov rax, SYS_EXIT
    33 00000008 0F05                <1> 		syscall
    34                              <1> 		
    35                              <1> 		
    36                              <1> 
    37                              <1> 
    38                              <1> 	save_regs:			;In case called from other process
    39                              <1> 	
    40 0000000A 58                  <1> 		pop rax
    41                              <1> 	
    42 0000000B 53                  <1> 		push rbx
    43 0000000C 4154                <1> 		push r12
    44 0000000E 4155                <1> 		push r13
    45 00000010 4156                <1> 		push r14
    46 00000012 4157                <1> 		push r15
    47                              <1> 		
    48 00000014 50                  <1> 		push rax
    49                              <1> 		
    50 00000015 C3                  <1> 		ret
    51                              <1> 		
    52                              <1> 	restore_regs:
    53                              <1> 	
    54 00000016 58                  <1> 		pop rax
    55                              <1> 	
    56 00000017 415F                <1> 		pop r15
    57 00000019 415E                <1> 		pop r14
    58 0000001B 415D                <1> 		pop r13
    59 0000001D 415C                <1> 		pop r12
    60 0000001F 5B                  <1> 		pop rbx
    61                              <1> 		
    62 00000020 50                  <1> 		push rax
    63                              <1> 		
    64 00000021 C3                  <1> 		ret
    65                              <1> 		
    66                              <1> 	setup_memory:
    67                              <1> 	
    68 00000022 C70425[80000000]00- <1> 		mov DWORD [vV_input_buffer_content] , 0
    68 0000002A 000000              <1>
    69 0000002D C70425[83010000]00- <1> 		mov DWORD [vV_output_buffer_content] , 0
    69 00000035 000000              <1>
    70                              <1> 		
    71                              <1> 		;mov DWORD [endofline] , 0xa
    72                              <1> 		
    73 00000038 C70425[14010000]-   <1> 		mov DWORD[vV_sys_format_mode] , vV_ascii_int_to_dec
    73 0000003F [01040000]          <1>
    74                              <1> 		
    75 00000043 C3                  <1> 		ret
    76                              <1> 		
    77                              <1> 		
    78                              <1> 	
    79                              <1> 		
    80                              <1> _start:				;Entry point of Every Program
    81                              <1> 	
    82                              <1> 		
    83                              <1> 
    84 00000044 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
    85                              <1> 	
    86 00000047 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
    86 00000049 [8602040000000000]  <1>
    87                              <1> 	
    88 00000051 E8B4FFFFFF          <1> 	call save_regs				;just in case
    89                              <1> 	
    90                              <1> 	
    91 00000056 E8C7FFFFFF          <1> 	call setup_memory			;all memory setup at start
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
    95 0000005B E80E040000          <1> 	call vV_entry_point			;Start the program 
    96                              <1> 	
    97                              <1> 	
    98 00000060 E8B1FFFFFF          <1> 	call restore_regs
    99                              <1> 	
   100                              <1> 
   101                              <1> ;------------------------------------------------------------------------------
   102                              <1> 
   103 00000065 B83C000000          <1> 	mov rax, SYS_EXIT
   104 0000006A BF00000000          <1> 	mov rdi, 0		;Normal exit procedure (no code returned from main)
   105 0000006F 0F05                <1> 	syscall
   106                              <1> 	
   107                              <1> 	
   108                              <1> 	
   109                              <1> 	
   110                              <1> 	
     4                                  %include "vVc/assembly/w_runtime/vV_system00.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5 00000000 <res 00000040>      <1> 	vV_sys_start:	resd 16		;not used now
     6                              <1> 
     7                              <1> 	
     8                              <1> 	
     9                              <1> segment .data
    10                              <1> 
    11                              <1> 
    12                              <1> ;--Start of Memory----------------------------------------------------------
    13                              <1> 
    14                              <1> 	ALIGN 8
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;---------------------Error Managment----------
    18                              <1> 
    19                              <1> 
    20                              <1> ;error vectors	
    21                              <1> 	
    22                              <1> 	vV_error_vectors:
    23 00000000 [8D00000000000000]- <1> 	times 32 dq vV_error_unhandeled
    23 00000000 <rept>              <1>
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> segment .text
    28                              <1> 
    29                              <1> 
    30                              <1> vV_error:
    31                              <1> 
    32 00000071 52                  <1> 	push rdx
    33                              <1> 	
    34 00000072 4831D2              <1> 	xor rdx , rdx
    35                              <1> 	
    36 00000075 88E2                <1> 	mov dl , ah
    37                              <1> 	
    38 00000077 C0E203              <1> 	shl dl , 3
    39                              <1> 	
    40 0000007A 67FF92[00000000]    <1> 	call [vV_error_vectors + edx]
    41                              <1> 	
    42                              <1> 	
    43 00000081 5A                  <1> 	pop rdx
    44                              <1> 	
    45 00000082 C3                  <1> 	ret
    46                              <1> 	
    47                              <1> 	
    48                              <1> vV_error_fatal:
    49                              <1> 
    50                              <1> 	
    51 00000083 88D0                <1> 	mov al , dl
    52                              <1> 	
    53 00000085 C0E803              <1> 	shr al , 3
    54                              <1> 
    55 00000088 E873FFFFFF          <1> 	call vV_forced_exit
    56                              <1> 	
    57                              <1> 	
    58                              <1> 	
    59                              <1> 	
    60                              <1> 	
    61                              <1> 	
    62                              <1> 
    63                              <1> 	
     5                                  %include "vVc/assembly/w_runtime/vV_errors.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> segment .bss
     5                              <1> 
     6                              <1> 
     7                              <1> 	ALIGNB 4
     8                              <1> 		
     9                              <1> 	vV_error_buffer:
    10 00000040 <res 00000040>      <1> 	resb 64
    11                              <1> 	vV_end_err_buff:
    12                              <1> 	vV_error_buffer_size equ vV_end_err_buff-vV_error_buffer
    13                              <1> 
    14                              <1> 
    15                              <1> 
    16                              <1> 
    17                              <1> segment .data
    18                              <1> 
    19                              <1> ;Error String	
    20                              <1> 
    21                              <1> 	
    22                              <1> 	vV_error_msg:
    23 00000100 556E68616E64656C65- <1> 	.default: db "Unhandeled Error "
    23 00000109 64204572726F7220    <1>
    24                              <1> 	default_size equ $-.default
    25                              <1> 
    26                              <1> 
    27                              <1> 
    28                              <1> segment .text
    29                              <1> 
    30                              <1> 
    31                              <1> 
    32                              <1> 
    33                              <1> 	
    34                              <1> vV_error_unhandeled:
    35                              <1> 
    36                              <1> 
    37 0000008D 56                  <1> 	push rsi
    38 0000008E 57                  <1> 	push rdi	;Save reg used by syscall
    39 0000008F 4151                <1> 	push r9	;and by conversion func
    40                              <1> 	
    41                              <1> 	
    42                              <1> ;push rax	;Save flags ( and value)
    43                              <1> 
    44 00000091 53                  <1> 	push rbx	;Save Arg
    45 00000092 52                  <1> push rdx		;Save error code
    46                              <1> 	
    47                              <1> 	
    48 00000093 BA11000000          <1> 	mov edx , default_size				;string lenght
    49 00000098 48BE-               <1> 	mov rsi , vV_error_msg.default			;strng ptr
    49 0000009A [0001000000000000]  <1>
    50 000000A2 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    51 000000A7 B801000000          <1> 	mov rax , 1				; Write sysCall
    52 000000AC 0F05                <1> 	syscall	
    53                              <1> 	
    54                              <1> 	
    55 000000AE 58                  <1> pop rax	;error code
    56                              <1> 
    57                              <1> 
    58 000000AF C0E803              <1> 	shr al , 3
    59                              <1> 	
    60                              <1> 	
    61 000000B2 BF[40000000]        <1> 	mov edi , vV_error_buffer
    62 000000B7 41B940000000        <1> 	mov r9d , vV_error_buffer_size
    63                              <1> 	
    64                              <1> 
    65 000000BD E83F030000          <1> 	call vV_ascii_int_to_dec	
    66                              <1> 	
    67                              <1> 		
    68                              <1> 	
    69 000000C2 67C680[40000000]20  <1> 	mov BYTE[vV_error_buffer + eax] , ' '
    70                              <1> 	
    71                              <1> 	
    72 000000CA 67488DB8[41000000]  <1> 	lea rdi , [vV_error_buffer + eax + 1]
    73 000000D2 4129F9              <1> 	sub r9d , edi
    74                              <1> 	
    75 000000D5 58                  <1> 	pop rax
    76                              <1> 	
    77 000000D6 E826030000          <1> 	call vV_ascii_int_to_dec
    78                              <1> 	
    79 000000DB 674C8D0C07          <1> 	lea r9 , [edi + eax]
    80                              <1> 	
    81 000000E0 41C6010A            <1> 	mov BYTE[r9] , 0xa
    82                              <1> 	
    83 000000E4 49FFC1              <1> 	inc r9
    84                              <1> 	
    85 000000E7 4981E9[40000000]    <1> 	sub r9 , vV_error_buffer
    86                              <1> 	
    87 000000EE 4489CA              <1> 	mov edx , r9d				;string lenght
    88 000000F1 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
    88 000000F3 [4000000000000000]  <1>
    89 000000FB BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    90 00000100 B801000000          <1> 	mov rax , 1				; Write sysCall
    91 00000105 0F05                <1> 	syscall
    92                              <1> 	
    93 00000107 4159                <1> 	pop r9
    94 00000109 5F                  <1> 	pop rdi
    95 0000010A 5E                  <1> 	pop rsi
    96                              <1> 	
    97                              <1> 	
    98                              <1> 	
    99                              <1> 	
   100 0000010B C3                  <1> 	ret
   101                              <1> 	
   102                              <1> 	
   103                              <1> 	
   104                              <1> 		
   105                              <1> 		
   106                              <1> 		
   107                              <1> 		
   108                              <1> 		
   109                              <1> 		
   110                              <1> 		
   111                              <1> 		
   112                              <1> 		
   113                              <1> 		
   114                              <1> 		
   115                              <1> 		
   116                              <1> 		
   117                              <1> 		
   118                              <1> 		
   119                              <1> 		
   120                              <1> 		
   121                              <1> 		
   122                              <1> 		
   123                              <1> 
     6                                  %include "vVc/assembly/w_runtime/vV_system10.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5                              <1> 	
     6                              <1> 	
     7                              <1> 	;------------Input Buffer
     8                              <1> 
     9                              <1> 
    10                              <1> 	
    11 00000080 <res 00000004>      <1> 	vV_input_buffer_content: resb 4			;Input Buffer current content
    12 00000084 <res 000000FF>      <1> 	vV_input_buffer: resb vV_input_buffer_size		;Input Buffer of 256 char
    13                              <1> 	
    14                              <1> 	
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;------------Output Buffer
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22 00000183 <res 00000004>      <1> 	vV_output_buffer_content: resb 4			;Output Buffer current content
    23 00000187 <res 000000FF>      <1> 	vV_output_buffer: resb vV_output_buffer_size		;Output Buffer of 256 char
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> 	
    28                              <1> ;------------Number Buffer
    29                              <1> 
    30                              <1> 
    31                              <1> 	
    32                              <1> 	
    33                              <1> 	;w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34                              <1> 	;endofline: resb 1					;Maybe Not Needed
    35                              <1> 	
    36                              <1> 
    37                              <1> 
    38                              <1> segment .data
    39 00000111 90<rept>            <1> 	ALIGN 4
    40 00000114 [01040000]          <1> 	vV_sys_format_mode: dd vV_ascii_int_to_dec
     7                                  %include "vVc/assembly/w_runtime/vV_io.asm"			
     1                              <1> 
     2                              <1> 
     3                              <1> ;%include "vVc/assembly/w_runtime/vV_ascii.asm"
     4                              <1> 
     5                              <1> 
     6                              <1> ;Group all read/wrie syscalls
     7                              <1> 
     8                              <1> ;global convert_to_string
     9                              <1> ;global convert_to_int
    10                              <1> 
    11                              <1> ;extern vV_input_buffer
    12                              <1> ;extern vV_output_buffer
    13                              <1> ;extern w_number_buffer
    14                              <1> 
    15                              <1> global wio_out
    16                              <1> global wio_get
    17                              <1> global wio_get_str_raw
    18                              <1> global wio_get_str_null
    19                              <1> global wio_get_str_nline
    20                              <1> global wio_move_in_to_out
    21                              <1> 
    22                              <1> 
    23                              <1> segment .text 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> 
    28                              <1> 
    29                              <1> vV_io_flush:
    30                              <1> 	
    31                              <1> 	
    32                              <1> 	
    33 0000010C 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    34                              <1> 	
    35 00000113 C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    35 0000011B 000000              <1>
    36                              <1> 	
    37 0000011E 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    37 00000120 [8701000000000000]  <1>
    38                              <1> 		
    39 00000128 67C682[87010000]0A  <1> 	mov BYTE[vV_output_buffer + edx] , 0xa
    40 00000130 FFC2                <1> 	inc edx
    41                              <1> 		
    42 00000132 BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    43 00000137 B801000000          <1> 	mov rax , 1					; Write sysCall
    44 0000013C 0F05                <1> 	syscall
    45                              <1> 	
    46                              <1> 	
    47                              <1> 	
    48 0000013E C3                  <1> 	ret
    49                              <1> 	
    50                              <1> 		
    51                              <1> ;-------------------------------------------------------------------------------
    52                              <1> ;-------------------------------------------------------------------------------
    53                              <1> 	
    54                              <1> vV_io_out_buffer_default:
    55                              <1> 
    56 0000013F 448B1425[14010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    57 00000147 E80F000000          <1> 	call vV_io_out_buffer
    58 0000014C C3                  <1> 	ret
    59                              <1> 	
    60                              <1> vV_io_out_default:
    61                              <1> 
    62 0000014D 448B1425[14010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    63 00000155 E80C000000          <1> 	call vV_io_out
    64 0000015A C3                  <1> 	ret
    65                              <1> 
    66                              <1> ;-------------------------------------------------------------------------------
    67                              <1> ;-------------------------------------------------------------------------------
    68                              <1> 	
    69                              <1> vV_io_out_buffer:				;print str repr of Top Of Stack element
    70                              <1> 						
    71                              <1> 						
    72 0000015B E811000000          <1> 	call vV_io_out01			
    73 00000160 E84A000000          <1> 	call vV_io_out_buffer_end
    74 00000165 C3                  <1> 	ret
    75                              <1> 
    76                              <1> ;-------------------------------------------------------------------------------
    77                              <1> 		
    78                              <1> vV_io_out:					;print str repr of Top Of Stack element
    79                              <1> 
    80                              <1> 
    81 00000166 E806000000          <1> 	call vV_io_out01					
    82 0000016B E826000000          <1> 	call vV_io_out_direct_end
    83 00000170 C3                  <1> 	ret
    84                              <1> 
    85                              <1> ;-------------------------------------------------------------------------------	
    86                              <1> ;-------------------------------------------------------------------------------	
    87                              <1> 
    88                              <1> vV_io_out01:					;print str repr of Top Of Stack element
    89                              <1> 
    90                              <1> 
    91                              <1> 	vV_pop eax				;get value in eax
    91                              <2> 
    91 00000171 4983EF04            <2>  sub vV_sp , 4
    91 00000175 418B07              <2>  mov %1 , [vV_sp]
    91                              <2> 
    92                              <1> 	
    93 00000178 BF[87010000]        <1> 	mov edi , vV_output_buffer		;set dest as O_buff
    94 0000017D 033C25[83010000]    <1> 	add edi ,DWORD[vV_output_buffer_content]		;set offset to start of freespace
    95                              <1> 	
    96 00000184 57                  <1> push rdi					;Save buffer origin
    97                              <1> 	
    98 00000185 41B9FF000000        <1> 	mov r9 , 255				;set Max buffer available	
    99 0000018B 4129F9              <1> 	sub r9d , edi				;#TODO: Stop HardCoding VALUES!!!!
   100 0000018E 41FFD2              <1> 		call r10			;call current conversion format function
   101 00000191 4831FF              <1> 	xor rdi , rdi
   102                              <1> 	
   103 00000194 5F                  <1> pop rdi						;recover Buffer origin
   104                              <1> 	
   105 00000195 C3                  <1> 	ret
   106                              <1> 
   107                              <1> ;-------------------------------------------------------------------------------	
   108                              <1> 	
   109                              <1> vV_io_out_direct_end:
   110                              <1> 
   111                              <1> 
   112                              <1> 
   113 00000196 67C604070A          <1> 	mov BYTE[edi + eax] , 0xa		;add new_line
   114                              <1> 		
   115 0000019B FFC0                <1> 		inc eax
   116                              <1> 		
   117 0000019D 89C2                <1> 		mov edx , eax				;string lenght		
   118 0000019F 4889FE              <1> 		mov rsi , rdi				;strng ptr
   119 000001A2 BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   120 000001A7 B801000000          <1> 		mov rax , 1				; Write sysCall
   121 000001AC 0F05                <1> 		syscall
   122                              <1> 	
   123 000001AE C3                  <1> 		ret
   124                              <1> 
   125                              <1> ;-------------------------------------------------------------------------------		
   126                              <1> 		
   127                              <1> vV_io_out_buffer_end:
   128                              <1> 
   129 000001AF 010425[83010000]    <1> 	add [vV_output_buffer_content] , eax
   130                              <1> 
   131 000001B6 C3                  <1> 	ret
   132                              <1> 
   133                              <1> ;-------------------------------------------------------------------------------
   134                              <1> 
   135                              <1> vV_io_out_char:
   136                              <1> 
   137                              <1> 	
   138 000001B7 E827000000          <1> 	call vV_io_read_char
   139 000001BC E8D5FFFFFF          <1> 	call vV_io_out_direct_end
   140                              <1> 	
   141 000001C1 C3                  <1> 	ret
   142                              <1> 	
   143                              <1> vV_io_out_packed_char:
   144                              <1> 
   145                              <1> 	
   146 000001C2 E842000000          <1> 	call vV_io_read_packed_char
   147                              <1> 	
   148 000001C7 E8CAFFFFFF          <1> 	call vV_io_out_direct_end
   149                              <1> 	
   150 000001CC C3                  <1> 	ret
   151                              <1> 	
   152                              <1> vV_io_out_char_buffer:
   153                              <1> 
   154 000001CD E811000000          <1> 	call vV_io_read_char
   155                              <1> 	
   156 000001D2 E8D8FFFFFF          <1> 	call vV_io_out_buffer_end
   157                              <1> 	
   158 000001D7 C3                  <1> 	ret
   159                              <1> 	
   160                              <1> vV_io_out_packed_char_buffer:
   161                              <1> 
   162 000001D8 E82C000000          <1> 	call vV_io_read_packed_char
   163                              <1> 	
   164 000001DD E8CDFFFFFF          <1> 	call vV_io_out_buffer_end
   165                              <1> 	
   166 000001E2 C3                  <1> 	ret
   167                              <1> 	
   168                              <1> vV_io_read_char:
   169                              <1> 
   170                              <1> 	vV_pop eax
   170                              <2> 
   170 000001E3 4983EF04            <2>  sub vV_sp , 4
   170 000001E7 418B07              <2>  mov %1 , [vV_sp]
   170                              <2> 
   171                              <1> 	
   172 000001EA 48BF-               <1> 	mov rdi , vV_output_buffer
   172 000001EC [8701000000000000]  <1>
   173 000001F4 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   174                              <1> 	
   175 000001FB 678807              <1> 	mov [edi] , al
   176                              <1> 	
   177 000001FE BF[87010000]        <1> 	mov edi , vV_output_buffer
   178 00000203 B801000000          <1> 	mov eax , 1
   179                              <1> 	
   180 00000208 C3                  <1> 	ret	
   181                              <1> 	
   182                              <1> vV_io_read_packed_char:
   183                              <1> 
   184                              <1> 	vV_pop eax
   184                              <2> 
   184 00000209 4983EF04            <2>  sub vV_sp , 4
   184 0000020D 418B07              <2>  mov %1 , [vV_sp]
   184                              <2> 
   185                              <1> 	
   186 00000210 48BF-               <1> 	mov rdi , vV_output_buffer
   186 00000212 [8701000000000000]  <1>
   187 0000021A 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   188                              <1> 	
   189 00000221 678907              <1> 	mov [edi] , eax
   190                              <1> 	
   191 00000224 BF[87010000]        <1> 	mov edi , vV_output_buffer
   192 00000229 B804000000          <1> 	mov eax , 4	
   193                              <1> 	
   194 0000022E C3                  <1> 	ret
   195                              <1> 		
   196                              <1> ;-------------------------------------------------------------------------------
   197                              <1> ;-------------------------------------------------------------------------------
   198                              <1> ;-------------------------------------------------------------------------------
   199                              <1> ;-------------------------------------------------------------------------------
   200                              <1> ;-------------------------------------------------------------------------------
   201                              <1> ;-------------------------------------------------------------------------------
   202                              <1> ;-------------------------------------------------------------------------------
   203                              <1> 	
   204                              <1> vV_io_read:
   205                              <1> 
   206                              <1> 								
   207 0000022F 48BE-               <1> 		mov rsi , vV_input_buffer		;ptr to string destination	
   207 00000231 [8400000000000000]  <1>
   208 00000239 BAFF000000          <1> 		mov edx , vV_input_buffer_size				;string lenght	
   209 0000023E BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   210 00000243 B800000000          <1> 		mov rax , 0				; read sysCall
   211                              <1> 		
   212 00000248 0F05                <1> 		syscall
   213                              <1> 	
   214                              <1> ;-------------Buffer_Overflow_Execption  
   215                              <1> 
   216                              <1> 
   217                              <1> 
   218 0000024A 3DFF000000          <1> 		cmp eax , 255				;Check if Buffer Is Full
   219                              <1> 		
   220 0000024F 721F                <1> 			jb .no_overflow
   221                              <1> 			
   222 00000251 803C25[82010000]0A  <1> 		cmp BYTE[vV_input_buffer + vV_input_buffer_size-1] , 0xa	;Check if Buffer end with "\n"
   223                              <1> 		
   224 00000259 7415                <1> 			je .no_overflow
   225                              <1> 		
   226                              <1> 		
   227 0000025B 50                  <1> 			push rax
   228 0000025C 53                  <1> 			push rbx
   229                              <1> 		
   230 0000025D B401                <1> 			mov ah , vV_ERR_IO_I_OVERFLOW
   231 0000025F 6683C800            <1> 			or ax , 0
   232 00000263 4831DB              <1> 			xor rbx , rbx
   233 00000266 4889F3              <1> 			mov rbx , rsi
   234                              <1> 		
   235 00000269 E803FEFFFF          <1> 			call vV_error
   236                              <1> 		
   237 0000026E 5B                  <1> 			pop rbx
   238 0000026F 58                  <1> 			pop rax
   239                              <1> 		
   240                              <1> 			;ret
   241                              <1> 		
   242                              <1> 		.no_overflow:
   243                              <1> 		
   244 00000270 C3                  <1> 			ret
   245                              <1> 		
   246                              <1> 		
   247                              <1> 	
   248                              <1> 	
   249                              <1> vV_io_get_default:
   250                              <1> 
   251 00000271 41BA[11030000]      <1> 	mov r10d , vV_ascii_as_dec			;TODO: default settings
   252 00000277 E801000000          <1> 	call vV_io_get
   253 0000027C C3                  <1> 	ret
   254                              <1> 	
   255                              <1> 	
   256                              <1> vV_io_get:						;convert inputed value to 
   257                              <1> 							;32bit int, push it on
   258                              <1> 							;the stack
   259 0000027D E8ADFFFFFF          <1> 	call vV_io_read
   260                              <1> 		
   261                              <1> ;----------------------------------------------	
   262                              <1> 
   263 00000282 53                  <1> 	push rbx				;Save rbx (conversion uses it) 
   264                              <1> 
   265 00000283 89C3                <1> 		mov ebx , eax 			;send char count by ebx
   266 00000285 31FF                <1> 		xor edi , edi 			;zero out counter
   267 00000287 BE[84000000]        <1> 		mov esi , vV_input_buffer	;Set source to I_buffer
   268                              <1> 		
   269                              <1> 
   270 0000028C 41FFD2              <1> 		call r10
   271                              <1> 		
   272 0000028F 5B                  <1> 	pop rbx
   273                              <1> 	
   274                              <1> 		vV_push eax
   274                              <2> 
   274 00000290 418907              <2>  mov DWORD[vV_sp] , %1
   274 00000293 4983C704            <2>  add vV_sp , 4
   274                              <2> 
   275                              <1> 		
   276 00000297 C3                  <1> 		ret
   277                              <1> 
   278                              <1> 
   279                              <1> ;-------------------------------------------------------------------------------
   280                              <1> ;-------------------------------------------------------------------------------
   281                              <1> 
   282                              <1> 
   283                              <1> vV_io_get_char:
   284                              <1> 
   285                              <1> 
   286 00000298 E892FFFFFF          <1> 	call vV_io_read
   287                              <1> 	
   288 0000029D 31D2                <1> 	xor edx , edx
   289                              <1> 	
   290 0000029F 8A1425[84000000]    <1> 	mov dl , [vV_input_buffer]
   291                              <1> 	
   292                              <1> 	vV_push edx
   292                              <2> 
   292 000002A6 418917              <2>  mov DWORD[vV_sp] , %1
   292 000002A9 4983C704            <2>  add vV_sp , 4
   292                              <2> 
   293                              <1> 	
   294 000002AD C3                  <1> 	ret
   295                              <1> 	
   296                              <1> vV_io_get_packed_char:
   297                              <1> 
   298 000002AE C70425[84000000]00- <1> 	mov DWORD [vV_input_buffer] , 0
   298 000002B6 000000              <1>
   299                              <1> 
   300 000002B9 E871FFFFFF          <1> 	call vV_io_read
   301                              <1> 	
   302 000002BE 31D2                <1> 	xor edx , edx
   303                              <1> 	
   304 000002C0 8B1425[84000000]    <1> 	mov edx, [vV_input_buffer]
   305                              <1> 	
   306                              <1> 	vV_push edx
   306                              <2> 
   306 000002C7 418917              <2>  mov DWORD[vV_sp] , %1
   306 000002CA 4983C704            <2>  add vV_sp , 4
   306                              <2> 
   307                              <1> 	
   308 000002CE C3                  <1> 	ret
   309                              <1> 	
   310                              <1> 		
   311                              <1> 		
   312                              <1> 
   313                              <1> 
   314                              <1> 
     8                                  %include "vVc/assembly/w_runtime/vV_ascii.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> segment .text 
     4                              <1> 
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> vV_ascii_as_hex2:						;Jumped to from parse_num OR called
     9                              <1> 								;use edi as counter/offset in string !Set if direct call
    10                              <1> 								;use esi as source string
    11                              <1> 								;concatenate result in eax
    12                              <1> 								;parse digit in cl
    13                              <1> 								
    14                              <1> 								;use r8 for base
    15                              <1> 								;use r9 for max_value
    16                              <1> 								
    17                              <1> 							
    18                              <1> 	;mov r8 , 16	
    19                              <1> 	
    20                              <1> 	.start_loop:
    21                              <1> 	
    22 000002CF 678A0C3E            <1> 		mov cl , [esi + edi]
    23                              <1> 	
    24                              <1> 		
    25 000002D3 80F930              <1> 		cmp cl , 48
    26                              <1> 		
    27 000002D6 7265                <1> 			jb vV_ascii_unvalid
    28                              <1> 			
    29 000002D8 80F93A              <1> 		cmp cl , 58
    30                              <1> 		
    31 000002DB 720D                <1> 			jb .pass_int
    32                              <1> 			
    33 000002DD 80F966              <1> 			cmp cl , 'f'
    34                              <1> 			
    35 000002E0 775B                <1> 				ja vV_ascii_unvalid
    36                              <1> 			
    37 000002E2 80F961              <1> 			cmp cl , 'a'
    38                              <1> 			
    39 000002E5 7256                <1> 				jb vV_ascii_unvalid
    40                              <1> 				
    41 000002E7 80E927              <1> 			sub cl , 39
    42                              <1> 				
    43                              <1> 			
    44                              <1> 		.pass_int:	
    45                              <1> 			
    46 000002EA 80E930              <1> 		sub cl , '0'
    47                              <1> 		
    48                              <1> 		
    49                              <1> 		
    50 000002ED 31D2                <1> 		xor edx , edx
    51                              <1> 		
    52 000002EF F8                  <1> 		clc
    53                              <1> 		
    54 000002F0 41F7E0              <1> 		mul r8d
    55                              <1> 		
    56 000002F3 725D                <1> 		jc vV_ascii_overflow
    57                              <1> 		
    58 000002F5 01C8                <1> 		add eax , ecx
    59                              <1> 		
    60                              <1> 		.pass02:
    61                              <1> 		
    62 000002F7 FFC7                <1> 		inc edi
    63                              <1> 		
    64 000002F9 39DF                <1> 		cmp edi , ebx
    65                              <1> 		
    66 000002FB 72D2                <1> 		jb .start_loop
    67                              <1> 
    68                              <1> 		
    69 000002FD C3                  <1> 		ret	
    70                              <1> 		
    71                              <1> 		
    72                              <1> ;
    73                              <1> ;				ebx		esi
    74                              <1> ;	ascii_to_format( buffer_size , buffer_adress ) 
    75                              <1> ;		
    76                              <1> ;
    77                              <1> ;	set:	rcx,rdx (rax) to 0
    78                              <1> ;		r8,r9
    79                              <1> ;		
    80                              <1> ;	call: specialized dexodefunction
    81                              <1> 		
    82                              <1> vV_ascii_as_hex:
    83                              <1> 	
    84 000002FE FFCB                <1> 	dec ebx
    85 00000300 41B810000000        <1> 	mov r8 , 16	
    86 00000306 4831C0              <1> 	xor rax , rax 		;(just in case not switching from dec mode)			
    87 00000309 4831C9              <1> 	xor rcx , rcx
    88 0000030C 4831D2              <1> 	xor rdx , rdx
    89 0000030F EBBE                <1> 	jmp vV_ascii_as_hex2
    90                              <1> 
    91                              <1> vV_ascii_as_dec:
    92                              <1> 
    93 00000311 FFCB                <1> 	dec ebx
    94 00000313 41B80A000000        <1> 	mov r8 , 10			
    95 00000319 41B93A000000        <1> 	mov r9 , 58
    96 0000031F 4831C9              <1> 	xor rcx , rcx
    97 00000322 4831D2              <1> 	xor rdx , rdx
    98 00000325 EB5E                <1> 	jmp vV_ascii_as_decbin
    99                              <1> 
   100                              <1> vV_ascii_as_bin:
   101                              <1> 
   102 00000327 FFCB                <1> 	dec ebx
   103 00000329 41B802000000        <1> 	mov r8 , 2			
   104 0000032F 41B932000000        <1> 	mov r9 , 50
   105 00000335 4831C9              <1> 	xor rcx , rcx
   106 00000338 4831D2              <1> 	xor rdx , rdx
   107                              <1> 	
   108 0000033B EB48                <1> 	jmp vV_ascii_as_decbin
   109                              <1> 	
   110                              <1> vV_ascii_unvalid:
   111                              <1> 	
   112                              <1> 		;mov rax , 24;	#TODO: Defined Errors code/ data in file
   113                              <1> 		;xor rdx , rdx
   114                              <1> 		;mov dl , cl
   115                              <1> 		
   116                              <1> 		;call w_forced_exit
   117                              <1> 		
   118 0000033D 50                  <1> 		push rax
   119 0000033E 53                  <1> 		push rbx
   120                              <1> 		
   121 0000033F B403                <1> 		mov ah , vV_ERR_IO_I_UNVALID
   122 00000341 6683C800            <1> 		or ax , 0
   123 00000345 4831DB              <1> 		xor rbx , rbx
   124 00000348 88CB                <1> 		mov bl , cl
   125                              <1> 		
   126 0000034A E822FDFFFF          <1> 		call vV_error
   127                              <1> 		
   128 0000034F 5B                  <1> 		pop rbx
   129 00000350 58                  <1> 		pop rax
   130                              <1> 		
   131 00000351 C3                  <1> 		ret
   132                              <1> 		
   133                              <1> 		
   134                              <1> 		
   135                              <1> 		
   136                              <1> vV_ascii_overflow:
   137                              <1> 	
   138 00000352 50                  <1> 		push rax
   139 00000353 53                  <1> 		push rbx
   140                              <1> 		
   141 00000354 4831DB              <1> 		xor rbx , rbx
   142 00000357 4889C3              <1> 		mov rbx , rax
   143                              <1> 		
   144                              <1> 		;or rbx , 0x00010000
   145                              <1> 		
   146 0000035A B401                <1> 		mov ah , vV_ERR_IO_I_OVERFLOW
   147 0000035C 6683C800            <1> 		or ax , 0
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151 00000360 E80CFDFFFF          <1> 		call vV_error
   152                              <1> 		
   153 00000365 5B                  <1> 		pop rbx
   154 00000366 58                  <1> 		pop rax
   155                              <1> 		
   156                              <1> 		;TODO: Maybe use vV_error return value for decision making
   157                              <1> 		
   158 00000367 B8FFFFFFFF          <1> 		mov eax , -1
   159                              <1> 		
   160 0000036C C3                  <1> 		ret
   161                              <1> 		
   162                              <1> 		
   163                              <1> vV_ascii_change_to_hex:
   164                              <1> 		
   165 0000036D 83F800              <1> 		cmp eax , 0
   166                              <1> 			
   167 00000370 75CB                <1> 			jne vV_ascii_unvalid
   168                              <1> 			
   169 00000372 41B810000000        <1> 		mov r8 , 16
   170 00000378 4831C9              <1> 		xor rcx , rcx
   171 0000037B 4831C0              <1> 		xor rax ,rax
   172                              <1> 				
   173 0000037E FFC7                <1> 		inc edi
   174 00000380 E94AFFFFFF          <1> 		jmp vV_ascii_as_hex2		
   175                              <1> 		
   176                              <1> 	
   177                              <1> 
   178                              <1> 
   179                              <1> vV_ascii_as_decbin:						;ebx: number of char to read
   180                              <1> 
   181                              <1> 	
   182                              <1> 
   183                              <1> 								;use edi as counter/offset in string
   184                              <1> 								;concatenate result in eax
   185                              <1> 								;parse digit in cl
   186                              <1> 								
   187                              <1> 								;use r8 for base
   188                              <1> 								;use r9 for max_value					
   189                              <1> 								;itou
   190                              <1> 	;xor edi, edi			;should be set by caller
   191 00000385 4831C0              <1> 	xor rax , rax
   192                              <1> 	
   193 00000388 4831C9              <1> 	xor rcx , rcx
   194                              <1> 	
   195 0000038B 4831D2              <1> 	xor rdx , rdx
   196                              <1> 	
   197                              <1> 	
   198                              <1> 	.start_loop:
   199                              <1> 	
   200 0000038E 678A0C3E            <1> 		mov cl , [esi + edi]
   201                              <1> 		
   202                              <1> 		
   203 00000392 80F962              <1> 		cmp cl , 'b'										
   204 00000395 7513                <1> 			jne .pass01
   205                              <1> 		
   206                              <1> 		.format_change:
   207                              <1> 			
   208 00000397 83F800              <1> 			cmp eax , 0
   209                              <1> 			
   210 0000039A 75A1                <1> 				jne vV_ascii_unvalid
   211                              <1> 				
   212 0000039C 41B802000000        <1> 			mov r8 , 2
   213                              <1> 			
   214 000003A2 41B932000000        <1> 			mov r9 , 50
   215                              <1> 	
   216 000003A8 EB26                <1> 			jmp .pass02
   217                              <1> 		
   218                              <1> 		
   219                              <1> 	
   220                              <1> 		.pass01:
   221                              <1> 		
   222 000003AA 80F968              <1> 		cmp cl , 'h'											
   223 000003AD 74BE                <1> 			je vV_ascii_change_to_hex
   224 000003AF 80F978              <1> 		cmp cl , 'x'											
   225 000003B2 74B9                <1> 			je vV_ascii_change_to_hex
   226                              <1> 			
   227                              <1> 			
   228 000003B4 4438C9              <1> 		cmp cl , r9b
   229                              <1> 		
   230 000003B7 7384                <1> 			jae vV_ascii_unvalid
   231                              <1> 		
   232 000003B9 80F930              <1> 		cmp cl , 48
   233                              <1> 		
   234 000003BC 0F827BFFFFFF        <1> 			jb vV_ascii_unvalid
   235                              <1> 			
   236                              <1> 		
   237                              <1> 			
   238 000003C2 80E930              <1> 		sub cl , 48
   239                              <1> 		
   240 000003C5 4831D2              <1> 		xor rdx , rdx
   241 000003C8 F8                  <1> 		clc
   242                              <1> 		
   243 000003C9 41F7E0              <1> 		mul r8d
   244                              <1> 		
   245 000003CC 7284                <1> 		jc vV_ascii_overflow
   246                              <1> 		
   247 000003CE 01C8                <1> 		add eax , ecx
   248                              <1> 		
   249                              <1> 		.pass02:
   250                              <1> 		
   251 000003D0 FFC7                <1> 		inc edi
   252                              <1> 		
   253 000003D2 39DF                <1> 		cmp edi , ebx
   254                              <1> 		
   255 000003D4 72B8                <1> 		jb .start_loop
   256                              <1> 		
   257                              <1> 		
   258 000003D6 C3                  <1> 		ret			; result should be in eax
   259                              <1> 		
   260                              <1> 
   261                              <1> 	
   262                              <1> ;------------------------------------------------------------------------------------------
   263                              <1> ;------------------------------------------------------------------------------------------
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> vV_ascii_int_to_hex:					;value in eax
   268                              <1> 						;dest in rdi
   269                              <1> 
   270                              <1> 
   271                              <1> 
   272 000003D7 31C9                <1> 	xor ecx , ecx	
   273                              <1> 	
   274 000003D9 BE10000000          <1> 	mov esi , 16
   275                              <1> 
   276                              <1> 	
   277                              <1> 	.loop01:
   278                              <1> 	
   279 000003DE 4831D2              <1> 		xor rdx , rdx
   280                              <1> 		
   281 000003E1 F7F6                <1> 		div esi
   282                              <1> 		
   283                              <1> 		
   284 000003E3 80FA0A              <1> 		cmp dl , 10
   285                              <1> 		
   286 000003E6 7203                <1> 		jb .dec
   287                              <1> 		
   288 000003E8 80C207              <1> 			add dl , 7
   289                              <1> 		
   290                              <1> 		.dec:
   291                              <1> 		
   292 000003EB 80C230              <1> 			add dl , '0'
   293                              <1> 		
   294                              <1> 		
   295 000003EE 52                  <1> 		push rdx
   296                              <1> 		
   297 000003EF FFC1                <1> 		inc ecx
   298                              <1> 		
   299 000003F1 39F0                <1> 		cmp eax , esi
   300                              <1> 		
   301 000003F3 73E9                <1> 		jae .loop01
   302                              <1> 	
   303                              <1> 	
   304 000003F5 3C0A                <1> 	cmp al , 10
   305                              <1> 		
   306 000003F7 7202                <1> 		jb .dec2
   307                              <1> 		
   308 000003F9 0407                <1> 			add al , 7
   309                              <1> 		
   310                              <1> 		.dec2:
   311                              <1> 		
   312 000003FB 0430                <1> 			add al , '0'	
   313 000003FD 8807                <1> 	mov [rdi] , al
   314                              <1> 	
   315 000003FF EB1B                <1> 	jmp vV_ascii_pop_digits
   316                              <1> 		
   317                              <1> 	
   318                              <1> 	
   319                              <1> 	
   320                              <1> vV_ascii_int_to_dec:					;value in eax
   321                              <1> 						;dest in rdi
   322                              <1> 						;max_dest_size in r9d
   323                              <1> 
   324                              <1> 
   325                              <1> 
   326 00000401 31C9                <1> 	xor ecx , ecx	
   327                              <1> 	
   328 00000403 BE0A000000          <1> 	mov esi , 10
   329                              <1> 	
   330                              <1> 
   331                              <1> 
   332                              <1> 	
   333                              <1> 	.loop01:
   334                              <1> 	
   335 00000408 4831D2              <1> 		xor rdx , rdx
   336                              <1> 		
   337 0000040B F7F6                <1> 		div esi
   338                              <1> 		
   339                              <1> 		
   340 0000040D 80C230              <1> 		add dl , '0'
   341 00000410 52                  <1> 		push rdx
   342                              <1> 		
   343 00000411 FFC1                <1> 		inc ecx
   344                              <1> 		
   345 00000413 83F80A              <1> 		cmp eax , 10
   346                              <1> 		
   347 00000416 73F0                <1> 		jae .loop01
   348                              <1> 	
   349 00000418 0430                <1> 	add al , '0'	
   350 0000041A 8807                <1> 	mov [rdi] , al
   351                              <1> 		
   352                              <1> 	
   353                              <1> 		
   354                              <1> vV_ascii_pop_digits:			; Need nb of digits currently on stack(ecx)
   355                              <1> 						;dest in rdi
   356 0000041C 41B801000000        <1> 		mov r8d , 1
   357 00000422 FFC1                <1> 		inc ecx
   358                              <1> 		
   359 00000424 4439C9              <1> 		cmp ecx , r9d
   360                              <1> 		
   361 00000427 7219                <1> 		jb .loopstart
   362                              <1> 		
   363                              <1> 	
   364 00000429 50                  <1> 			push rax
   365 0000042A 53                  <1> 			push rbx
   366                              <1> 		
   367 0000042B B410                <1> 			mov ah , vV_ERR_MEMORY_BUFFER_LIMIT
   368 0000042D 6683C800            <1> 			or ax , 0
   369 00000431 4831DB              <1> 			xor rbx , rbx
   370 00000434 89FB                <1> 			mov ebx , edi
   371                              <1> 		
   372 00000436 E836FCFFFF          <1> 			call vV_error
   373                              <1> 		
   374 0000043B 5B                  <1> 			pop rbx
   375 0000043C 58                  <1> 			pop rax
   376                              <1> 			
   377 0000043D 4489C9              <1> 			mov ecx , r9d		;Should protect memory..
   378 00000440 FFC9                <1> 			dec ecx		;will need testing
   379                              <1> 		
   380                              <1> 						
   381                              <1> 		.loopstart:
   382                              <1> 		
   383 00000442 5A                  <1> 			pop rdx
   384 00000443 6742881407          <1> 			mov BYTE[edi + r8d] , dl
   385 00000448 41FFC0              <1> 			inc r8d
   386                              <1> 			
   387 0000044B 4139C8              <1> 			cmp r8d , ecx
   388                              <1> 		
   389 0000044E 72F2                <1> 		jb .loopstart
   390                              <1> 	
   391                              <1> 	
   392 00000450 89C8                <1> 		mov eax , ecx
   393                              <1> 		
   394 00000452 C3                  <1> 		ret	
   395                              <1> 	
   396                              <1> 	
   397                              <1> vV_ascii_int_to_bin:					;value in eax, 
   398                              <1> 							
   399                              <1> 
   400                              <1> 
   401 00000453 31C9                <1> 	xor ecx , ecx
   402                              <1> 	
   403                              <1> 	
   404                              <1> 	.loop01:
   405                              <1> 	
   406                              <1> 		
   407 00000455 D1E8                <1> 		shr eax , 1
   408                              <1> 		
   409 00000457 7205                <1> 		jc .one
   410                              <1> 		
   411 00000459 B230                <1> 			mov dl , '0'
   412 0000045B 52                  <1> 			push rdx
   413                              <1> 			
   414 0000045C EB03                <1> 		jmp .next
   415                              <1> 		.one:
   416                              <1> 			
   417 0000045E B231                <1> 			mov dl , '1'
   418 00000460 52                  <1> 			push rdx
   419                              <1> 		
   420                              <1> 		.next:
   421                              <1> 		
   422 00000461 FFC1                <1> 		inc ecx
   423                              <1> 		
   424 00000463 83F801              <1> 		cmp eax , 1
   425                              <1> 		
   426 00000466 77ED                <1> 		ja .loop01
   427                              <1> 	
   428 00000468 0430                <1> 	add al , '0'	
   429 0000046A 8807                <1> 	mov [rdi] , al
   430                              <1> 	
   431 0000046C EBAE                <1> 	jmp vV_ascii_pop_digits
   432                              <1> 	
   433                              <1> 	
   434                              <1> ;Will need a special version for String stack
   435                              <1> 
   436                              <1> 
   437                              <1> 
   438                              <1> 
   439                              <1> 
   440                              <1> 
   441                              <1> 
     9                                  %include "vVc/assembly/w_runtime/vV_system90.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	
     5                              <1> 	
     6                              <1> 	stacks: 
     7                              <1> 
     8                              <1> 
     9 00000286 <res 00040000>      <1> 	string_stack_start: resb 262144
    10                              <1> 
    11                              <1> 
    12                              <1> 	
    13                              <1> 	
    14                              <1> 						
    15 00040286 <res 00020000>      <1> 	fake_stack_start: resb 131072
    10                                  
    11                                  
    12                                  
    13                                  global w_entry_point
    14                                  
    15                                  
    16                                  
    17                                  segment .text 
    18                                  
    19                                  
    20                                  
    21                                  
    22                                  vV_entry_point:
    23                                  
    24                                  
    25 0000046E 4889E5                  	mov rbp, rsp			;Setup Stack Frame
    26                                  	
    27                                  	
    28                                   ;OpADR: [0]  ; PUSH opcode 
    29                                  
    30                                  	vV_push 1848604960 
    30                              <1> 
    30 00000471 41C70720792F6E      <1>  mov DWORD[vV_sp] , %1
    30 00000478 4983C704            <1>  add vV_sp , 4
    30                              <1> 
    31                                  
    32                                  
    33                                   ;OpADR: [1]  ; PUSH opcode 
    34                                  
    35                                  	vV_push 538984302 
    35                              <1> 
    35 0000047C 41C7076E3F2020      <1>  mov DWORD[vV_sp] , %1
    35 00000483 4983C704            <1>  add vV_sp , 4
    35                              <1> 
    36                                  
    37                                  
    38                                   ;OpADR: [2]  ; PUSH opcode 
    39                                  
    40                                  	vV_push 1767991137 
    40                              <1> 
    40 00000487 41C70761676169      <1>  mov DWORD[vV_sp] , %1
    40 0000048E 4983C704            <1>  add vV_sp , 4
    40                              <1> 
    41                                  
    42                                  
    43                                   ;OpADR: [3]  ; PUSH opcode 
    44                                  
    45                                  	vV_push 540701554 
    45                              <1> 
    45 00000492 41C70772733A20      <1>  mov DWORD[vV_sp] , %1
    45 00000499 4983C704            <1>  add vV_sp , 4
    45                              <1> 
    46                                  
    47                                  
    48                                   ;OpADR: [4]  ; PUSH opcode 
    49                                  
    50                                  	vV_push 1700949365 
    50                              <1> 
    50 0000049D 41C707756D6265      <1>  mov DWORD[vV_sp] , %1
    50 000004A4 4983C704            <1>  add vV_sp , 4
    50                              <1> 
    51                                  
    52                                  
    53                                   ;OpADR: [5]  ; PUSH opcode 
    54                                  
    55                                  	vV_push 1847604256 
    55                              <1> 
    55 000004A8 41C7072034206E      <1>  mov DWORD[vV_sp] , %1
    55 000004AF 4983C704            <1>  add vV_sp , 4
    55                              <1> 
    56                                  
    57                                  
    58                                   ;OpADR: [6]  ; PUSH opcode 
    59                                  
    60                                  	vV_push 1701869940 
    60                              <1> 
    60 000004B3 41C70774797065      <1>  mov DWORD[vV_sp] , %1
    60 000004BA 4983C704            <1>  add vV_sp , 4
    60                              <1> 
    61                                  
    62                                  
    63                                   ;OpADR: [7]  ; PUSH opcode 
    64                                  
    65                                  	vV_push 0 
    65                              <1> 
    65 000004BE 41C70700000000      <1>  mov DWORD[vV_sp] , %1
    65 000004C5 4983C704            <1>  add vV_sp , 4
    65                              <1> 
    66                                  
    67                                  
    68                                  
    69                                  	wblock_4:		
    70                                  
    71                                  ;------------------------------------------------------
    72                                  
    73                                  
    74                                   ;OpADR: [8]  ; DROP opcode 
    75                                  
    76 000004C9 4983EF04                	sub vV_sp , 4	
    77                                  
    78                                   ;OpADR: [9]  ; DUP opcode (7)			
    79                                  
    80                                  	vV_dup 7			
    80                              <1> 
    80 000004CD B907000000          <1>  mov ecx , %1
    80 000004D2 498D77E4            <1>  lea rsi , [vV_sp-cell(%1)]
    80 000004D6 4C89FF              <1>  mov rdi , vV_sp
    80                              <1> 
    80 000004D9 F3A5                <1>  rep movsd
    80                              <1> 
    80 000004DB 4983C71C            <1>  add vV_sp , cell(%1)
    80                              <1> 
    81                                  
    82                                  
    83                                   ;OpADR: [10]  ; BUFF_OUT opcode (9)			
    84                                  
    85                                  
    86 000004DF E8F4FCFFFF              	call vV_io_out_packed_char_buffer				
    87                                  						
    88                                  
    89                                   ;OpADR: [11]  ; BUFF_OUT opcode (9)			
    90                                  
    91                                  
    92 000004E4 E8EFFCFFFF              	call vV_io_out_packed_char_buffer				
    93                                  						
    94                                  
    95                                   ;OpADR: [12]  ; BUFF_OUT opcode (9)			
    96                                  
    97                                  
    98 000004E9 E8EAFCFFFF              	call vV_io_out_packed_char_buffer				
    99                                  						
   100                                  
   101                                   ;OpADR: [13]  ; BUFF_OUT opcode (9)			
   102                                  
   103                                  
   104 000004EE E8E5FCFFFF              	call vV_io_out_packed_char_buffer				
   105                                  						
   106                                  
   107                                   ;OpADR: [14]  ; FLUSH opcode					
   108                                  
   109 000004F3 E814FCFFFF              		call vV_io_flush	
   110                                  
   111                                   ;OpADR: [15]  ; GET opcode (0)			
   112                                  
   113 000004F8 E874FDFFFF              	call vV_io_get_default			
   114                                  						
   115                                  
   116                                   ;OpADR: [16]  ; GET opcode (0)			
   117                                  
   118 000004FD E86FFDFFFF              	call vV_io_get_default			
   119                                  						
   120                                  
   121                                   ;OpADR: [17]  ; GET opcode (0)			
   122                                  
   123 00000502 E86AFDFFFF              	call vV_io_get_default			
   124                                  						
   125                                  
   126                                   ;OpADR: [18]  ; GET opcode (0)			
   127                                  
   128 00000507 E865FDFFFF              	call vV_io_get_default			
   129                                  						
   130                                  
   131                                   ;OpADR: [19]  ; ADD opcode 					
   132                                  
   133 0000050C 418B47F8                	mov eax , vV_2nd			
   134 00000510 410347FC                	add eax , vV_top			
   135 00000514 418947F8                	mov vV_2nd , eax			
   136                                  
   137                                  	vV_dec_sp 1		
   137                              <1> 
   137 00000518 4983EF04            <1>  sub vV_sp , cell(%1)
   137                              <1> 
   138                                  
   139                                   ;OpADR: [20]  ; ADD opcode 					
   140                                  
   141 0000051C 418B47F8                	mov eax , vV_2nd			
   142 00000520 410347FC                	add eax , vV_top			
   143 00000524 418947F8                	mov vV_2nd , eax			
   144                                  
   145                                  	vV_dec_sp 1		
   145                              <1> 
   145 00000528 4983EF04            <1>  sub vV_sp , cell(%1)
   145                              <1> 
   146                                  
   147                                   ;OpADR: [21]  ; ADD opcode 					
   148                                  
   149 0000052C 418B47F8                	mov eax , vV_2nd			
   150 00000530 410347FC                	add eax , vV_top			
   151 00000534 418947F8                	mov vV_2nd , eax			
   152                                  
   153                                  	vV_dec_sp 1		
   153                              <1> 
   153 00000538 4983EF04            <1>  sub vV_sp , cell(%1)
   153                              <1> 
   154                                  
   155                                   ;OpADR: [22]  ; FLUSH opcode					
   156                                  
   157 0000053C E8CBFBFFFF              		call vV_io_flush	
   158                                  
   159                                   ;OpADR: [23]  ; DUP opcode (1)			
   160                                  
   161                                  	vV_dup 1			
   161                              <1> 
   161 00000541 B901000000          <1>  mov ecx , %1
   161 00000546 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   161 0000054A 4C89FF              <1>  mov rdi , vV_sp
   161                              <1> 
   161 0000054D F3A5                <1>  rep movsd
   161                              <1> 
   161 0000054F 4983C704            <1>  add vV_sp , cell(%1)
   161                              <1> 
   162                                  
   163                                  
   164                                   ;OpADR: [24]  ; OUT opcode (0)			
   165                                  
   166 00000553 E8F5FBFFFF              	call vV_io_out_default			
   167                                  						
   168                                  
   169                                   ;OpADR: [25]  ; FLUSH opcode					
   170                                  
   171 00000558 E8AFFBFFFF              		call vV_io_flush	
   172                                  
   173                                   ;OpADR: [26]  ; DUP opcode (1)			
   174                                  
   175                                  	vV_dup 1			
   175                              <1> 
   175 0000055D B901000000          <1>  mov ecx , %1
   175 00000562 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   175 00000566 4C89FF              <1>  mov rdi , vV_sp
   175                              <1> 
   175 00000569 F3A5                <1>  rep movsd
   175                              <1> 
   175 0000056B 4983C704            <1>  add vV_sp , cell(%1)
   175                              <1> 
   176                                  
   177                                  
   178                                   ;OpADR: [27]  ; OUT opcode (3)			
   179                                  
   180 0000056F 41BA[D7030000]          	mov r10d , vV_FORMAT_HEX		
   181 00000575 E8ECFBFFFF              	call vV_io_out				
   182                                  						
   183                                  
   184                                   ;OpADR: [28]  ; FLUSH opcode					
   185                                  
   186 0000057A E88DFBFFFF              		call vV_io_flush	
   187                                  
   188                                   ;OpADR: [29]  ; OUT opcode (4)			
   189                                  
   190 0000057F 41BA[53040000]          	mov r10d , vV_FORMAT_BIN		
   191 00000585 E8DCFBFFFF              	call vV_io_out				
   192                                  						
   193                                  
   194                                   ;OpADR: [30]  ; FLUSH opcode					
   195                                  
   196 0000058A E87DFBFFFF              		call vV_io_flush	
   197                                  
   198                                   ;OpADR: [31]  ; BUFF_OUT opcode (9)			
   199                                  
   200                                  
   201 0000058F E844FCFFFF              	call vV_io_out_packed_char_buffer				
   202                                  						
   203                                  
   204                                   ;OpADR: [32]  ; BUFF_OUT opcode (9)			
   205                                  
   206                                  
   207 00000594 E83FFCFFFF              	call vV_io_out_packed_char_buffer				
   208                                  						
   209                                  
   210                                   ;OpADR: [33]  ; BUFF_OUT opcode (9)			
   211                                  
   212                                  
   213 00000599 E83AFCFFFF              	call vV_io_out_packed_char_buffer				
   214                                  						
   215                                  
   216                                   ;OpADR: [34]  ; FLUSH opcode					
   217                                  
   218 0000059E E869FBFFFF              		call vV_io_flush	
   219                                  
   220                                   ;OpADR: [35]  ; GET opcode (8)			
   221                                  
   222                                  		
   223 000005A3 E8F0FCFFFF              	call vV_io_get_char				
   224                                  						
   225                                  
   226                                   ;OpADR: [36]  ; DUP opcode (1)			
   227                                  
   228                                  	vV_dup 1			
   228                              <1> 
   228 000005A8 B901000000          <1>  mov ecx , %1
   228 000005AD 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   228 000005B1 4C89FF              <1>  mov rdi , vV_sp
   228                              <1> 
   228 000005B4 F3A5                <1>  rep movsd
   228                              <1> 
   228 000005B6 4983C704            <1>  add vV_sp , cell(%1)
   228                              <1> 
   229                                  
   230                                  
   231                                   ;OpADR: [37]  ; PUSH opcode 
   232                                  
   233                                  	vV_push 121 
   233                              <1> 
   233 000005BA 41C70779000000      <1>  mov DWORD[vV_sp] , %1
   233 000005C1 4983C704            <1>  add vV_sp , 4
   233                              <1> 
   234                                  
   235                                  
   236                                   ;OpADR: [38]  ; EQUAL opcode					
   237                                  
   238 000005C5 418B47FC                	mov eax , vV_top			
   239 000005C9 413947F8                	cmp DWORD vV_2nd , eax			
   240                                  
   241 000005CD 75(0B)                  	jnz short 0xb				
   242                                  
   243 000005CF 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   244                                  
   245 000005D7 EB(09)                  	jmp short 0x9				
   246                                  
   247 000005D9 41C747F800000000        			mov DWORD vV_2nd , 0	
   248                                  
   249                                  	vV_dec_sp 1				
   249                              <1> 
   249 000005E1 4983EF04            <1>  sub vV_sp , cell(%1)
   249                              <1> 
   250                                  
   251                                   ;OpADR: [39]  ; IF opcode					
   252                                  
   253                                  	vV_dec_sp 1			
   253                              <1> 
   253 000005E5 4983EF04            <1>  sub vV_sp , cell(%1)
   253                              <1> 
   254 000005E9 418337FF                	xor DWORD[vV_sp] , -1			
   255 000005ED 750D                    	jne wblock_3	
   256                                  
   257                                   ;OpADR: [40]  ; PUSH opcode 
   258                                  
   259                                  	vV_push 1 
   259                              <1> 
   259 000005EF 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   259 000005F6 4983C704            <1>  add vV_sp , 4
   259                              <1> 
   260                                  
   261                                  
   262                                   ;OpADR: [41]  ; ELIF opcode					
   263                                  
   264 000005FA EB5F                    	jmp wblock_2	
   265                                  
   266                                  
   267                                  	wblock_3:		
   268                                  
   269                                  ;------------------------------------------------------
   270                                  
   271                                  
   272                                   ;OpADR: [42]  ; DUP opcode (1)			
   273                                  
   274                                  	vV_dup 1			
   274                              <1> 
   274 000005FC B901000000          <1>  mov ecx , %1
   274 00000601 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   274 00000605 4C89FF              <1>  mov rdi , vV_sp
   274                              <1> 
   274 00000608 F3A5                <1>  rep movsd
   274                              <1> 
   274 0000060A 4983C704            <1>  add vV_sp , cell(%1)
   274                              <1> 
   275                                  
   276                                  
   277                                   ;OpADR: [43]  ; PUSH opcode 
   278                                  
   279                                  	vV_push 89 
   279                              <1> 
   279 0000060E 41C70759000000      <1>  mov DWORD[vV_sp] , %1
   279 00000615 4983C704            <1>  add vV_sp , 4
   279                              <1> 
   280                                  
   281                                  
   282                                   ;OpADR: [44]  ; EQUAL opcode					
   283                                  
   284 00000619 418B47FC                	mov eax , vV_top			
   285 0000061D 413947F8                	cmp DWORD vV_2nd , eax			
   286                                  
   287 00000621 75(0B)                  	jnz short 0xb				
   288                                  
   289 00000623 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   290                                  
   291 0000062B EB(09)                  	jmp short 0x9				
   292                                  
   293 0000062D 41C747F800000000        			mov DWORD vV_2nd , 0	
   294                                  
   295                                  	vV_dec_sp 1				
   295                              <1> 
   295 00000635 4983EF04            <1>  sub vV_sp , cell(%1)
   295                              <1> 
   296                                  
   297                                   ;OpADR: [45]  ; IF opcode					
   298                                  
   299                                  	vV_dec_sp 1			
   299                              <1> 
   299 00000639 4983EF04            <1>  sub vV_sp , cell(%1)
   299                              <1> 
   300 0000063D 418337FF                	xor DWORD[vV_sp] , -1			
   301 00000641 750D                    	jne wblock_1	
   302                                  
   303                                   ;OpADR: [46]  ; PUSH opcode 
   304                                  
   305                                  	vV_push 1 
   305                              <1> 
   305 00000643 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   305 0000064A 4983C704            <1>  add vV_sp , 4
   305                              <1> 
   306                                  
   307                                  
   308                                   ;OpADR: [47]  ; ELIF opcode					
   309                                  
   310 0000064E EB0B                    	jmp wblock_2	
   311                                  
   312                                  
   313                                  	wblock_1:		
   314                                  
   315                                  ;------------------------------------------------------
   316                                  
   317                                  
   318                                   ;OpADR: [48]  ; PUSH opcode 
   319                                  
   320                                  	vV_push 0 
   320                              <1> 
   320 00000650 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   320 00000657 4983C704            <1>  add vV_sp , 4
   320                              <1> 
   321                                  
   322                                  
   323                                  
   324                                  	wblock_2:		
   325                                  
   326                                  ;------------------------------------------------------
   327                                  
   328                                  
   329                                   ;OpADR: [49]  ; WHILE opcode					
   330                                  
   331                                  	vV_dec_sp 1				
   331                              <1> 
   331 0000065B 4983EF04            <1>  sub vV_sp , cell(%1)
   331                              <1> 
   332 0000065F 41830F00                	or DWORD[vV_sp] , 0			
   333 00000663 0F8560FEFFFF            	jne wblock_4		
   334                                  		
   335 00000669 C3                      		ret
   336                                  
   337                                  ;Transpiled from vV with vVc version 0.0.2.3.1
   338                                  		
   339                                  		
