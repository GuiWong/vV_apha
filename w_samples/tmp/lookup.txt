     1                                  %include "vVc/assembly/w_runtime/vV_defines.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> ;------------------Variables From Project-------------
     5                              <1> 
     6                              <1> 	;------------------Should come from io module(need refactoring)
     7                              <1> 
     8                              <1> 
     9                              <1> 	%define vV_input_buffer_size 255
    10                              <1> 	%define vV_output_buffer_size 255
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;------------------Implementation Relative-------------
    15                              <1> 
    16                              <1> %deftok vV_sp 'r15'
    17                              <1> 
    18                              <1> %deftok vV_spS 'r14'
    19                              <1> 
    20                              <1> %deftok vV_sdir '-'
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24                              <1> 
    25                              <1> ;------------------Stack Shortcuts--------------------
    26                              <1> 
    27                              <1> %define cell(a) (a*4)
    28                              <1> 
    29                              <1> 
    30                              <1> %define vV_top [vV_sp vV_sdir %+ cell(1)]
    31                              <1> %define vV_2nd [vV_sp vV_sdir %+ cell(2)]
    32                              <1> 
    33                              <1> %define vV_stack_v(a) ([vV_sp vV_sdir %+ cell(a)])
    34                              <1> 
    35                              <1> 
    36                              <1> ;-------------------Out_Format Pointer------------------
    37                              <1> 
    38                              <1> %deftok vV_FORMAT_BIN "vV_ascii_int_to_bin"
    39                              <1> %deftok vV_FORMAT_DEC "vV_ascii_int_to_dec"
    40                              <1> %deftok vV_FORMAT_HEX "vV_ascii_int_to_hex"
    41                              <1> 
    42                              <1> 
    43                              <1> 
    44                              <1> ;--------------------Op Macros--------------------------
    45                              <1> 
    46                              <1> %macro vV_push 1
    47                              <1> 
    48                              <1> 	mov DWORD[vV_sp] , %1
    49                              <1> 	add vV_sp , 4
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro vV_pop 1
    54                              <1> 
    55                              <1> 	sub vV_sp , 4
    56                              <1> 	mov %1 , [vV_sp]
    57                              <1> 	
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro vV_swap 0
    61                              <1> 
    62                              <1> 	mov edx , [vV_sp-4]
    63                              <1> 	mov eax , [vV_sp-8]
    64                              <1> 	mov [vV_sp-8] , edx 
    65                              <1> 	mov [vV_sp-4] , eax 
    66                              <1> 	
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro vV_dup 1
    70                              <1> 
    71                              <1> 	mov ecx , %1
    72                              <1> 	lea rsi , [vV_sp-cell(%1)]
    73                              <1> 	mov rdi , vV_sp
    74                              <1> 		
    75                              <1> 	rep movsd
    76                              <1> 	
    77                              <1> 	add vV_sp , cell(%1)
    78                              <1> 	
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> 
    82                              <1> %macro vV_dec_sp 1
    83                              <1> 
    84                              <1> 	sub vV_sp , cell(%1)
    85                              <1> 	
    86                              <1> %endmacro
    87                              <1> 	
     2                                  %include "vVc/assembly/w_runtime/vV_error_code.asm"		
     1                              <1> 
     2                              <1> %define vV_ERR_IO_I_OVERFLOW 1
     3                              <1> %define vV_ERR_IO_O_OVERFLOW 2
     4                              <1> %define vV_ERR_IO_I_UNVALID 3
     5                              <1> %define vV_ERR_IO_O_UNVALID 4
     6                              <1> %define vV_ERR_IO_I_VALUE_OVERFLOW 5
     7                              <1> 
     8                              <1> 
     9                              <1> %define vV_ERR_VALUE_OVERFLOW 8
    10                              <1> 
    11                              <1> 
    12                              <1> %define vV_ERR_MEMORY_BUFFER_LIMIT 16
     3                                  %include "vVc/assembly/w_runtime/vV_runtime.asm"		
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> 
     4                              <1> ;%include "vVc/assembly/w_runtime/vV_errors.asm"
     5                              <1> ;%include "vVc/assembly/w_runtime/vV_system00.asm"
     6                              <1> ;%include "vVc/assembly/w_runtime/vV_system10.asm"
     7                              <1> ;%include "vVc/assembly/w_runtime/vV_system90.asm"
     8                              <1> 
     9                              <1> 
    10                              <1> global _start
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;extern vV_entry_point			;Defined by main program
    15                              <1> 
    16                              <1> 
    17                              <1> 
    18                              <1> 	
    19                              <1> segment .data 
    20                              <1> 
    21                              <1> 
    22                              <1> 	
    23                              <1> 
    24                              <1> segment .text 
    25                              <1> 
    26                              <1> 
    27                              <1> 	vV_forced_exit:				;rax hold exit code
    28                              <1> 							;Removed default error printing
    29                              <1> 							;This will now happens in errors module
    30                              <1> 
    31 00000000 4889C7              <1> 		mov rdi, rax
    32 00000003 B83C000000          <1> 		mov rax, SYS_EXIT
    33 00000008 0F05                <1> 		syscall
    34                              <1> 		
    35                              <1> 		
    36                              <1> 
    37                              <1> 
    38                              <1> 	save_regs:			;In case called from other process
    39                              <1> 	
    40 0000000A 58                  <1> 		pop rax
    41                              <1> 	
    42 0000000B 53                  <1> 		push rbx
    43 0000000C 4154                <1> 		push r12
    44 0000000E 4155                <1> 		push r13
    45 00000010 4156                <1> 		push r14
    46 00000012 4157                <1> 		push r15
    47                              <1> 		
    48 00000014 50                  <1> 		push rax
    49                              <1> 		
    50 00000015 C3                  <1> 		ret
    51                              <1> 		
    52                              <1> 	restore_regs:
    53                              <1> 	
    54 00000016 58                  <1> 		pop rax
    55                              <1> 	
    56 00000017 415F                <1> 		pop r15
    57 00000019 415E                <1> 		pop r14
    58 0000001B 415D                <1> 		pop r13
    59 0000001D 415C                <1> 		pop r12
    60 0000001F 5B                  <1> 		pop rbx
    61                              <1> 		
    62 00000020 50                  <1> 		push rax
    63                              <1> 		
    64 00000021 C3                  <1> 		ret
    65                              <1> 		
    66                              <1> 	setup_memory:
    67                              <1> 	
    68 00000022 C70425[80000000]00- <1> 		mov DWORD [vV_input_buffer_content] , 0
    68 0000002A 000000              <1>
    69 0000002D C70425[83010000]00- <1> 		mov DWORD [vV_output_buffer_content] , 0
    69 00000035 000000              <1>
    70                              <1> 		
    71                              <1> 		;mov DWORD [endofline] , 0xa
    72                              <1> 		
    73 00000038 C70425[14010000]-   <1> 		mov DWORD[vV_sys_format_mode] , vV_ascii_int_to_dec
    73 0000003F [01040000]          <1>
    74                              <1> 		
    75 00000043 C3                  <1> 		ret
    76                              <1> 		
    77                              <1> 		
    78                              <1> 	
    79                              <1> 		
    80                              <1> _start:				;Entry point of Every Program
    81                              <1> 	
    82                              <1> 		
    83                              <1> 
    84 00000044 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
    85                              <1> 	
    86 00000047 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
    86 00000049 [B205040000000000]  <1>
    87                              <1> 	
    88 00000051 E8B4FFFFFF          <1> 	call save_regs				;just in case
    89                              <1> 	
    90                              <1> 	
    91 00000056 E8C7FFFFFF          <1> 	call setup_memory			;all memory setup at start
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
    95 0000005B E837070000          <1> 	call vV_entry_point			;Start the program 
    96                              <1> 	
    97                              <1> 	
    98 00000060 E8B1FFFFFF          <1> 	call restore_regs
    99                              <1> 	
   100                              <1> 
   101                              <1> ;------------------------------------------------------------------------------
   102                              <1> 
   103 00000065 B83C000000          <1> 	mov rax, SYS_EXIT
   104 0000006A BF00000000          <1> 	mov rdi, 0		;Normal exit procedure (no code returned from main)
   105 0000006F 0F05                <1> 	syscall
   106                              <1> 	
   107                              <1> 	
   108                              <1> 	
   109                              <1> 	
   110                              <1> 	
     4                                  %include "vVc/assembly/w_runtime/vV_system00.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5 00000000 <res 00000040>      <1> 	vV_sys_start:	resd 16		;not used now
     6                              <1> 
     7                              <1> 	
     8                              <1> 	
     9                              <1> segment .data
    10                              <1> 
    11                              <1> 
    12                              <1> ;--Start of Memory----------------------------------------------------------
    13                              <1> 
    14                              <1> 	ALIGN 8
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;---------------------Error Managment----------
    18                              <1> 
    19                              <1> 
    20                              <1> ;error vectors	
    21                              <1> 	
    22                              <1> 	vV_error_vectors:
    23 00000000 [8D00000000000000]- <1> 	times 32 dq vV_error_unhandeled
    23 00000000 <rept>              <1>
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> segment .text
    28                              <1> 
    29                              <1> 
    30                              <1> vV_error:
    31                              <1> 
    32 00000071 52                  <1> 	push rdx
    33                              <1> 	
    34 00000072 4831D2              <1> 	xor rdx , rdx
    35                              <1> 	
    36 00000075 88E2                <1> 	mov dl , ah
    37                              <1> 	
    38 00000077 C0E203              <1> 	shl dl , 3
    39                              <1> 	
    40 0000007A 67FF92[00000000]    <1> 	call [vV_error_vectors + edx]
    41                              <1> 	
    42                              <1> 	
    43 00000081 5A                  <1> 	pop rdx
    44                              <1> 	
    45 00000082 C3                  <1> 	ret
    46                              <1> 	
    47                              <1> 	
    48                              <1> vV_error_fatal:
    49                              <1> 
    50                              <1> 	
    51 00000083 88D0                <1> 	mov al , dl
    52                              <1> 	
    53 00000085 C0E803              <1> 	shr al , 3
    54                              <1> 
    55 00000088 E873FFFFFF          <1> 	call vV_forced_exit
    56                              <1> 	
    57                              <1> 	
    58                              <1> 	
    59                              <1> 	
    60                              <1> 	
    61                              <1> 	
    62                              <1> 
    63                              <1> 	
     5                                  %include "vVc/assembly/w_runtime/vV_errors.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> segment .bss
     5                              <1> 
     6                              <1> 
     7                              <1> 	ALIGNB 4
     8                              <1> 		
     9                              <1> 	vV_error_buffer:
    10 00000040 <res 00000040>      <1> 	resb 64
    11                              <1> 	vV_end_err_buff:
    12                              <1> 	vV_error_buffer_size equ vV_end_err_buff-vV_error_buffer
    13                              <1> 
    14                              <1> 
    15                              <1> 
    16                              <1> 
    17                              <1> segment .data
    18                              <1> 
    19                              <1> ;Error String	
    20                              <1> 
    21                              <1> 	
    22                              <1> 	vV_error_msg:
    23 00000100 556E68616E64656C65- <1> 	.default: db "Unhandeled Error "
    23 00000109 64204572726F7220    <1>
    24                              <1> 	default_size equ $-.default
    25                              <1> 
    26                              <1> 
    27                              <1> 
    28                              <1> segment .text
    29                              <1> 
    30                              <1> 
    31                              <1> 
    32                              <1> 
    33                              <1> 	
    34                              <1> vV_error_unhandeled:
    35                              <1> 
    36                              <1> 
    37 0000008D 56                  <1> 	push rsi
    38 0000008E 57                  <1> 	push rdi	;Save reg used by syscall
    39 0000008F 4151                <1> 	push r9	;and by conversion func
    40                              <1> 	
    41                              <1> 	
    42                              <1> ;push rax	;Save flags ( and value)
    43                              <1> 
    44 00000091 53                  <1> 	push rbx	;Save Arg
    45 00000092 52                  <1> push rdx		;Save error code
    46                              <1> 	
    47                              <1> 	
    48 00000093 BA11000000          <1> 	mov edx , default_size				;string lenght
    49 00000098 48BE-               <1> 	mov rsi , vV_error_msg.default			;strng ptr
    49 0000009A [0001000000000000]  <1>
    50 000000A2 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    51 000000A7 B801000000          <1> 	mov rax , 1				; Write sysCall
    52 000000AC 0F05                <1> 	syscall	
    53                              <1> 	
    54                              <1> 	
    55 000000AE 58                  <1> pop rax	;error code
    56                              <1> 
    57                              <1> 
    58 000000AF C0E803              <1> 	shr al , 3
    59                              <1> 	
    60                              <1> 	
    61 000000B2 BF[40000000]        <1> 	mov edi , vV_error_buffer
    62 000000B7 41B940000000        <1> 	mov r9d , vV_error_buffer_size
    63                              <1> 	
    64                              <1> 
    65 000000BD E83F030000          <1> 	call vV_ascii_int_to_dec	
    66                              <1> 	
    67                              <1> 		
    68                              <1> 	
    69 000000C2 67C680[40000000]20  <1> 	mov BYTE[vV_error_buffer + eax] , ' '
    70                              <1> 	
    71                              <1> 	
    72 000000CA 67488DB8[41000000]  <1> 	lea rdi , [vV_error_buffer + eax + 1]
    73 000000D2 4129F9              <1> 	sub r9d , edi
    74                              <1> 	
    75 000000D5 58                  <1> 	pop rax
    76                              <1> 	
    77 000000D6 E826030000          <1> 	call vV_ascii_int_to_dec
    78                              <1> 	
    79 000000DB 674C8D0C07          <1> 	lea r9 , [edi + eax]
    80                              <1> 	
    81 000000E0 41C6010A            <1> 	mov BYTE[r9] , 0xa
    82                              <1> 	
    83 000000E4 49FFC1              <1> 	inc r9
    84                              <1> 	
    85 000000E7 4981E9[40000000]    <1> 	sub r9 , vV_error_buffer
    86                              <1> 	
    87 000000EE 4489CA              <1> 	mov edx , r9d				;string lenght
    88 000000F1 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
    88 000000F3 [4000000000000000]  <1>
    89 000000FB BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    90 00000100 B801000000          <1> 	mov rax , 1				; Write sysCall
    91 00000105 0F05                <1> 	syscall
    92                              <1> 	
    93 00000107 4159                <1> 	pop r9
    94 00000109 5F                  <1> 	pop rdi
    95 0000010A 5E                  <1> 	pop rsi
    96                              <1> 	
    97                              <1> 	
    98                              <1> 	
    99                              <1> 	
   100 0000010B C3                  <1> 	ret
   101                              <1> 	
   102                              <1> 	
   103                              <1> 	
   104                              <1> 		
   105                              <1> 		
   106                              <1> 		
   107                              <1> 		
   108                              <1> 		
   109                              <1> 		
   110                              <1> 		
   111                              <1> 		
   112                              <1> 		
   113                              <1> 		
   114                              <1> 		
   115                              <1> 		
   116                              <1> 		
   117                              <1> 		
   118                              <1> 		
   119                              <1> 		
   120                              <1> 		
   121                              <1> 		
   122                              <1> 		
   123                              <1> 
     6                                  %include "vVc/assembly/w_runtime/vV_system10.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5                              <1> 	
     6                              <1> 	
     7                              <1> 	;------------Input Buffer
     8                              <1> 
     9                              <1> 
    10                              <1> 	
    11 00000080 <res 00000004>      <1> 	vV_input_buffer_content: resb 4			;Input Buffer current content
    12 00000084 <res 000000FF>      <1> 	vV_input_buffer: resb vV_input_buffer_size		;Input Buffer of 256 char
    13                              <1> 	
    14                              <1> 	
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;------------Output Buffer
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22 00000183 <res 00000004>      <1> 	vV_output_buffer_content: resb 4			;Output Buffer current content
    23 00000187 <res 000000FF>      <1> 	vV_output_buffer: resb vV_output_buffer_size		;Output Buffer of 256 char
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> 	
    28                              <1> ;------------Number Buffer
    29                              <1> 
    30                              <1> 
    31                              <1> 	
    32                              <1> 	
    33                              <1> 	;w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34                              <1> 	;endofline: resb 1					;Maybe Not Needed
    35                              <1> 	
    36                              <1> 
    37                              <1> 
    38                              <1> segment .data
    39 00000111 90<rept>            <1> 	ALIGN 4
    40 00000114 [01040000]          <1> 	vV_sys_format_mode: dd vV_ascii_int_to_dec
     7                                  %include "vVc/assembly/w_runtime/vV_io.asm"			
     1                              <1> 
     2                              <1> 
     3                              <1> ;%include "vVc/assembly/w_runtime/vV_ascii.asm"
     4                              <1> 
     5                              <1> 
     6                              <1> ;Group all read/wrie syscalls
     7                              <1> 
     8                              <1> ;global convert_to_string
     9                              <1> ;global convert_to_int
    10                              <1> 
    11                              <1> ;extern vV_input_buffer
    12                              <1> ;extern vV_output_buffer
    13                              <1> ;extern w_number_buffer
    14                              <1> 
    15                              <1> global wio_out
    16                              <1> global wio_get
    17                              <1> global wio_get_str_raw
    18                              <1> global wio_get_str_null
    19                              <1> global wio_get_str_nline
    20                              <1> global wio_move_in_to_out
    21                              <1> 
    22                              <1> 
    23                              <1> segment .text 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> 
    28                              <1> 
    29                              <1> vV_io_flush:
    30                              <1> 	
    31                              <1> 	
    32                              <1> 	
    33 0000010C 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    34                              <1> 	
    35 00000113 C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    35 0000011B 000000              <1>
    36                              <1> 	
    37 0000011E 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    37 00000120 [8701000000000000]  <1>
    38                              <1> 		
    39 00000128 67C682[87010000]0A  <1> 	mov BYTE[vV_output_buffer + edx] , 0xa
    40 00000130 FFC2                <1> 	inc edx
    41                              <1> 		
    42 00000132 BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    43 00000137 B801000000          <1> 	mov rax , 1					; Write sysCall
    44 0000013C 0F05                <1> 	syscall
    45                              <1> 	
    46                              <1> 	
    47                              <1> 	
    48 0000013E C3                  <1> 	ret
    49                              <1> 	
    50                              <1> 		
    51                              <1> ;-------------------------------------------------------------------------------
    52                              <1> ;-------------------------------------------------------------------------------
    53                              <1> 	
    54                              <1> vV_io_out_buffer_default:
    55                              <1> 
    56 0000013F 448B1425[14010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    57 00000147 E80F000000          <1> 	call vV_io_out_buffer
    58 0000014C C3                  <1> 	ret
    59                              <1> 	
    60                              <1> vV_io_out_default:
    61                              <1> 
    62 0000014D 448B1425[14010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    63 00000155 E80C000000          <1> 	call vV_io_out
    64 0000015A C3                  <1> 	ret
    65                              <1> 
    66                              <1> ;-------------------------------------------------------------------------------
    67                              <1> ;-------------------------------------------------------------------------------
    68                              <1> 	
    69                              <1> vV_io_out_buffer:				;print str repr of Top Of Stack element
    70                              <1> 						
    71                              <1> 						
    72 0000015B E811000000          <1> 	call vV_io_out01			
    73 00000160 E84A000000          <1> 	call vV_io_out_buffer_end
    74 00000165 C3                  <1> 	ret
    75                              <1> 
    76                              <1> ;-------------------------------------------------------------------------------
    77                              <1> 		
    78                              <1> vV_io_out:					;print str repr of Top Of Stack element
    79                              <1> 
    80                              <1> 
    81 00000166 E806000000          <1> 	call vV_io_out01					
    82 0000016B E826000000          <1> 	call vV_io_out_direct_end
    83 00000170 C3                  <1> 	ret
    84                              <1> 
    85                              <1> ;-------------------------------------------------------------------------------	
    86                              <1> ;-------------------------------------------------------------------------------	
    87                              <1> 
    88                              <1> vV_io_out01:					;print str repr of Top Of Stack element
    89                              <1> 
    90                              <1> 
    91                              <1> 	vV_pop eax				;get value in eax
    91                              <2> 
    91 00000171 4983EF04            <2>  sub vV_sp , 4
    91 00000175 418B07              <2>  mov %1 , [vV_sp]
    91                              <2> 
    92                              <1> 	
    93 00000178 BF[87010000]        <1> 	mov edi , vV_output_buffer		;set dest as O_buff
    94 0000017D 033C25[83010000]    <1> 	add edi ,DWORD[vV_output_buffer_content]		;set offset to start of freespace
    95                              <1> 	
    96 00000184 57                  <1> push rdi					;Save buffer origin
    97                              <1> 	
    98 00000185 41B9FF000000        <1> 	mov r9 , 255				;set Max buffer available	
    99 0000018B 4129F9              <1> 	sub r9d , edi				;#TODO: Stop HardCoding VALUES!!!!
   100 0000018E 41FFD2              <1> 		call r10			;call current conversion format function
   101 00000191 4831FF              <1> 	xor rdi , rdi
   102                              <1> 	
   103 00000194 5F                  <1> pop rdi						;recover Buffer origin
   104                              <1> 	
   105 00000195 C3                  <1> 	ret
   106                              <1> 
   107                              <1> ;-------------------------------------------------------------------------------	
   108                              <1> 	
   109                              <1> vV_io_out_direct_end:
   110                              <1> 
   111                              <1> 
   112                              <1> 
   113 00000196 67C604070A          <1> 	mov BYTE[edi + eax] , 0xa		;add new_line
   114                              <1> 		
   115 0000019B FFC0                <1> 		inc eax
   116                              <1> 		
   117 0000019D 89C2                <1> 		mov edx , eax				;string lenght		
   118 0000019F 4889FE              <1> 		mov rsi , rdi				;strng ptr
   119 000001A2 BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   120 000001A7 B801000000          <1> 		mov rax , 1				; Write sysCall
   121 000001AC 0F05                <1> 		syscall
   122                              <1> 	
   123 000001AE C3                  <1> 		ret
   124                              <1> 
   125                              <1> ;-------------------------------------------------------------------------------		
   126                              <1> 		
   127                              <1> vV_io_out_buffer_end:
   128                              <1> 
   129 000001AF 010425[83010000]    <1> 	add [vV_output_buffer_content] , eax
   130                              <1> 
   131 000001B6 C3                  <1> 	ret
   132                              <1> 
   133                              <1> ;-------------------------------------------------------------------------------
   134                              <1> 
   135                              <1> vV_io_out_char:
   136                              <1> 
   137                              <1> 	
   138 000001B7 E827000000          <1> 	call vV_io_read_char
   139 000001BC E8D5FFFFFF          <1> 	call vV_io_out_direct_end
   140                              <1> 	
   141 000001C1 C3                  <1> 	ret
   142                              <1> 	
   143                              <1> vV_io_out_packed_char:
   144                              <1> 
   145                              <1> 	
   146 000001C2 E842000000          <1> 	call vV_io_read_packed_char
   147                              <1> 	
   148 000001C7 E8CAFFFFFF          <1> 	call vV_io_out_direct_end
   149                              <1> 	
   150 000001CC C3                  <1> 	ret
   151                              <1> 	
   152                              <1> vV_io_out_char_buffer:
   153                              <1> 
   154 000001CD E811000000          <1> 	call vV_io_read_char
   155                              <1> 	
   156 000001D2 E8D8FFFFFF          <1> 	call vV_io_out_buffer_end
   157                              <1> 	
   158 000001D7 C3                  <1> 	ret
   159                              <1> 	
   160                              <1> vV_io_out_packed_char_buffer:
   161                              <1> 
   162 000001D8 E82C000000          <1> 	call vV_io_read_packed_char
   163                              <1> 	
   164 000001DD E8CDFFFFFF          <1> 	call vV_io_out_buffer_end
   165                              <1> 	
   166 000001E2 C3                  <1> 	ret
   167                              <1> 	
   168                              <1> vV_io_read_char:
   169                              <1> 
   170                              <1> 	vV_pop eax
   170                              <2> 
   170 000001E3 4983EF04            <2>  sub vV_sp , 4
   170 000001E7 418B07              <2>  mov %1 , [vV_sp]
   170                              <2> 
   171                              <1> 	
   172 000001EA 48BF-               <1> 	mov rdi , vV_output_buffer
   172 000001EC [8701000000000000]  <1>
   173 000001F4 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   174                              <1> 	
   175 000001FB 678807              <1> 	mov [edi] , al
   176                              <1> 	
   177 000001FE BF[87010000]        <1> 	mov edi , vV_output_buffer
   178 00000203 B801000000          <1> 	mov eax , 1
   179                              <1> 	
   180 00000208 C3                  <1> 	ret	
   181                              <1> 	
   182                              <1> vV_io_read_packed_char:
   183                              <1> 
   184                              <1> 	vV_pop eax
   184                              <2> 
   184 00000209 4983EF04            <2>  sub vV_sp , 4
   184 0000020D 418B07              <2>  mov %1 , [vV_sp]
   184                              <2> 
   185                              <1> 	
   186 00000210 48BF-               <1> 	mov rdi , vV_output_buffer
   186 00000212 [8701000000000000]  <1>
   187 0000021A 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   188                              <1> 	
   189 00000221 678907              <1> 	mov [edi] , eax
   190                              <1> 	
   191 00000224 BF[87010000]        <1> 	mov edi , vV_output_buffer
   192 00000229 B804000000          <1> 	mov eax , 4	
   193                              <1> 	
   194 0000022E C3                  <1> 	ret
   195                              <1> 		
   196                              <1> ;-------------------------------------------------------------------------------
   197                              <1> ;-------------------------------------------------------------------------------
   198                              <1> ;-------------------------------------------------------------------------------
   199                              <1> ;-------------------------------------------------------------------------------
   200                              <1> ;-------------------------------------------------------------------------------
   201                              <1> ;-------------------------------------------------------------------------------
   202                              <1> ;-------------------------------------------------------------------------------
   203                              <1> 	
   204                              <1> vV_io_read:
   205                              <1> 
   206                              <1> 								
   207 0000022F 48BE-               <1> 		mov rsi , vV_input_buffer		;ptr to string destination	
   207 00000231 [8400000000000000]  <1>
   208 00000239 BAFF000000          <1> 		mov edx , vV_input_buffer_size				;string lenght	
   209 0000023E BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   210 00000243 B800000000          <1> 		mov rax , 0				; read sysCall
   211                              <1> 		
   212 00000248 0F05                <1> 		syscall
   213                              <1> 	
   214                              <1> ;-------------Buffer_Overflow_Execption  
   215                              <1> 
   216                              <1> 
   217                              <1> 
   218 0000024A 3DFF000000          <1> 		cmp eax , 255				;Check if Buffer Is Full
   219                              <1> 		
   220 0000024F 721F                <1> 			jb .no_overflow
   221                              <1> 			
   222 00000251 803C25[82010000]0A  <1> 		cmp BYTE[vV_input_buffer + vV_input_buffer_size-1] , 0xa	;Check if Buffer end with "\n"
   223                              <1> 		
   224 00000259 7415                <1> 			je .no_overflow
   225                              <1> 		
   226                              <1> 		
   227 0000025B 50                  <1> 			push rax
   228 0000025C 53                  <1> 			push rbx
   229                              <1> 		
   230 0000025D B401                <1> 			mov ah , vV_ERR_IO_I_OVERFLOW
   231 0000025F 6683C800            <1> 			or ax , 0
   232 00000263 4831DB              <1> 			xor rbx , rbx
   233 00000266 4889F3              <1> 			mov rbx , rsi
   234                              <1> 		
   235 00000269 E803FEFFFF          <1> 			call vV_error
   236                              <1> 		
   237 0000026E 5B                  <1> 			pop rbx
   238 0000026F 58                  <1> 			pop rax
   239                              <1> 		
   240                              <1> 			;ret
   241                              <1> 		
   242                              <1> 		.no_overflow:
   243                              <1> 		
   244 00000270 C3                  <1> 			ret
   245                              <1> 		
   246                              <1> 		
   247                              <1> 	
   248                              <1> 	
   249                              <1> vV_io_get_default:
   250                              <1> 
   251 00000271 41BA[11030000]      <1> 	mov r10d , vV_ascii_as_dec			;TODO: default settings
   252 00000277 E801000000          <1> 	call vV_io_get
   253 0000027C C3                  <1> 	ret
   254                              <1> 	
   255                              <1> 	
   256                              <1> vV_io_get:						;convert inputed value to 
   257                              <1> 							;32bit int, push it on
   258                              <1> 							;the stack
   259 0000027D E8ADFFFFFF          <1> 	call vV_io_read
   260                              <1> 		
   261                              <1> ;----------------------------------------------	
   262                              <1> 
   263 00000282 53                  <1> 	push rbx				;Save rbx (conversion uses it) 
   264                              <1> 
   265 00000283 89C3                <1> 		mov ebx , eax 			;send char count by ebx
   266 00000285 31FF                <1> 		xor edi , edi 			;zero out counter
   267 00000287 BE[84000000]        <1> 		mov esi , vV_input_buffer	;Set source to I_buffer
   268                              <1> 		
   269                              <1> 
   270 0000028C 41FFD2              <1> 		call r10
   271                              <1> 		
   272 0000028F 5B                  <1> 	pop rbx
   273                              <1> 	
   274                              <1> 		vV_push eax
   274                              <2> 
   274 00000290 418907              <2>  mov DWORD[vV_sp] , %1
   274 00000293 4983C704            <2>  add vV_sp , 4
   274                              <2> 
   275                              <1> 		
   276 00000297 C3                  <1> 		ret
   277                              <1> 
   278                              <1> 
   279                              <1> ;-------------------------------------------------------------------------------
   280                              <1> ;-------------------------------------------------------------------------------
   281                              <1> 
   282                              <1> 
   283                              <1> vV_io_get_char:
   284                              <1> 
   285                              <1> 
   286 00000298 E892FFFFFF          <1> 	call vV_io_read
   287                              <1> 	
   288 0000029D 31D2                <1> 	xor edx , edx
   289                              <1> 	
   290 0000029F 8A1425[84000000]    <1> 	mov dl , [vV_input_buffer]
   291                              <1> 	
   292                              <1> 	vV_push edx
   292                              <2> 
   292 000002A6 418917              <2>  mov DWORD[vV_sp] , %1
   292 000002A9 4983C704            <2>  add vV_sp , 4
   292                              <2> 
   293                              <1> 	
   294 000002AD C3                  <1> 	ret
   295                              <1> 	
   296                              <1> vV_io_get_packed_char:
   297                              <1> 
   298 000002AE C70425[84000000]00- <1> 	mov DWORD [vV_input_buffer] , 0
   298 000002B6 000000              <1>
   299                              <1> 
   300 000002B9 E871FFFFFF          <1> 	call vV_io_read
   301                              <1> 	
   302 000002BE 31D2                <1> 	xor edx , edx
   303                              <1> 	
   304 000002C0 8B1425[84000000]    <1> 	mov edx, [vV_input_buffer]
   305                              <1> 	
   306                              <1> 	vV_push edx
   306                              <2> 
   306 000002C7 418917              <2>  mov DWORD[vV_sp] , %1
   306 000002CA 4983C704            <2>  add vV_sp , 4
   306                              <2> 
   307                              <1> 	
   308 000002CE C3                  <1> 	ret
   309                              <1> 	
   310                              <1> 		
   311                              <1> 		
   312                              <1> 
   313                              <1> 
   314                              <1> 
     8                                  %include "vVc/assembly/w_runtime/vV_ascii.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> segment .text 
     4                              <1> 
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> vV_ascii_as_hex2:						;Jumped to from parse_num OR called
     9                              <1> 								;use edi as counter/offset in string !Set if direct call
    10                              <1> 								;use esi as source string
    11                              <1> 								;concatenate result in eax
    12                              <1> 								;parse digit in cl
    13                              <1> 								
    14                              <1> 								;use r8 for base
    15                              <1> 								;use r9 for max_value
    16                              <1> 								
    17                              <1> 							
    18                              <1> 	;mov r8 , 16	
    19                              <1> 	
    20                              <1> 	.start_loop:
    21                              <1> 	
    22 000002CF 678A0C3E            <1> 		mov cl , [esi + edi]
    23                              <1> 	
    24                              <1> 		
    25 000002D3 80F930              <1> 		cmp cl , 48
    26                              <1> 		
    27 000002D6 7265                <1> 			jb vV_ascii_unvalid
    28                              <1> 			
    29 000002D8 80F93A              <1> 		cmp cl , 58
    30                              <1> 		
    31 000002DB 720D                <1> 			jb .pass_int
    32                              <1> 			
    33 000002DD 80F966              <1> 			cmp cl , 'f'
    34                              <1> 			
    35 000002E0 775B                <1> 				ja vV_ascii_unvalid
    36                              <1> 			
    37 000002E2 80F961              <1> 			cmp cl , 'a'
    38                              <1> 			
    39 000002E5 7256                <1> 				jb vV_ascii_unvalid
    40                              <1> 				
    41 000002E7 80E927              <1> 			sub cl , 39
    42                              <1> 				
    43                              <1> 			
    44                              <1> 		.pass_int:	
    45                              <1> 			
    46 000002EA 80E930              <1> 		sub cl , '0'
    47                              <1> 		
    48                              <1> 		
    49                              <1> 		
    50 000002ED 31D2                <1> 		xor edx , edx
    51                              <1> 		
    52 000002EF F8                  <1> 		clc
    53                              <1> 		
    54 000002F0 41F7E0              <1> 		mul r8d
    55                              <1> 		
    56 000002F3 725D                <1> 		jc vV_ascii_overflow
    57                              <1> 		
    58 000002F5 01C8                <1> 		add eax , ecx
    59                              <1> 		
    60                              <1> 		.pass02:
    61                              <1> 		
    62 000002F7 FFC7                <1> 		inc edi
    63                              <1> 		
    64 000002F9 39DF                <1> 		cmp edi , ebx
    65                              <1> 		
    66 000002FB 72D2                <1> 		jb .start_loop
    67                              <1> 
    68                              <1> 		
    69 000002FD C3                  <1> 		ret	
    70                              <1> 		
    71                              <1> 		
    72                              <1> ;
    73                              <1> ;				ebx		esi
    74                              <1> ;	ascii_to_format( buffer_size , buffer_adress ) 
    75                              <1> ;		
    76                              <1> ;
    77                              <1> ;	set:	rcx,rdx (rax) to 0
    78                              <1> ;		r8,r9
    79                              <1> ;		
    80                              <1> ;	call: specialized dexodefunction
    81                              <1> 		
    82                              <1> vV_ascii_as_hex:
    83                              <1> 	
    84 000002FE FFCB                <1> 	dec ebx
    85 00000300 41B810000000        <1> 	mov r8 , 16	
    86 00000306 4831C0              <1> 	xor rax , rax 		;(just in case not switching from dec mode)			
    87 00000309 4831C9              <1> 	xor rcx , rcx
    88 0000030C 4831D2              <1> 	xor rdx , rdx
    89 0000030F EBBE                <1> 	jmp vV_ascii_as_hex2
    90                              <1> 
    91                              <1> vV_ascii_as_dec:
    92                              <1> 
    93 00000311 FFCB                <1> 	dec ebx
    94 00000313 41B80A000000        <1> 	mov r8 , 10			
    95 00000319 41B93A000000        <1> 	mov r9 , 58
    96 0000031F 4831C9              <1> 	xor rcx , rcx
    97 00000322 4831D2              <1> 	xor rdx , rdx
    98 00000325 EB5E                <1> 	jmp vV_ascii_as_decbin
    99                              <1> 
   100                              <1> vV_ascii_as_bin:
   101                              <1> 
   102 00000327 FFCB                <1> 	dec ebx
   103 00000329 41B802000000        <1> 	mov r8 , 2			
   104 0000032F 41B932000000        <1> 	mov r9 , 50
   105 00000335 4831C9              <1> 	xor rcx , rcx
   106 00000338 4831D2              <1> 	xor rdx , rdx
   107                              <1> 	
   108 0000033B EB48                <1> 	jmp vV_ascii_as_decbin
   109                              <1> 	
   110                              <1> vV_ascii_unvalid:
   111                              <1> 	
   112                              <1> 		;mov rax , 24;	#TODO: Defined Errors code/ data in file
   113                              <1> 		;xor rdx , rdx
   114                              <1> 		;mov dl , cl
   115                              <1> 		
   116                              <1> 		;call w_forced_exit
   117                              <1> 		
   118 0000033D 50                  <1> 		push rax
   119 0000033E 53                  <1> 		push rbx
   120                              <1> 		
   121 0000033F B403                <1> 		mov ah , vV_ERR_IO_I_UNVALID
   122 00000341 6683C800            <1> 		or ax , 0
   123 00000345 4831DB              <1> 		xor rbx , rbx
   124 00000348 88CB                <1> 		mov bl , cl
   125                              <1> 		
   126 0000034A E822FDFFFF          <1> 		call vV_error
   127                              <1> 		
   128 0000034F 5B                  <1> 		pop rbx
   129 00000350 58                  <1> 		pop rax
   130                              <1> 		
   131 00000351 C3                  <1> 		ret
   132                              <1> 		
   133                              <1> 		
   134                              <1> 		
   135                              <1> 		
   136                              <1> vV_ascii_overflow:
   137                              <1> 	
   138 00000352 50                  <1> 		push rax
   139 00000353 53                  <1> 		push rbx
   140                              <1> 		
   141 00000354 4831DB              <1> 		xor rbx , rbx
   142 00000357 4889C3              <1> 		mov rbx , rax
   143                              <1> 		
   144                              <1> 		;or rbx , 0x00010000
   145                              <1> 		
   146 0000035A B401                <1> 		mov ah , vV_ERR_IO_I_OVERFLOW
   147 0000035C 6683C800            <1> 		or ax , 0
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151 00000360 E80CFDFFFF          <1> 		call vV_error
   152                              <1> 		
   153 00000365 5B                  <1> 		pop rbx
   154 00000366 58                  <1> 		pop rax
   155                              <1> 		
   156                              <1> 		;TODO: Maybe use vV_error return value for decision making
   157                              <1> 		
   158 00000367 B8FFFFFFFF          <1> 		mov eax , -1
   159                              <1> 		
   160 0000036C C3                  <1> 		ret
   161                              <1> 		
   162                              <1> 		
   163                              <1> vV_ascii_change_to_hex:
   164                              <1> 		
   165 0000036D 83F800              <1> 		cmp eax , 0
   166                              <1> 			
   167 00000370 75CB                <1> 			jne vV_ascii_unvalid
   168                              <1> 			
   169 00000372 41B810000000        <1> 		mov r8 , 16
   170 00000378 4831C9              <1> 		xor rcx , rcx
   171 0000037B 4831C0              <1> 		xor rax ,rax
   172                              <1> 				
   173 0000037E FFC7                <1> 		inc edi
   174 00000380 E94AFFFFFF          <1> 		jmp vV_ascii_as_hex2		
   175                              <1> 		
   176                              <1> 	
   177                              <1> 
   178                              <1> 
   179                              <1> vV_ascii_as_decbin:						;ebx: number of char to read
   180                              <1> 
   181                              <1> 	
   182                              <1> 
   183                              <1> 								;use edi as counter/offset in string
   184                              <1> 								;concatenate result in eax
   185                              <1> 								;parse digit in cl
   186                              <1> 								
   187                              <1> 								;use r8 for base
   188                              <1> 								;use r9 for max_value					
   189                              <1> 								;itou
   190                              <1> 	;xor edi, edi			;should be set by caller
   191 00000385 4831C0              <1> 	xor rax , rax
   192                              <1> 	
   193 00000388 4831C9              <1> 	xor rcx , rcx
   194                              <1> 	
   195 0000038B 4831D2              <1> 	xor rdx , rdx
   196                              <1> 	
   197                              <1> 	
   198                              <1> 	.start_loop:
   199                              <1> 	
   200 0000038E 678A0C3E            <1> 		mov cl , [esi + edi]
   201                              <1> 		
   202                              <1> 		
   203 00000392 80F962              <1> 		cmp cl , 'b'										
   204 00000395 7513                <1> 			jne .pass01
   205                              <1> 		
   206                              <1> 		.format_change:
   207                              <1> 			
   208 00000397 83F800              <1> 			cmp eax , 0
   209                              <1> 			
   210 0000039A 75A1                <1> 				jne vV_ascii_unvalid
   211                              <1> 				
   212 0000039C 41B802000000        <1> 			mov r8 , 2
   213                              <1> 			
   214 000003A2 41B932000000        <1> 			mov r9 , 50
   215                              <1> 	
   216 000003A8 EB26                <1> 			jmp .pass02
   217                              <1> 		
   218                              <1> 		
   219                              <1> 	
   220                              <1> 		.pass01:
   221                              <1> 		
   222 000003AA 80F968              <1> 		cmp cl , 'h'											
   223 000003AD 74BE                <1> 			je vV_ascii_change_to_hex
   224 000003AF 80F978              <1> 		cmp cl , 'x'											
   225 000003B2 74B9                <1> 			je vV_ascii_change_to_hex
   226                              <1> 			
   227                              <1> 			
   228 000003B4 4438C9              <1> 		cmp cl , r9b
   229                              <1> 		
   230 000003B7 7384                <1> 			jae vV_ascii_unvalid
   231                              <1> 		
   232 000003B9 80F930              <1> 		cmp cl , 48
   233                              <1> 		
   234 000003BC 0F827BFFFFFF        <1> 			jb vV_ascii_unvalid
   235                              <1> 			
   236                              <1> 		
   237                              <1> 			
   238 000003C2 80E930              <1> 		sub cl , 48
   239                              <1> 		
   240 000003C5 4831D2              <1> 		xor rdx , rdx
   241 000003C8 F8                  <1> 		clc
   242                              <1> 		
   243 000003C9 41F7E0              <1> 		mul r8d
   244                              <1> 		
   245 000003CC 7284                <1> 		jc vV_ascii_overflow
   246                              <1> 		
   247 000003CE 01C8                <1> 		add eax , ecx
   248                              <1> 		
   249                              <1> 		.pass02:
   250                              <1> 		
   251 000003D0 FFC7                <1> 		inc edi
   252                              <1> 		
   253 000003D2 39DF                <1> 		cmp edi , ebx
   254                              <1> 		
   255 000003D4 72B8                <1> 		jb .start_loop
   256                              <1> 		
   257                              <1> 		
   258 000003D6 C3                  <1> 		ret			; result should be in eax
   259                              <1> 		
   260                              <1> 
   261                              <1> 	
   262                              <1> ;------------------------------------------------------------------------------------------
   263                              <1> ;------------------------------------------------------------------------------------------
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> vV_ascii_int_to_hex:					;value in eax
   268                              <1> 						;dest in rdi
   269                              <1> 
   270                              <1> 
   271                              <1> 
   272 000003D7 31C9                <1> 	xor ecx , ecx	
   273                              <1> 	
   274 000003D9 BE10000000          <1> 	mov esi , 16
   275                              <1> 
   276                              <1> 	
   277                              <1> 	.loop01:
   278                              <1> 	
   279 000003DE 4831D2              <1> 		xor rdx , rdx
   280                              <1> 		
   281 000003E1 F7F6                <1> 		div esi
   282                              <1> 		
   283                              <1> 		
   284 000003E3 80FA0A              <1> 		cmp dl , 10
   285                              <1> 		
   286 000003E6 7203                <1> 		jb .dec
   287                              <1> 		
   288 000003E8 80C207              <1> 			add dl , 7
   289                              <1> 		
   290                              <1> 		.dec:
   291                              <1> 		
   292 000003EB 80C230              <1> 			add dl , '0'
   293                              <1> 		
   294                              <1> 		
   295 000003EE 52                  <1> 		push rdx
   296                              <1> 		
   297 000003EF FFC1                <1> 		inc ecx
   298                              <1> 		
   299 000003F1 39F0                <1> 		cmp eax , esi
   300                              <1> 		
   301 000003F3 73E9                <1> 		jae .loop01
   302                              <1> 	
   303                              <1> 	
   304 000003F5 3C0A                <1> 	cmp al , 10
   305                              <1> 		
   306 000003F7 7202                <1> 		jb .dec2
   307                              <1> 		
   308 000003F9 0407                <1> 			add al , 7
   309                              <1> 		
   310                              <1> 		.dec2:
   311                              <1> 		
   312 000003FB 0430                <1> 			add al , '0'	
   313 000003FD 8807                <1> 	mov [rdi] , al
   314                              <1> 	
   315 000003FF EB1B                <1> 	jmp vV_ascii_pop_digits
   316                              <1> 		
   317                              <1> 	
   318                              <1> 	
   319                              <1> 	
   320                              <1> vV_ascii_int_to_dec:					;value in eax
   321                              <1> 						;dest in rdi
   322                              <1> 						;max_dest_size in r9d
   323                              <1> 
   324                              <1> 
   325                              <1> 
   326 00000401 31C9                <1> 	xor ecx , ecx	
   327                              <1> 	
   328 00000403 BE0A000000          <1> 	mov esi , 10
   329                              <1> 	
   330                              <1> 
   331                              <1> 
   332                              <1> 	
   333                              <1> 	.loop01:
   334                              <1> 	
   335 00000408 4831D2              <1> 		xor rdx , rdx
   336                              <1> 		
   337 0000040B F7F6                <1> 		div esi
   338                              <1> 		
   339                              <1> 		
   340 0000040D 80C230              <1> 		add dl , '0'
   341 00000410 52                  <1> 		push rdx
   342                              <1> 		
   343 00000411 FFC1                <1> 		inc ecx
   344                              <1> 		
   345 00000413 83F80A              <1> 		cmp eax , 10
   346                              <1> 		
   347 00000416 73F0                <1> 		jae .loop01
   348                              <1> 	
   349 00000418 0430                <1> 	add al , '0'	
   350 0000041A 8807                <1> 	mov [rdi] , al
   351                              <1> 		
   352                              <1> 	
   353                              <1> 		
   354                              <1> vV_ascii_pop_digits:			; Need nb of digits currently on stack(ecx)
   355                              <1> 						;dest in rdi
   356 0000041C 41B801000000        <1> 		mov r8d , 1
   357 00000422 FFC1                <1> 		inc ecx
   358                              <1> 		
   359 00000424 4439C9              <1> 		cmp ecx , r9d
   360                              <1> 		
   361 00000427 7219                <1> 		jb .loopstart
   362                              <1> 		
   363                              <1> 	
   364 00000429 50                  <1> 			push rax
   365 0000042A 53                  <1> 			push rbx
   366                              <1> 		
   367 0000042B B410                <1> 			mov ah , vV_ERR_MEMORY_BUFFER_LIMIT
   368 0000042D 6683C800            <1> 			or ax , 0
   369 00000431 4831DB              <1> 			xor rbx , rbx
   370 00000434 89FB                <1> 			mov ebx , edi
   371                              <1> 		
   372 00000436 E836FCFFFF          <1> 			call vV_error
   373                              <1> 		
   374 0000043B 5B                  <1> 			pop rbx
   375 0000043C 58                  <1> 			pop rax
   376                              <1> 			
   377 0000043D 4489C9              <1> 			mov ecx , r9d		;Should protect memory..
   378 00000440 FFC9                <1> 			dec ecx		;will need testing
   379                              <1> 		
   380                              <1> 						
   381                              <1> 		.loopstart:
   382                              <1> 		
   383 00000442 5A                  <1> 			pop rdx
   384 00000443 6742881407          <1> 			mov BYTE[edi + r8d] , dl
   385 00000448 41FFC0              <1> 			inc r8d
   386                              <1> 			
   387 0000044B 4139C8              <1> 			cmp r8d , ecx
   388                              <1> 		
   389 0000044E 72F2                <1> 		jb .loopstart
   390                              <1> 	
   391                              <1> 	
   392 00000450 89C8                <1> 		mov eax , ecx
   393                              <1> 		
   394 00000452 C3                  <1> 		ret	
   395                              <1> 	
   396                              <1> 	
   397                              <1> vV_ascii_int_to_bin:					;value in eax, 
   398                              <1> 							
   399                              <1> 
   400                              <1> 
   401 00000453 31C9                <1> 	xor ecx , ecx
   402                              <1> 	
   403                              <1> 	
   404                              <1> 	.loop01:
   405                              <1> 	
   406                              <1> 		
   407 00000455 D1E8                <1> 		shr eax , 1
   408                              <1> 		
   409 00000457 7205                <1> 		jc .one
   410                              <1> 		
   411 00000459 B230                <1> 			mov dl , '0'
   412 0000045B 52                  <1> 			push rdx
   413                              <1> 			
   414 0000045C EB03                <1> 		jmp .next
   415                              <1> 		.one:
   416                              <1> 			
   417 0000045E B231                <1> 			mov dl , '1'
   418 00000460 52                  <1> 			push rdx
   419                              <1> 		
   420                              <1> 		.next:
   421                              <1> 		
   422 00000461 FFC1                <1> 		inc ecx
   423                              <1> 		
   424 00000463 83F801              <1> 		cmp eax , 1
   425                              <1> 		
   426 00000466 77ED                <1> 		ja .loop01
   427                              <1> 	
   428 00000468 0430                <1> 	add al , '0'	
   429 0000046A 8807                <1> 	mov [rdi] , al
   430                              <1> 	
   431 0000046C EBAE                <1> 	jmp vV_ascii_pop_digits
   432                              <1> 	
   433                              <1> 	
   434                              <1> ;Will need a special version for String stack
   435                              <1> 
   436                              <1> 
   437                              <1> 
   438                              <1> 
   439                              <1> 
   440                              <1> 
   441                              <1> 
     9                                  %include "w_samples/assembly/rule110_vars.was"	
     1                              <1>  segment .data 
     2                              <1> 
     3                              <1>  i_global:
     4 00000118 0000000000000000    <1> .currentIter: dq 0
     5 00000120 0000000000000000    <1> .boardPad: dq 0
     6 00000128 C800000000000000    <1> .size: dq 200
     7                              <1>  segment .bss 
     8                              <1> 
     9                              <1> 	u_global:
    10 00000286 <res 00000004>      <1> .index: resb 4 
    11 0000028A <res 00000324>      <1> .board: resb 804 
    12 000005AE <res 00000004>      <1> .saved: resb 4 
    10                                  %include "vVc/assembly/w_runtime/vV_system90.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	
     5                              <1> 	
     6                              <1> 	stacks: 
     7                              <1> 
     8                              <1> 
     9 000005B2 <res 00040000>      <1> 	string_stack_start: resb 262144
    10                              <1> 
    11                              <1> 
    12                              <1> 	
    13                              <1> 	
    14                              <1> 						
    15 000405B2 <res 00020000>      <1> 	fake_stack_start: resb 131072
    11                                  
    12                                  
    13                                  
    14                                  global w_entry_point
    15                                  
    16                                  
    17                                  
    18                                  segment .text 
    19                                  
    20                                  
    21                                  set_next:		
    22 0000046E 55                      	push rbp	
    23 0000046F 4889E5                  	mov rbp , rsp	
    24                                  
    25                                  ;------Setup Phase
    26                                  
    27                                  ;------Init Phase
    28                                  
    29                                  .tailcall:		;Body Section	
    30                                  
    31                                   ;OpADR: [0]  ; ADD opcode 					
    32                                  
    33 00000472 418B47F8                	mov eax , vV_2nd			
    34 00000476 410347FC                	add eax , vV_top			
    35 0000047A 418947F8                	mov vV_2nd , eax			
    36                                  
    37                                  	vV_dec_sp 1		
    37                              <1> 
    37 0000047E 4983EF04            <1>  sub vV_sp , cell(%1)
    37                              <1> 
    38                                  
    39                                   ;OpADR: [1]  ; DUP opcode (1)			
    40                                  
    41                                  	vV_dup 1			
    41                              <1> 
    41 00000482 B901000000          <1>  mov ecx , %1
    41 00000487 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
    41 0000048B 4C89FF              <1>  mov rdi , vV_sp
    41                              <1> 
    41 0000048E F3A5                <1>  rep movsd
    41                              <1> 
    41 00000490 4983C704            <1>  add vV_sp , cell(%1)
    41                              <1> 
    42                                  
    43                                  
    44                                   ;OpADR: [2]  ; PUSH opcode 
    45                                  
    46                                  	vV_push 0 
    46                              <1> 
    46 00000494 41C70700000000      <1>  mov DWORD[vV_sp] , %1
    46 0000049B 4983C704            <1>  add vV_sp , 4
    46                              <1> 
    47                                  
    48                                  
    49                                   ;OpADR: [3]  ; EQUAL opcode					
    50                                  
    51 0000049F 418B47FC                	mov eax , vV_top			
    52 000004A3 413947F8                	cmp DWORD vV_2nd , eax			
    53                                  
    54 000004A7 75(0B)                  	jnz short 0xb				
    55                                  
    56 000004A9 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
    57                                  
    58 000004B1 EB(09)                  	jmp short 0x9				
    59                                  
    60 000004B3 41C747F800000000        			mov DWORD vV_2nd , 0	
    61                                  
    62                                  	vV_dec_sp 1				
    62                              <1> 
    62 000004BB 4983EF04            <1>  sub vV_sp , cell(%1)
    62                              <1> 
    63                                  
    64                                   ;OpADR: [4]  ; IF opcode					
    65                                  
    66                                  	vV_dec_sp 1			
    66                              <1> 
    66 000004BF 4983EF04            <1>  sub vV_sp , cell(%1)
    66                              <1> 
    67 000004C3 41830F00                	or DWORD[vV_sp] , 0			
    68 000004C7 7418                    	je wblock_5	
    69                                  
    70                                   ;OpADR: [5]  ; DROP opcode 
    71                                  
    72 000004C9 4983EF04                	sub vV_sp , 4	
    73                                  
    74                                   ;OpADR: [6]  ; DROP opcode 
    75                                  
    76 000004CD 4983EF04                	sub vV_sp , 4	
    77                                  
    78                                   ;OpADR: [7]  ; PUSH opcode 
    79                                  
    80                                  	vV_push 0 
    80                              <1> 
    80 000004D1 41C70700000000      <1>  mov DWORD[vV_sp] , %1
    80 000004D8 4983C704            <1>  add vV_sp , 4
    80                              <1> 
    81                                  
    82                                  
    83                                   ;OpADR: [8]  ; ELIF opcode					
    84                                  
    85 000004DC E9AD000000              	jmp wblock_4	
    86                                  
    87                                  
    88                                  	wblock_5:		
    89                                  
    90                                  ;------------------------------------------------------
    91                                  
    92                                  
    93                                   ;OpADR: [9]  ; DUP opcode (1)			
    94                                  
    95                                  	vV_dup 1			
    95                              <1> 
    95 000004E1 B901000000          <1>  mov ecx , %1
    95 000004E6 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
    95 000004EA 4C89FF              <1>  mov rdi , vV_sp
    95                              <1> 
    95 000004ED F3A5                <1>  rep movsd
    95                              <1> 
    95 000004EF 4983C704            <1>  add vV_sp , cell(%1)
    95                              <1> 
    96                                  
    97                                  
    98                                   ;OpADR: [10]  ; PUSH opcode 
    99                                  
   100                                  	vV_push 2 
   100                              <1> 
   100 000004F3 41C70702000000      <1>  mov DWORD[vV_sp] , %1
   100 000004FA 4983C704            <1>  add vV_sp , 4
   100                              <1> 
   101                                  
   102                                  
   103                                   ;OpADR: [11]  ; EQUAL opcode					
   104                                  
   105 000004FE 418B47FC                	mov eax , vV_top			
   106 00000502 413947F8                	cmp DWORD vV_2nd , eax			
   107                                  
   108 00000506 75(0B)                  	jnz short 0xb				
   109                                  
   110 00000508 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   111                                  
   112 00000510 EB(09)                  	jmp short 0x9				
   113                                  
   114 00000512 41C747F800000000        			mov DWORD vV_2nd , 0	
   115                                  
   116                                  	vV_dec_sp 1				
   116                              <1> 
   116 0000051A 4983EF04            <1>  sub vV_sp , cell(%1)
   116                              <1> 
   117                                  
   118                                   ;OpADR: [12]  ; IF opcode					
   119                                  
   120                                  	vV_dec_sp 1			
   120                              <1> 
   120 0000051E 4983EF04            <1>  sub vV_sp , cell(%1)
   120                              <1> 
   121 00000522 41830F00                	or DWORD[vV_sp] , 0			
   122 00000526 7453                    	je wblock_3	
   123                                  
   124                                   ;OpADR: [13]  ; DROP opcode 
   125                                  
   126 00000528 4983EF04                	sub vV_sp , 4	
   127                                  
   128                                   ;OpADR: [14]  ; PUSH opcode 
   129                                  
   130                                  	vV_push 0 
   130                              <1> 
   130 0000052C 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   130 00000533 4983C704            <1>  add vV_sp , 4
   130                              <1> 
   131                                  
   132                                  
   133                                   ;OpADR: [15]  ; EQUAL opcode					
   134                                  
   135 00000537 418B47FC                	mov eax , vV_top			
   136 0000053B 413947F8                	cmp DWORD vV_2nd , eax			
   137                                  
   138 0000053F 75(0B)                  	jnz short 0xb				
   139                                  
   140 00000541 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   141                                  
   142 00000549 EB(09)                  	jmp short 0x9				
   143                                  
   144 0000054B 41C747F800000000        			mov DWORD vV_2nd , 0	
   145                                  
   146                                  	vV_dec_sp 1				
   146                              <1> 
   146 00000553 4983EF04            <1>  sub vV_sp , cell(%1)
   146                              <1> 
   147                                  
   148                                   ;OpADR: [16]  ; IF opcode					
   149                                  
   150                                  	vV_dec_sp 1			
   150                              <1> 
   150 00000557 4983EF04            <1>  sub vV_sp , cell(%1)
   150                              <1> 
   151 0000055B 41830F00                	or DWORD[vV_sp] , 0			
   152 0000055F 740D                    	je wblock_1	
   153                                  
   154                                   ;OpADR: [17]  ; PUSH opcode 
   155                                  
   156                                  	vV_push 1 
   156                              <1> 
   156 00000561 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   156 00000568 4983C704            <1>  add vV_sp , 4
   156                              <1> 
   157                                  
   158                                  
   159                                   ;OpADR: [18]  ; ELIF opcode					
   160                                  
   161 0000056C EB0B                    	jmp wblock_0	
   162                                  
   163                                  
   164                                  	wblock_1:		
   165                                  
   166                                  ;------------------------------------------------------
   167                                  
   168                                  
   169                                   ;OpADR: [19]  ; PUSH opcode 
   170                                  
   171                                  	vV_push 0 
   171                              <1> 
   171 0000056E 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   171 00000575 4983C704            <1>  add vV_sp , 4
   171                              <1> 
   172                                  
   173                                  
   174                                  
   175                                  	wblock_0:		
   176                                  
   177                                  ;------------------------------------------------------
   178                                  
   179                                  
   180                                   ;OpADR: [20]  ; ELIF opcode					
   181                                  
   182 00000579 EB13                    	jmp wblock_4	
   183                                  
   184                                  
   185                                  	wblock_3:		
   186                                  
   187                                  ;------------------------------------------------------
   188                                  
   189                                  
   190                                   ;OpADR: [21]  ; DROP opcode 
   191                                  
   192 0000057B 4983EF04                	sub vV_sp , 4	
   193                                  
   194                                   ;OpADR: [22]  ; DROP opcode 
   195                                  
   196 0000057F 4983EF04                	sub vV_sp , 4	
   197                                  
   198                                   ;OpADR: [23]  ; PUSH opcode 
   199                                  
   200                                  	vV_push 1 
   200                              <1> 
   200 00000583 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   200 0000058A 4983C704            <1>  add vV_sp , 4
   200                              <1> 
   201                                  
   202                                  
   203                                  
   204                                  	wblock_4:		
   205                                  
   206                                  ;------------------------------------------------------
   207                                  
   208                                  
   209                                   ;OpADR: [24]  ; End of func opcode					
   210                                  
   211                                  
   212                                  ;------Cleanup Phase
   213                                  
   214                                  ;------frame restore Phase
   215 0000058E 4889EC                  	mov rsp , rbp	
   216 00000591 5D                      	pop rbp	
   217 00000592 C3                      	ret	
   218                                  print:		
   219 00000593 55                      	push rbp	
   220 00000594 4889E5                  	mov rbp , rsp	
   221                                  
   222                                  ;------Setup Phase
   223                                  
   224                                  ;------Init Phase
   225                                  
   226                                  .tailcall:		;Body Section	
   227                                  
   228                                   ;OpADR: [25]  ; PUSH opcode 
   229                                  
   230                                  	vV_push 0 
   230                              <1> 
   230 00000597 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   230 0000059E 4983C704            <1>  add vV_sp , 4
   230                              <1> 
   231                                  
   232                                  
   233                                   ;OpADR: [26]  ; EQUAL opcode					
   234                                  
   235 000005A2 418B47FC                	mov eax , vV_top			
   236 000005A6 413947F8                	cmp DWORD vV_2nd , eax			
   237                                  
   238 000005AA 75(0B)                  	jnz short 0xb				
   239                                  
   240 000005AC 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   241                                  
   242 000005B4 EB(09)                  	jmp short 0x9				
   243                                  
   244 000005B6 41C747F800000000        			mov DWORD vV_2nd , 0	
   245                                  
   246                                  	vV_dec_sp 1				
   246                              <1> 
   246 000005BE 4983EF04            <1>  sub vV_sp , cell(%1)
   246                              <1> 
   247                                  
   248                                   ;OpADR: [27]  ; IF opcode					
   249                                  
   250                                  	vV_dec_sp 1			
   250                              <1> 
   250 000005C2 4983EF04            <1>  sub vV_sp , cell(%1)
   250                              <1> 
   251 000005C6 41830F00                	or DWORD[vV_sp] , 0			
   252 000005CA 7412                    	je wblock_7	
   253                                  
   254                                   ;OpADR: [28]  ; PUSH opcode 
   255                                  
   256                                  	vV_push 32 
   256                              <1> 
   256 000005CC 41C70720000000      <1>  mov DWORD[vV_sp] , %1
   256 000005D3 4983C704            <1>  add vV_sp , 4
   256                              <1> 
   257                                  
   258                                  
   259                                   ;OpADR: [29]  ; BUFF_OUT opcode (8)			
   260                                  
   261                                  
   262 000005D7 E8F1FBFFFF              	call vV_io_out_char_buffer			
   263                                  						
   264                                  
   265                                   ;OpADR: [30]  ; ELIF opcode					
   266                                  
   267 000005DC EB10                    	jmp wblock_6	
   268                                  
   269                                  
   270                                  	wblock_7:		
   271                                  
   272                                  ;------------------------------------------------------
   273                                  
   274                                  
   275                                   ;OpADR: [31]  ; PUSH opcode 
   276                                  
   277                                  	vV_push 42 
   277                              <1> 
   277 000005DE 41C7072A000000      <1>  mov DWORD[vV_sp] , %1
   277 000005E5 4983C704            <1>  add vV_sp , 4
   277                              <1> 
   278                                  
   279                                  
   280                                   ;OpADR: [32]  ; BUFF_OUT opcode (8)			
   281                                  
   282                                  
   283 000005E9 E8DFFBFFFF              	call vV_io_out_char_buffer			
   284                                  						
   285                                  
   286                                  
   287                                  	wblock_6:		
   288                                  
   289                                  ;------------------------------------------------------
   290                                  
   291                                  
   292                                   ;OpADR: [33]  ; End of func opcode					
   293                                  
   294                                  
   295                                  ;------Cleanup Phase
   296                                  
   297                                  ;------frame restore Phase
   298 000005EE 4889EC                  	mov rsp , rbp	
   299 000005F1 5D                      	pop rbp	
   300 000005F2 C3                      	ret	
   301                                  set_seed:		
   302 000005F3 55                      	push rbp	
   303 000005F4 4889E5                  	mov rbp , rsp	
   304                                  
   305                                  ;------Setup Phase
   306 000005F7 4883EC10                	sub rsp , 16	;Space for local vars	
   307                                  
   308                                  ;------Init Phase
   309 000005FB C745F800000000          mov DWORD[rbp  - 8 ] , 0		; space for lvar 0 (c)	
   310                                  
   311                                  .tailcall:		;Body Section	
   312                                  
   313                                   ;OpADR: [34]  ; PUSH opcode 
   314                                  
   315                                  	vV_push 1 
   315                              <1> 
   315 00000602 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   315 00000609 4983C704            <1>  add vV_sp , 4
   315                              <1> 
   316                                  
   317                                  
   318                                  
   319                                  	wblock_10:		
   320                                  
   321                                  ;------------------------------------------------------
   322                                  
   323                                  
   324                                   ;OpADR: [35]  ; DUP opcode (2)			
   325                                  
   326                                  	vV_dup 2			
   326                              <1> 
   326 0000060D B902000000          <1>  mov ecx , %1
   326 00000612 498D77F8            <1>  lea rsi , [vV_sp-cell(%1)]
   326 00000616 4C89FF              <1>  mov rdi , vV_sp
   326                              <1> 
   326 00000619 F3A5                <1>  rep movsd
   326                              <1> 
   326 0000061B 4983C708            <1>  add vV_sp , cell(%1)
   326                              <1> 
   327                                  
   328                                  
   329                                   ;OpADR: [36]  ; OR opcode					
   330                                  
   331 0000061F 418B47FC                	mov eax , vV_top			
   332 00000623 412147F8                	and DWORD vV_2nd , eax			
   333                                  
   334                                  	vV_dec_sp 1				
   334                              <1> 
   334 00000627 4983EF04            <1>  sub vV_sp , cell(%1)
   334                              <1> 
   335                                  
   336                                   ;OpADR: [37]  ; IF opcode					
   337                                  
   338                                  	vV_dec_sp 1			
   338                              <1> 
   338 0000062B 4983EF04            <1>  sub vV_sp , cell(%1)
   338                              <1> 
   339 0000062F 41830F00                	or DWORD[vV_sp] , 0			
   340 00000633 740D                    	je wblock_9	
   341                                  
   342                                   ;OpADR: [38]  ; PUSH opcode 
   343                                  
   344                                  	vV_push 1 
   344                              <1> 
   344 00000635 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   344 0000063C 4983C704            <1>  add vV_sp , 4
   344                              <1> 
   345                                  
   346                                  
   347                                   ;OpADR: [39]  ; ELIF opcode					
   348                                  
   349 00000640 EB0B                    	jmp wblock_8	
   350                                  
   351                                  
   352                                  	wblock_9:		
   353                                  
   354                                  ;------------------------------------------------------
   355                                  
   356                                  
   357                                   ;OpADR: [40]  ; PUSH opcode 
   358                                  
   359                                  	vV_push 0 
   359                              <1> 
   359 00000642 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   359 00000649 4983C704            <1>  add vV_sp , 4
   359                              <1> 
   360                                  
   361                                  
   362                                  
   363                                  	wblock_8:		
   364                                  
   365                                  ;------------------------------------------------------
   366                                  
   367                                  
   368                                   ;OpADR: [41]  ; Var invocation					
   369                                  
   370 0000064D 488B0425[28010000]      mov rax , [i_global.size]
   371                                  vV_push eax
   371                              <1> 
   371 00000655 418907              <1>  mov DWORD[vV_sp] , %1
   371 00000658 4983C704            <1>  add vV_sp , 4
   371                              <1> 
   372                                  
   373                                   ;OpADR: [42]  ; Var invocation					
   374                                  
   375 0000065C 488B45F8                mov rax , [rbp - 8]
   376                                  vV_push eax
   376                              <1> 
   376 00000660 418907              <1>  mov DWORD[vV_sp] , %1
   376 00000663 4983C704            <1>  add vV_sp , 4
   376                              <1> 
   377                                  
   378                                   ;OpADR: [43]  ; SUB opcode 					
   379                                  
   380 00000667 418B47F8                	mov eax , vV_2nd			
   381 0000066B 412B47FC                	sub eax , vV_top			
   382 0000066F 418947F8                	mov vV_2nd, eax			
   383                                  
   384                                  	vV_dec_sp 1		
   384                              <1> 
   384 00000673 4983EF04            <1>  sub vV_sp , cell(%1)
   384                              <1> 
   385                                  
   386                                   ;OpADR: [44]  ; Var assignement					
   387                                  
   388 00000677 31C0                    	xor eax , eax	
   389                                  	vV_pop edi		
   389                              <1> 
   389 00000679 4983EF04            <1>  sub vV_sp , 4
   389 0000067D 418B3F              <1>  mov %1 , [vV_sp]
   389                              <1> 
   390 00000680 01F8                    	add eax , edi			
   391 00000682 C1E002                  	shl eax , 2	
   392 00000685 89C6                    	mov esi , eax		
   393 00000687 BF[8A020000]            	mov edi , u_global.board
   394                                  vV_pop eax
   394                              <1> 
   394 0000068C 4983EF04            <1>  sub vV_sp , 4
   394 00000690 418B07              <1>  mov %1 , [vV_sp]
   394                              <1> 
   395 00000693 67890437                mov [edi + esi] , eax
   396                                  
   397                                   ;OpADR: [45]  ; LSH opcode 					
   398                                  
   399 00000697 41D167FC                	shl DWORD vV_top , 1			
   400                                  
   401                                   ;OpADR: [46]  ; Var invocation					
   402                                  
   403 0000069B 488B45F8                mov rax , [rbp - 8]
   404                                  vV_push eax
   404                              <1> 
   404 0000069F 418907              <1>  mov DWORD[vV_sp] , %1
   404 000006A2 4983C704            <1>  add vV_sp , 4
   404                              <1> 
   405                                  
   406                                   ;OpADR: [47]  ; PUSH opcode 
   407                                  
   408                                  	vV_push 1 
   408                              <1> 
   408 000006A6 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   408 000006AD 4983C704            <1>  add vV_sp , 4
   408                              <1> 
   409                                  
   410                                  
   411                                   ;OpADR: [48]  ; ADD opcode 					
   412                                  
   413 000006B1 418B47F8                	mov eax , vV_2nd			
   414 000006B5 410347FC                	add eax , vV_top			
   415 000006B9 418947F8                	mov vV_2nd , eax			
   416                                  
   417                                  	vV_dec_sp 1		
   417                              <1> 
   417 000006BD 4983EF04            <1>  sub vV_sp , cell(%1)
   417                              <1> 
   418                                  
   419                                   ;OpADR: [49]  ; Var assignement					
   420                                  
   421                                  vV_pop eax
   421                              <1> 
   421 000006C1 4983EF04            <1>  sub vV_sp , 4
   421 000006C5 418B07              <1>  mov %1 , [vV_sp]
   421                              <1> 
   422 000006C8 8945F8                  mov [rbp - 8] , eax
   423                                  
   424                                   ;OpADR: [50]  ; Var invocation					
   425                                  
   426 000006CB 488B45F8                mov rax , [rbp - 8]
   427                                  vV_push eax
   427                              <1> 
   427 000006CF 418907              <1>  mov DWORD[vV_sp] , %1
   427 000006D2 4983C704            <1>  add vV_sp , 4
   427                              <1> 
   428                                  
   429                                   ;OpADR: [51]  ; PUSH opcode 
   430                                  
   431                                  	vV_push 33 
   431                              <1> 
   431 000006D6 41C70721000000      <1>  mov DWORD[vV_sp] , %1
   431 000006DD 4983C704            <1>  add vV_sp , 4
   431                              <1> 
   432                                  
   433                                  
   434                                   ;OpADR: [52]  ; LESS opcode					
   435                                  
   436 000006E1 418B47FC                	mov eax , vV_top			
   437 000006E5 413947F8                	cmp DWORD vV_2nd , eax			
   438                                  
   439 000006E9 73(0B)                  	jae short 0xb				
   440                                  
   441 000006EB 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   442                                  
   443 000006F3 EB(09)                  	jmp short 0x9				
   444                                  
   445 000006F5 41C747F800000000        			mov DWORD vV_2nd , 0	
   446                                  
   447                                  	vV_dec_sp 1				
   447                              <1> 
   447 000006FD 4983EF04            <1>  sub vV_sp , cell(%1)
   447                              <1> 
   448                                  
   449                                   ;OpADR: [53]  ; WHILE opcode					
   450                                  
   451                                  	vV_dec_sp 1				
   451                              <1> 
   451 00000701 4983EF04            <1>  sub vV_sp , cell(%1)
   451                              <1> 
   452 00000705 41830F00                	or DWORD[vV_sp] , 0			
   453 00000709 0F85FEFEFFFF            	jne wblock_10		
   454                                  
   455                                   ;OpADR: [54]  ; End of func opcode					
   456                                  
   457                                  
   458                                  ;------Cleanup Phase
   459                                  
   460                                  ;------frame restore Phase
   461 0000070F 4889EC                  	mov rsp , rbp	
   462 00000712 5D                      	pop rbp	
   463 00000713 C3                      	ret	
   464                                  popup:		
   465 00000714 55                      	push rbp	
   466 00000715 4889E5                  	mov rbp , rsp	
   467                                  
   468                                  ;------Setup Phase
   469                                  
   470                                  ;------Init Phase
   471                                  
   472                                  .tailcall:		;Body Section	
   473                                  
   474                                   ;OpADR: [55]  ; PUSH opcode 
   475                                  
   476                                  	vV_push 540680240 
   476                              <1> 
   476 00000718 41C70730203A20      <1>  mov DWORD[vV_sp] , %1
   476 0000071F 4983C704            <1>  add vV_sp , 4
   476                              <1> 
   477                                  
   478                                  
   479                                   ;OpADR: [56]  ; PUSH opcode 
   480                                  
   481                                  	vV_push 825303141 
   481                              <1> 
   481 00000723 41C70765203131      <1>  mov DWORD[vV_sp] , %1
   481 0000072A 4983C704            <1>  add vV_sp , 4
   481                              <1> 
   482                                  
   483                                  
   484                                   ;OpADR: [57]  ; PUSH opcode 
   485                                  
   486                                  	vV_push 1819636256 
   486                              <1> 
   486 0000072E 41C7072072756C      <1>  mov DWORD[vV_sp] , %1
   486 00000735 4983C704            <1>  add vV_sp , 4
   486                              <1> 
   487                                  
   488                                  
   489                                   ;OpADR: [58]  ; PUSH opcode 
   490                                  
   491                                  	vV_push 1919903264 
   491                              <1> 
   491 00000739 41C70720666F72      <1>  mov DWORD[vV_sp] , %1
   491 00000740 4983C704            <1>  add vV_sp , 4
   491                              <1> 
   492                                  
   493                                  
   494                                   ;OpADR: [59]  ; PUSH opcode 
   495                                  
   496                                  	vV_push 1684366707 
   496                              <1> 
   496 00000744 41C70773656564      <1>  mov DWORD[vV_sp] , %1
   496 0000074B 4983C704            <1>  add vV_sp , 4
   496                              <1> 
   497                                  
   498                                  
   499                                   ;OpADR: [60]  ; PUSH opcode 
   500                                  
   501                                  	vV_push 543236210 
   501                              <1> 
   501 0000074F 41C70772206120      <1>  mov DWORD[vV_sp] , %1
   501 00000756 4983C704            <1>  add vV_sp , 4
   501                              <1> 
   502                                  
   503                                  
   504                                   ;OpADR: [61]  ; PUSH opcode 
   505                                  
   506                                  	vV_push 1702129221 
   506                              <1> 
   506 0000075A 41C707456E7465      <1>  mov DWORD[vV_sp] , %1
   506 00000761 4983C704            <1>  add vV_sp , 4
   506                              <1> 
   507                                  
   508                                  
   509                                   ;OpADR: [62]  ; BUFF_OUT opcode (9)			
   510                                  
   511                                  
   512 00000765 E86EFAFFFF              	call vV_io_out_packed_char_buffer				
   513                                  						
   514                                  
   515                                   ;OpADR: [63]  ; BUFF_OUT opcode (9)			
   516                                  
   517                                  
   518 0000076A E869FAFFFF              	call vV_io_out_packed_char_buffer				
   519                                  						
   520                                  
   521                                   ;OpADR: [64]  ; BUFF_OUT opcode (9)			
   522                                  
   523                                  
   524 0000076F E864FAFFFF              	call vV_io_out_packed_char_buffer				
   525                                  						
   526                                  
   527                                   ;OpADR: [65]  ; BUFF_OUT opcode (9)			
   528                                  
   529                                  
   530 00000774 E85FFAFFFF              	call vV_io_out_packed_char_buffer				
   531                                  						
   532                                  
   533                                   ;OpADR: [66]  ; BUFF_OUT opcode (9)			
   534                                  
   535                                  
   536 00000779 E85AFAFFFF              	call vV_io_out_packed_char_buffer				
   537                                  						
   538                                  
   539                                   ;OpADR: [67]  ; BUFF_OUT opcode (9)			
   540                                  
   541                                  
   542 0000077E E855FAFFFF              	call vV_io_out_packed_char_buffer				
   543                                  						
   544                                  
   545                                   ;OpADR: [68]  ; BUFF_OUT opcode (9)			
   546                                  
   547                                  
   548 00000783 E850FAFFFF              	call vV_io_out_packed_char_buffer				
   549                                  						
   550                                  
   551                                   ;OpADR: [69]  ; FLUSH opcode					
   552                                  
   553 00000788 E87FF9FFFF              		call vV_io_flush	
   554                                  
   555                                   ;OpADR: [70]  ; GET opcode (0)			
   556                                  
   557 0000078D E8DFFAFFFF              	call vV_io_get_default			
   558                                  						
   559                                  
   560                                   ;OpADR: [71]  ; End of func opcode					
   561                                  
   562                                  
   563                                  ;------Cleanup Phase
   564                                  
   565                                  ;------frame restore Phase
   566 00000792 4889EC                  	mov rsp , rbp	
   567 00000795 5D                      	pop rbp	
   568 00000796 C3                      	ret	
   569                                  
   570                                  		
   571                                  
   572                                  
   573                                  
   574                                  vV_entry_point:
   575                                  
   576                                  
   577 00000797 4889E5                  	mov rbp, rsp			;Setup Stack Frame
   578                                  	
   579                                  	
   580                                   ;OpADR: [0]  ; PUSH opcode 
   581                                  
   582                                  	vV_push 1 
   582                              <1> 
   582 0000079A 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   582 000007A1 4983C704            <1>  add vV_sp , 4
   582                              <1> 
   583                                  
   584                                  
   585                                   ;OpADR: [1]  ; Var invocation					
   586                                  
   587 000007A5 488B0425[28010000]      mov rax , [i_global.size]
   588                                  vV_push eax
   588                              <1> 
   588 000007AD 418907              <1>  mov DWORD[vV_sp] , %1
   588 000007B0 4983C704            <1>  add vV_sp , 4
   588                              <1> 
   589                                  
   590                                   ;OpADR: [2]  ; PUSH opcode 
   591                                  
   592                                  	vV_push 1 
   592                              <1> 
   592 000007B4 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   592 000007BB 4983C704            <1>  add vV_sp , 4
   592                              <1> 
   593                                  
   594                                  
   595                                   ;OpADR: [3]  ; SUB opcode 					
   596                                  
   597 000007BF 418B47F8                	mov eax , vV_2nd			
   598 000007C3 412B47FC                	sub eax , vV_top			
   599 000007C7 418947F8                	mov vV_2nd, eax			
   600                                  
   601                                  	vV_dec_sp 1		
   601                              <1> 
   601 000007CB 4983EF04            <1>  sub vV_sp , cell(%1)
   601                              <1> 
   602                                  
   603                                   ;OpADR: [4]  ; Var assignement					
   604                                  
   605 000007CF 31C0                    	xor eax , eax	
   606                                  	vV_pop edi		
   606                              <1> 
   606 000007D1 4983EF04            <1>  sub vV_sp , 4
   606 000007D5 418B3F              <1>  mov %1 , [vV_sp]
   606                              <1> 
   607 000007D8 01F8                    	add eax , edi			
   608 000007DA C1E002                  	shl eax , 2	
   609 000007DD 89C6                    	mov esi , eax		
   610 000007DF BF[8A020000]            	mov edi , u_global.board
   611                                  vV_pop eax
   611                              <1> 
   611 000007E4 4983EF04            <1>  sub vV_sp , 4
   611 000007E8 418B07              <1>  mov %1 , [vV_sp]
   611                              <1> 
   612 000007EB 67890437                mov [edi + esi] , eax
   613                                  
   614                                   ;OpADR: [5]  ; Function Call					
   615                                  
   616 000007EF E820FFFFFF              		call popup			
   617                                  
   618                                   ;OpADR: [6]  ; Function Call					
   619                                  
   620 000007F4 E8FAFDFFFF              		call set_seed			
   621                                  
   622                                  
   623                                  	wblock_12:		
   624                                  
   625                                  ;------------------------------------------------------
   626                                  
   627                                  
   628                                   ;OpADR: [7]  ; PUSH opcode 
   629                                  
   630                                  	vV_push 0 
   630                              <1> 
   630 000007F9 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   630 00000800 4983C704            <1>  add vV_sp , 4
   630                              <1> 
   631                                  
   632                                  
   633                                   ;OpADR: [8]  ; Var assignement					
   634                                  
   635                                  vV_pop eax
   635                              <1> 
   635 00000804 4983EF04            <1>  sub vV_sp , 4
   635 00000808 418B07              <1>  mov %1 , [vV_sp]
   635                              <1> 
   636 0000080B 890425[AE050000]        mov [u_global.saved] , eax
   637                                  
   638                                   ;OpADR: [9]  ; PUSH opcode 
   639                                  
   640                                  	vV_push 0 
   640                              <1> 
   640 00000812 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   640 00000819 4983C704            <1>  add vV_sp , 4
   640                              <1> 
   641                                  
   642                                  
   643                                   ;OpADR: [10]  ; Var assignement					
   644                                  
   645                                  vV_pop eax
   645                              <1> 
   645 0000081D 4983EF04            <1>  sub vV_sp , 4
   645 00000821 418B07              <1>  mov %1 , [vV_sp]
   645                              <1> 
   646 00000824 890425[86020000]        mov [u_global.index] , eax
   647                                  
   648                                   ;OpADR: [11]  ; PUSH opcode 
   649                                  
   650                                  	vV_push 56 
   650                              <1> 
   650 0000082B 41C70738000000      <1>  mov DWORD[vV_sp] , %1
   650 00000832 4983C704            <1>  add vV_sp , 4
   650                              <1> 
   651                                  
   652                                  
   653                                   ;OpADR: [12]  ; PUSH opcode 
   654                                  
   655                                  	vV_push 67 
   655                              <1> 
   655 00000836 41C70743000000      <1>  mov DWORD[vV_sp] , %1
   655 0000083D 4983C704            <1>  add vV_sp , 4
   655                              <1> 
   656                                  
   657                                  
   658                                  
   659                                  	wblock_11:		
   660                                  
   661                                  ;------------------------------------------------------
   662                                  
   663                                  
   664                                   ;OpADR: [13]  ; Var invocation					
   665                                  
   666 00000841 488B0425[AE050000]      mov rax , [u_global.saved]
   667                                  vV_push eax
   667                              <1> 
   667 00000849 418907              <1>  mov DWORD[vV_sp] , %1
   667 0000084C 4983C704            <1>  add vV_sp , 4
   667                              <1> 
   668                                  
   669                                   ;OpADR: [14]  ; Var invocation					
   670                                  
   671 00000850 488B0425[86020000]      mov rax , [u_global.index]
   672                                  vV_push eax
   672                              <1> 
   672 00000858 418907              <1>  mov DWORD[vV_sp] , %1
   672 0000085B 4983C704            <1>  add vV_sp , 4
   672                              <1> 
   673                                  
   674                                   ;OpADR: [15]  ; Var invocation					
   675                                  
   676 0000085F 31C0                    	xor eax , eax	
   677                                  	vV_pop edi		
   677                              <1> 
   677 00000861 4983EF04            <1>  sub vV_sp , 4
   677 00000865 418B3F              <1>  mov %1 , [vV_sp]
   677                              <1> 
   678 00000868 01F8                    	add eax , edi			
   679 0000086A C1E002                  	shl eax , 2	
   680 0000086D 89C6                    	mov esi , eax		
   681 0000086F BF[8A020000]            	mov edi , u_global.board
   682 00000874 67488B0437              mov rax , [edi + esi]
   683                                  vV_push eax
   683                              <1> 
   683 00000879 418907              <1>  mov DWORD[vV_sp] , %1
   683 0000087C 4983C704            <1>  add vV_sp , 4
   683                              <1> 
   684                                  
   685                                   ;OpADR: [16]  ; Var invocation					
   686                                  
   687 00000880 488B0425[86020000]      mov rax , [u_global.index]
   688                                  vV_push eax
   688                              <1> 
   688 00000888 418907              <1>  mov DWORD[vV_sp] , %1
   688 0000088B 4983C704            <1>  add vV_sp , 4
   688                              <1> 
   689                                  
   690                                   ;OpADR: [17]  ; PUSH opcode 
   691                                  
   692                                  	vV_push 1 
   692                              <1> 
   692 0000088F 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   692 00000896 4983C704            <1>  add vV_sp , 4
   692                              <1> 
   693                                  
   694                                  
   695                                   ;OpADR: [18]  ; ADD opcode 					
   696                                  
   697 0000089A 418B47F8                	mov eax , vV_2nd			
   698 0000089E 410347FC                	add eax , vV_top			
   699 000008A2 418947F8                	mov vV_2nd , eax			
   700                                  
   701                                  	vV_dec_sp 1		
   701                              <1> 
   701 000008A6 4983EF04            <1>  sub vV_sp , cell(%1)
   701                              <1> 
   702                                  
   703                                   ;OpADR: [19]  ; Var invocation					
   704                                  
   705 000008AA 31C0                    	xor eax , eax	
   706                                  	vV_pop edi		
   706                              <1> 
   706 000008AC 4983EF04            <1>  sub vV_sp , 4
   706 000008B0 418B3F              <1>  mov %1 , [vV_sp]
   706                              <1> 
   707 000008B3 01F8                    	add eax , edi			
   708 000008B5 C1E002                  	shl eax , 2	
   709 000008B8 89C6                    	mov esi , eax		
   710 000008BA BF[8A020000]            	mov edi , u_global.board
   711 000008BF 67488B0437              mov rax , [edi + esi]
   712                                  vV_push eax
   712                              <1> 
   712 000008C4 418907              <1>  mov DWORD[vV_sp] , %1
   712 000008C7 4983C704            <1>  add vV_sp , 4
   712                              <1> 
   713                                  
   714                                   ;OpADR: [20]  ; Function Call					
   715                                  
   716 000008CB E89EFBFFFF              		call set_next			
   717                                  
   718                                   ;OpADR: [21]  ; DUP opcode (1)			
   719                                  
   720                                  	vV_dup 1			
   720                              <1> 
   720 000008D0 B901000000          <1>  mov ecx , %1
   720 000008D5 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   720 000008D9 4C89FF              <1>  mov rdi , vV_sp
   720                              <1> 
   720 000008DC F3A5                <1>  rep movsd
   720                              <1> 
   720 000008DE 4983C704            <1>  add vV_sp , cell(%1)
   720                              <1> 
   721                                  
   722                                  
   723                                   ;OpADR: [22]  ; Var invocation					
   724                                  
   725 000008E2 488B0425[86020000]      mov rax , [u_global.index]
   726                                  vV_push eax
   726                              <1> 
   726 000008EA 418907              <1>  mov DWORD[vV_sp] , %1
   726 000008ED 4983C704            <1>  add vV_sp , 4
   726                              <1> 
   727                                  
   728                                   ;OpADR: [23]  ; Var invocation					
   729                                  
   730 000008F1 31C0                    	xor eax , eax	
   731                                  	vV_pop edi		
   731                              <1> 
   731 000008F3 4983EF04            <1>  sub vV_sp , 4
   731 000008F7 418B3F              <1>  mov %1 , [vV_sp]
   731                              <1> 
   732 000008FA 01F8                    	add eax , edi			
   733 000008FC C1E002                  	shl eax , 2	
   734 000008FF 89C6                    	mov esi , eax		
   735 00000901 BF[8A020000]            	mov edi , u_global.board
   736 00000906 67488B0437              mov rax , [edi + esi]
   737                                  vV_push eax
   737                              <1> 
   737 0000090B 418907              <1>  mov DWORD[vV_sp] , %1
   737 0000090E 4983C704            <1>  add vV_sp , 4
   737                              <1> 
   738                                  
   739                                   ;OpADR: [24]  ; Var assignement					
   740                                  
   741                                  vV_pop eax
   741                              <1> 
   741 00000912 4983EF04            <1>  sub vV_sp , 4
   741 00000916 418B07              <1>  mov %1 , [vV_sp]
   741                              <1> 
   742 00000919 890425[AE050000]        mov [u_global.saved] , eax
   743                                  
   744                                   ;OpADR: [25]  ; Var invocation					
   745                                  
   746 00000920 488B0425[86020000]      mov rax , [u_global.index]
   747                                  vV_push eax
   747                              <1> 
   747 00000928 418907              <1>  mov DWORD[vV_sp] , %1
   747 0000092B 4983C704            <1>  add vV_sp , 4
   747                              <1> 
   748                                  
   749                                   ;OpADR: [26]  ; Var assignement					
   750                                  
   751 0000092F 31C0                    	xor eax , eax	
   752                                  	vV_pop edi		
   752                              <1> 
   752 00000931 4983EF04            <1>  sub vV_sp , 4
   752 00000935 418B3F              <1>  mov %1 , [vV_sp]
   752                              <1> 
   753 00000938 01F8                    	add eax , edi			
   754 0000093A C1E002                  	shl eax , 2	
   755 0000093D 89C6                    	mov esi , eax		
   756 0000093F BF[8A020000]            	mov edi , u_global.board
   757                                  vV_pop eax
   757                              <1> 
   757 00000944 4983EF04            <1>  sub vV_sp , 4
   757 00000948 418B07              <1>  mov %1 , [vV_sp]
   757                              <1> 
   758 0000094B 67890437                mov [edi + esi] , eax
   759                                  
   760                                   ;OpADR: [27]  ; Function Call					
   761                                  
   762 0000094F E83FFCFFFF              		call print			
   763                                  
   764                                   ;OpADR: [28]  ; Var invocation					
   765                                  
   766 00000954 488B0425[86020000]      mov rax , [u_global.index]
   767                                  vV_push eax
   767                              <1> 
   767 0000095C 418907              <1>  mov DWORD[vV_sp] , %1
   767 0000095F 4983C704            <1>  add vV_sp , 4
   767                              <1> 
   768                                  
   769                                   ;OpADR: [29]  ; PUSH opcode 
   770                                  
   771                                  	vV_push 1 
   771                              <1> 
   771 00000963 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   771 0000096A 4983C704            <1>  add vV_sp , 4
   771                              <1> 
   772                                  
   773                                  
   774                                   ;OpADR: [30]  ; ADD opcode 					
   775                                  
   776 0000096E 418B47F8                	mov eax , vV_2nd			
   777 00000972 410347FC                	add eax , vV_top			
   778 00000976 418947F8                	mov vV_2nd , eax			
   779                                  
   780                                  	vV_dec_sp 1		
   780                              <1> 
   780 0000097A 4983EF04            <1>  sub vV_sp , cell(%1)
   780                              <1> 
   781                                  
   782                                   ;OpADR: [31]  ; Var assignement					
   783                                  
   784                                  vV_pop eax
   784                              <1> 
   784 0000097E 4983EF04            <1>  sub vV_sp , 4
   784 00000982 418B07              <1>  mov %1 , [vV_sp]
   784                              <1> 
   785 00000985 890425[86020000]        mov [u_global.index] , eax
   786                                  
   787                                   ;OpADR: [32]  ; Var invocation					
   788                                  
   789 0000098C 488B0425[86020000]      mov rax , [u_global.index]
   790                                  vV_push eax
   790                              <1> 
   790 00000994 418907              <1>  mov DWORD[vV_sp] , %1
   790 00000997 4983C704            <1>  add vV_sp , 4
   790                              <1> 
   791                                  
   792                                   ;OpADR: [33]  ; Var invocation					
   793                                  
   794 0000099B 488B0425[28010000]      mov rax , [i_global.size]
   795                                  vV_push eax
   795                              <1> 
   795 000009A3 418907              <1>  mov DWORD[vV_sp] , %1
   795 000009A6 4983C704            <1>  add vV_sp , 4
   795                              <1> 
   796                                  
   797                                   ;OpADR: [34]  ; LESS opcode					
   798                                  
   799 000009AA 418B47FC                	mov eax , vV_top			
   800 000009AE 413947F8                	cmp DWORD vV_2nd , eax			
   801                                  
   802 000009B2 73(0B)                  	jae short 0xb				
   803                                  
   804 000009B4 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   805                                  
   806 000009BC EB(09)                  	jmp short 0x9				
   807                                  
   808 000009BE 41C747F800000000        			mov DWORD vV_2nd , 0	
   809                                  
   810                                  	vV_dec_sp 1				
   810                              <1> 
   810 000009C6 4983EF04            <1>  sub vV_sp , cell(%1)
   810                              <1> 
   811                                  
   812                                   ;OpADR: [35]  ; WHILE opcode					
   813                                  
   814                                  	vV_dec_sp 1				
   814                              <1> 
   814 000009CA 4983EF04            <1>  sub vV_sp , cell(%1)
   814                              <1> 
   815 000009CE 41830F00                	or DWORD[vV_sp] , 0			
   816 000009D2 0F8569FEFFFF            	jne wblock_11		
   817                                  
   818                                   ;OpADR: [36]  ; FLUSH opcode					
   819                                  
   820 000009D8 E82FF7FFFF              		call vV_io_flush	
   821                                  
   822                                   ;OpADR: [37]  ; Var invocation					
   823                                  
   824 000009DD 488B0425[18010000]      mov rax , [i_global.currentIter]
   825                                  vV_push eax
   825                              <1> 
   825 000009E5 418907              <1>  mov DWORD[vV_sp] , %1
   825 000009E8 4983C704            <1>  add vV_sp , 4
   825                              <1> 
   826                                  
   827                                   ;OpADR: [38]  ; PUSH opcode 
   828                                  
   829                                  	vV_push 1 
   829                              <1> 
   829 000009EC 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   829 000009F3 4983C704            <1>  add vV_sp , 4
   829                              <1> 
   830                                  
   831                                  
   832                                   ;OpADR: [39]  ; ADD opcode 					
   833                                  
   834 000009F7 418B47F8                	mov eax , vV_2nd			
   835 000009FB 410347FC                	add eax , vV_top			
   836 000009FF 418947F8                	mov vV_2nd , eax			
   837                                  
   838                                  	vV_dec_sp 1		
   838                              <1> 
   838 00000A03 4983EF04            <1>  sub vV_sp , cell(%1)
   838                              <1> 
   839                                  
   840                                   ;OpADR: [40]  ; Var assignement					
   841                                  
   842                                  vV_pop eax
   842                              <1> 
   842 00000A07 4983EF04            <1>  sub vV_sp , 4
   842 00000A0B 418B07              <1>  mov %1 , [vV_sp]
   842                              <1> 
   843 00000A0E 890425[18010000]        mov [i_global.currentIter] , eax
   844                                  
   845                                   ;OpADR: [41]  ; Var invocation					
   846                                  
   847 00000A15 488B0425[18010000]      mov rax , [i_global.currentIter]
   848                                  vV_push eax
   848                              <1> 
   848 00000A1D 418907              <1>  mov DWORD[vV_sp] , %1
   848 00000A20 4983C704            <1>  add vV_sp , 4
   848                              <1> 
   849                                  
   850                                   ;OpADR: [42]  ; Var invocation					
   851                                  
   852 00000A24 488B0425[28010000]      mov rax , [i_global.size]
   853                                  vV_push eax
   853                              <1> 
   853 00000A2C 418907              <1>  mov DWORD[vV_sp] , %1
   853 00000A2F 4983C704            <1>  add vV_sp , 4
   853                              <1> 
   854                                  
   855                                   ;OpADR: [43]  ; LESS opcode					
   856                                  
   857 00000A33 418B47FC                	mov eax , vV_top			
   858 00000A37 413947F8                	cmp DWORD vV_2nd , eax			
   859                                  
   860 00000A3B 73(0B)                  	jae short 0xb				
   861                                  
   862 00000A3D 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   863                                  
   864 00000A45 EB(09)                  	jmp short 0x9				
   865                                  
   866 00000A47 41C747F800000000        			mov DWORD vV_2nd , 0	
   867                                  
   868                                  	vV_dec_sp 1				
   868                              <1> 
   868 00000A4F 4983EF04            <1>  sub vV_sp , cell(%1)
   868                              <1> 
   869                                  
   870                                   ;OpADR: [44]  ; WHILE opcode					
   871                                  
   872                                  	vV_dec_sp 1				
   872                              <1> 
   872 00000A53 4983EF04            <1>  sub vV_sp , cell(%1)
   872                              <1> 
   873 00000A57 41830F00                	or DWORD[vV_sp] , 0			
   874 00000A5B 0F8598FDFFFF            	jne wblock_12		
   875                                  
   876                                   ;OpADR: [45]  ; PUSH opcode 
   877                                  
   878                                  	vV_push 543521122 
   878                              <1> 
   878 00000A61 41C70762796520      <1>  mov DWORD[vV_sp] , %1
   878 00000A68 4983C704            <1>  add vV_sp , 4
   878                              <1> 
   879                                  
   880                                  
   881                                   ;OpADR: [46]  ; OUT opcode (9)			
   882                                  
   883                                  								
   884 00000A6C E851F7FFFF              	call vV_io_out_packed_char				
   885                                  						
   886                                  		
   887 00000A71 C3                      		ret
   888                                  
   889                                  ;Transpiled from vV with vVc version 0.0.4
   890                                  		
   891                                  		
