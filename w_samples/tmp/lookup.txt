     1                                  %include "vVc/assembly/w_runtime/vV_defines.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> ;------------------Variables From Project-------------
     5                              <1> 
     6                              <1> 	;------------------Should come from io module(need refactoring)
     7                              <1> 
     8                              <1> 
     9                              <1> 	%define vV_input_buffer_size 255
    10                              <1> 	%define vV_output_buffer_size 255
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;------------------Implementation Relative-------------
    15                              <1> 
    16                              <1> %deftok vV_sp 'r15'
    17                              <1> 
    18                              <1> %deftok vV_spS 'r14'
    19                              <1> 
    20                              <1> %deftok vV_sdir '-'
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24                              <1> 
    25                              <1> ;------------------Stack Shortcuts--------------------
    26                              <1> 
    27                              <1> %define cell(a) (a*4)
    28                              <1> 
    29                              <1> 
    30                              <1> %define vV_top [vV_sp vV_sdir %+ cell(1)]
    31                              <1> %define vV_2nd [vV_sp vV_sdir %+ cell(2)]
    32                              <1> 
    33                              <1> %define vV_stack_v(a) ([vV_sp vV_sdir %+ cell(a)])
    34                              <1> 
    35                              <1> 
    36                              <1> ;-------------------Out_Format Pointer------------------
    37                              <1> 
    38                              <1> %deftok vV_FORMAT_BIN "vV_ascii_int_to_bin"
    39                              <1> %deftok vV_FORMAT_DEC "vV_ascii_int_to_dec"
    40                              <1> %deftok vV_FORMAT_HEX "vV_ascii_int_to_hex"
    41                              <1> 
    42                              <1> 
    43                              <1> 
    44                              <1> ;--------------------Op Macros--------------------------
    45                              <1> 
    46                              <1> %macro vV_push 1
    47                              <1> 
    48                              <1> 	mov DWORD[vV_sp] , %1
    49                              <1> 	add vV_sp , 4
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro vV_pop 1
    54                              <1> 
    55                              <1> 	sub vV_sp , 4
    56                              <1> 	mov %1 , [vV_sp]
    57                              <1> 	
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro vV_swap 0
    61                              <1> 
    62                              <1> 	mov edx , [vV_sp-4]
    63                              <1> 	mov eax , [vV_sp-8]
    64                              <1> 	mov [vV_sp-8] , edx 
    65                              <1> 	mov [vV_sp-4] , eax 
    66                              <1> 	
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro vV_dup 1
    70                              <1> 
    71                              <1> 	mov ecx , %1
    72                              <1> 	lea rsi , [vV_sp-cell(%1)]
    73                              <1> 	mov rdi , vV_sp
    74                              <1> 		
    75                              <1> 	rep movsd
    76                              <1> 	
    77                              <1> 	add vV_sp , cell(%1)
    78                              <1> 	
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> 
    82                              <1> %macro vV_dec_sp 1
    83                              <1> 
    84                              <1> 	sub vV_sp , cell(%1)
    85                              <1> 	
    86                              <1> %endmacro
    87                              <1> 	
     2                                  %include "vVc/assembly/w_runtime/vV_error_code.asm"		
     1                              <1> 
     2                              <1> %define vV_ERR_IO_I_OVERFLOW 1
     3                              <1> %define vV_ERR_IO_O_OVERFLOW 2
     4                              <1> %define vV_ERR_IO_I_UNVALID 3
     5                              <1> %define vV_ERR_IO_O_UNVALID 4
     6                              <1> %define vV_ERR_IO_I_VALUE_OVERFLOW 5
     7                              <1> 
     8                              <1> 
     9                              <1> %define vV_ERR_VALUE_OVERFLOW 8
    10                              <1> 
    11                              <1> 
    12                              <1> %define vV_ERR_MEMORY_BUFFER_LIMIT 16
    13                              <1> %define vV_ERR_MEMORY_OUT_OF_BOUND 17
     3                                  %include "vVc/assembly/w_runtime/vV_runtime.asm"		
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> 
     4                              <1> ;%include "vVc/assembly/w_runtime/vV_errors.asm"
     5                              <1> ;%include "vVc/assembly/w_runtime/vV_system00.asm"
     6                              <1> ;%include "vVc/assembly/w_runtime/vV_system10.asm"
     7                              <1> ;%include "vVc/assembly/w_runtime/vV_system90.asm"
     8                              <1> 
     9                              <1> 
    10                              <1> global _start
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;extern vV_entry_point			;Defined by main program
    15                              <1> 
    16                              <1> 
    17                              <1> 
    18                              <1> 	
    19                              <1> segment .data 
    20                              <1> 
    21                              <1> 
    22                              <1> 	
    23                              <1> 
    24                              <1> segment .text 
    25                              <1> 
    26                              <1> 
    27                              <1> 	vV_forced_exit:				;rax hold exit code
    28                              <1> 							;Removed default error printing
    29                              <1> 							;This will now happens in errors module
    30                              <1> 
    31 00000000 4889C7              <1> 		mov rdi, rax
    32 00000003 B83C000000          <1> 		mov rax, SYS_EXIT
    33 00000008 0F05                <1> 		syscall
    34                              <1> 		
    35                              <1> 		
    36                              <1> 
    37                              <1> 
    38                              <1> 	save_regs:			;In case called from other process
    39                              <1> 	
    40 0000000A 58                  <1> 		pop rax
    41                              <1> 	
    42 0000000B 53                  <1> 		push rbx
    43 0000000C 4154                <1> 		push r12
    44 0000000E 4155                <1> 		push r13
    45 00000010 4156                <1> 		push r14
    46 00000012 4157                <1> 		push r15
    47                              <1> 		
    48 00000014 50                  <1> 		push rax
    49                              <1> 		
    50 00000015 C3                  <1> 		ret
    51                              <1> 		
    52                              <1> 	restore_regs:
    53                              <1> 	
    54 00000016 58                  <1> 		pop rax
    55                              <1> 	
    56 00000017 415F                <1> 		pop r15
    57 00000019 415E                <1> 		pop r14
    58 0000001B 415D                <1> 		pop r13
    59 0000001D 415C                <1> 		pop r12
    60 0000001F 5B                  <1> 		pop rbx
    61                              <1> 		
    62 00000020 50                  <1> 		push rax
    63                              <1> 		
    64 00000021 C3                  <1> 		ret
    65                              <1> 		
    66                              <1> 	setup_memory:
    67                              <1> 	
    68 00000022 C70425[80000000]00- <1> 		mov DWORD [vV_input_buffer_content] , 0
    68 0000002A 000000              <1>
    69 0000002D C70425[83010000]00- <1> 		mov DWORD [vV_output_buffer_content] , 0
    69 00000035 000000              <1>
    70                              <1> 		
    71                              <1> 		;mov DWORD [endofline] , 0xa
    72                              <1> 		
    73 00000038 C70425[30010000]-   <1> 		mov DWORD[vV_sys_format_mode] , vV_ascii_int_to_dec
    73 0000003F [AC040000]          <1>
    74                              <1> 		
    75                              <1> 		
    76 00000043 B9FFFFFFFF          <1> 		mov ecx , 4294967295
    77 00000048 48290C25[00000000]  <1> 		sub QWORD[vV_local_offset] , rcx
    78                              <1> 		
    79                              <1> 		
    80 00000050 C3                  <1> 		ret
    81                              <1> 		
    82                              <1> 		
    83                              <1> 	
    84                              <1> 		
    85                              <1> _start:				;Entry point of Every Program
    86                              <1> 	
    87                              <1> 		
    88                              <1> 
    89 00000051 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
    90                              <1> 	
    91 00000054 48892C25[00000000]  <1> 	mov QWORD[vV_local_offset] , rbp
    92                              <1> 	
    93 0000005C 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
    93 0000005E [9A02040000000000]  <1>
    94                              <1> 	
    95 00000066 E89FFFFFFF          <1> 	call save_regs				;just in case
    96                              <1> 	
    97                              <1> 	
    98 0000006B E8B2FFFFFF          <1> 	call setup_memory			;all memory setup at start
    99                              <1> 	
   100                              <1> 	
   101                              <1> 	
   102 00000070 E8ED080000          <1> 	call vV_entry_point			;Start the program 
   103                              <1> 	
   104                              <1> 	
   105 00000075 E89CFFFFFF          <1> 	call restore_regs
   106                              <1> 	
   107                              <1> 
   108                              <1> ;------------------------------------------------------------------------------
   109                              <1> 
   110 0000007A B83C000000          <1> 	mov rax, SYS_EXIT
   111 0000007F BF00000000          <1> 	mov rdi, 0		;Normal exit procedure (no code returned from main)
   112 00000084 0F05                <1> 	syscall
   113                              <1> 	
   114                              <1> 	
   115                              <1> 	
   116                              <1> 	
   117                              <1> 	
     4                                  %include "vVc/assembly/w_runtime/vV_system00.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5 00000000 <res 00000040>      <1> 	vV_sys_start:	resd 16		;not used now
     6                              <1> 
     7                              <1> 	
     8                              <1> 	
     9                              <1> segment .data
    10                              <1> 
    11                              <1> 
    12                              <1> ;--Start of Memory----------------------------------------------------------
    13                              <1> 
    14                              <1> 	ALIGN 8
    15                              <1> 	
    16                              <1> ;--System adresses offsets----------------
    17                              <1> 
    18                              <1> 	vV_local_offset:
    19 00000000 0000000000000000    <1> 	dq 0
    20                              <1> 	
    21                              <1> 	
    22                              <1> ;---------------------Error Managment----------
    23                              <1> 
    24                              <1> 
    25                              <1> ;error vectors	
    26                              <1> 	
    27                              <1> 	vV_error_vectors:
    28 00000008 [0F01000000000000]- <1> 	times 17 dq vV_error_unhandeled
    28 00000008 <rept>              <1>
    29 00000090 [B200000000000000]  <1> 	dq vV_error_invalid_index
    30 00000098 [0F01000000000000]- <1> 	times 14 dq vV_error_unhandeled
    30 00000098 <rept>              <1>
    31                              <1> 
    32                              <1> 	
    33                              <1> 	
    34                              <1> segment .text
    35                              <1> 
    36                              <1> 
    37                              <1> vV_error:
    38                              <1> 
    39 00000086 52                  <1> 	push rdx
    40                              <1> 	
    41 00000087 4831D2              <1> 	xor rdx , rdx
    42                              <1> 	
    43 0000008A 88E2                <1> 	mov dl , ah
    44                              <1> 	
    45 0000008C C0E203              <1> 	shl dl , 3
    46                              <1> 	
    47 0000008F 67FF92[08000000]    <1> 	call [vV_error_vectors + edx]
    48                              <1> 	
    49                              <1> 	
    50 00000096 5A                  <1> 	pop rdx
    51                              <1> 	
    52 00000097 C3                  <1> 	ret
    53                              <1> 	
    54                              <1> 	
    55                              <1> vV_error_fatal:
    56                              <1> 
    57                              <1> 	
    58 00000098 88D0                <1> 	mov al , dl
    59                              <1> 	
    60 0000009A C0E803              <1> 	shr al , 3
    61                              <1> 
    62 0000009D E85EFFFFFF          <1> 	call vV_forced_exit
    63                              <1> 	
    64                              <1> vV_bound_error:
    65                              <1> 
    66 000000A2 89FB                <1> 	mov ebx , edi
    67 000000A4 B411                <1> 	mov ah , vV_ERR_MEMORY_OUT_OF_BOUND
    68 000000A6 E8DBFFFFFF          <1> 	call vV_error	
    69                              <1> 	
    70 000000AB B011                <1> 	mov al , vV_ERR_MEMORY_OUT_OF_BOUND
    71 000000AD E84EFFFFFF          <1> 	call vV_forced_exit
    72                              <1> 	
    73                              <1> 	
    74                              <1> 	
    75                              <1> 	
    76                              <1> 	
    77                              <1> 	
    78                              <1> 
    79                              <1> 	
     5                                  %include "vVc/assembly/w_runtime/vV_errors.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> segment .bss
     5                              <1> 
     6                              <1> 
     7                              <1> 	ALIGNB 4
     8                              <1> 		
     9                              <1> 	vV_error_buffer:
    10 00000040 <res 00000040>      <1> 	resb 64
    11                              <1> 	vV_end_err_buff:
    12                              <1> 	vV_error_buffer_size equ vV_end_err_buff-vV_error_buffer
    13                              <1> 
    14                              <1> 
    15                              <1> 
    16                              <1> 
    17                              <1> segment .data
    18                              <1> 
    19                              <1> ;Error String	
    20                              <1> 
    21                              <1> 	
    22                              <1> 	vV_error_msg:
    23 00000108 556E68616E64656C65- <1> 	.default: db "Unhandeled Error "
    23 00000111 64204572726F7220    <1>
    24                              <1> 	default_size equ $-.default
    25 00000119 496E76616C69642049- <1> 	.invalid_index: db "Invalid Index Error : "
    25 00000122 6E646578204572726F- <1>
    25 0000012B 72203A20            <1>
    26                              <1> 	inv_indx_size equ $-.invalid_index
    27                              <1> 
    28                              <1> 
    29                              <1> 
    30                              <1> segment .text
    31                              <1> 
    32                              <1> 
    33                              <1> vV_error_invalid_index:
    34                              <1> 
    35                              <1> 
    36 000000B2 56                  <1> 	push rsi
    37 000000B3 57                  <1> 	push rdi	;Save reg used by syscall
    38 000000B4 4151                <1> 	push r9	;and by conversion func
    39 000000B6 53                  <1> 	push rbx	;Save Arg
    40                              <1> 	
    41 000000B7 BA16000000          <1> 	mov edx , inv_indx_size				;string lenght
    42 000000BC 48BE-               <1> 	mov rsi , vV_error_msg.invalid_index			;strng ptr
    42 000000BE [1901000000000000]  <1>
    43 000000C6 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    44 000000CB B801000000          <1> 	mov rax , 1				; Write sysCall
    45 000000D0 0F05                <1> 	syscall	
    46                              <1> 	
    47                              <1> 	
    48 000000D2 58                  <1> 	pop rax
    49                              <1> 	
    50 000000D3 BF[40000000]        <1> 	mov edi , vV_error_buffer
    51 000000D8 41B940000000        <1> 	mov r9d , vV_error_buffer_size
    52 000000DE E8C9030000          <1> 	call vV_ascii_int_to_dec	
    53                              <1> 
    54 000000E3 67C680[40000000]0A  <1> 	mov BYTE[vV_error_buffer + eax] , 0xa
    55                              <1> 	
    56 000000EB FFC0                <1> 	inc eax
    57                              <1> 	
    58 000000ED 89C2                <1> 	mov edx , eax				;string lenght
    59 000000EF 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
    59 000000F1 [4000000000000000]  <1>
    60 000000F9 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    61 000000FE B801000000          <1> 	mov rax , 1				; Write sysCall
    62 00000103 0F05                <1> 	syscall
    63                              <1> 	
    64 00000105 4159                <1> 	pop r9
    65 00000107 5F                  <1> 	pop rdi
    66 00000108 5E                  <1> 	pop rsi
    67                              <1> 	
    68 00000109 E88AFFFFFF          <1> 	call vV_error_fatal
    69                              <1> 	
    70 0000010E C3                  <1> 	ret
    71                              <1> 	
    72                              <1> 	
    73                              <1> 	
    74                              <1> 
    75                              <1> 	
    76                              <1> vV_error_unhandeled:
    77                              <1> 
    78                              <1> 
    79 0000010F 56                  <1> 	push rsi
    80 00000110 57                  <1> 	push rdi	;Save reg used by syscall
    81 00000111 4151                <1> 	push r9	;and by conversion func
    82                              <1> 	
    83                              <1> 	
    84                              <1> ;push rax	;Save flags ( and value)
    85                              <1> 
    86 00000113 53                  <1> 	push rbx	;Save Arg
    87 00000114 52                  <1> push rdx		;Save error code
    88                              <1> 	
    89                              <1> 	
    90 00000115 BA11000000          <1> 	mov edx , default_size				;string lenght
    91 0000011A 48BE-               <1> 	mov rsi , vV_error_msg.default			;strng ptr
    91 0000011C [0801000000000000]  <1>
    92 00000124 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    93 00000129 B801000000          <1> 	mov rax , 1				; Write sysCall
    94 0000012E 0F05                <1> 	syscall	
    95                              <1> 	
    96                              <1> 	
    97 00000130 58                  <1> pop rax	;error code
    98                              <1> 
    99                              <1> 
   100 00000131 C0E803              <1> 	shr al , 3
   101                              <1> 	
   102                              <1> 	
   103 00000134 BF[40000000]        <1> 	mov edi , vV_error_buffer
   104 00000139 41B940000000        <1> 	mov r9d , vV_error_buffer_size
   105                              <1> 	
   106                              <1> 
   107 0000013F E868030000          <1> 	call vV_ascii_int_to_dec	
   108                              <1> 	
   109                              <1> 		
   110                              <1> 	
   111 00000144 67C680[40000000]20  <1> 	mov BYTE[vV_error_buffer + eax] , ' '
   112                              <1> 	
   113                              <1> 	
   114                              <1> 	
   115                              <1> 	
   116 0000014C 67488DB8[41000000]  <1> 	lea rdi , [vV_error_buffer + eax + 1]
   117 00000154 4129F9              <1> 	sub r9d , edi
   118                              <1> 	
   119 00000157 58                  <1> 	pop rax
   120                              <1> 	
   121 00000158 E84F030000          <1> 	call vV_ascii_int_to_dec
   122                              <1> 	
   123 0000015D 674C8D0C07          <1> 	lea r9 , [edi + eax]
   124                              <1> 	
   125 00000162 41C6010A            <1> 	mov BYTE[r9] , 0xa
   126                              <1> 	
   127 00000166 49FFC1              <1> 	inc r9
   128                              <1> 	
   129 00000169 4981E9[40000000]    <1> 	sub r9 , vV_error_buffer
   130                              <1> 	
   131 00000170 4489CA              <1> 	mov edx , r9d				;string lenght
   132 00000173 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
   132 00000175 [4000000000000000]  <1>
   133 0000017D BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
   134 00000182 B801000000          <1> 	mov rax , 1				; Write sysCall
   135 00000187 0F05                <1> 	syscall
   136                              <1> 	
   137 00000189 4159                <1> 	pop r9
   138 0000018B 5F                  <1> 	pop rdi
   139 0000018C 5E                  <1> 	pop rsi
   140                              <1> 	
   141                              <1> 	
   142                              <1> 	
   143                              <1> 	
   144 0000018D C3                  <1> 	ret
   145                              <1> 	
   146                              <1> 	
   147                              <1> 	
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151                              <1> 		
   152                              <1> 		
   153                              <1> 		
   154                              <1> 		
   155                              <1> 		
   156                              <1> 		
   157                              <1> 		
   158                              <1> 		
   159                              <1> 		
   160                              <1> 		
   161                              <1> 		
   162                              <1> 		
   163                              <1> 		
   164                              <1> 		
   165                              <1> 		
   166                              <1> 		
   167                              <1> 
     6                                  %include "vVc/assembly/w_runtime/vV_system10.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5                              <1> 	
     6                              <1> 	
     7                              <1> 	;------------Input Buffer
     8                              <1> 
     9                              <1> 
    10                              <1> 	
    11 00000080 <res 00000004>      <1> 	vV_input_buffer_content: resb 4			;Input Buffer current content
    12 00000084 <res 000000FF>      <1> 	vV_input_buffer: resb vV_input_buffer_size		;Input Buffer of 256 char
    13                              <1> 	
    14                              <1> 	
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;------------Output Buffer
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22 00000183 <res 00000004>      <1> 	vV_output_buffer_content: resb 4			;Output Buffer current content
    23 00000187 <res 000000FF>      <1> 	vV_output_buffer: resb vV_output_buffer_size		;Output Buffer of 256 char
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> 	
    28                              <1> ;------------Number Buffer
    29                              <1> 
    30                              <1> 
    31                              <1> 	
    32                              <1> 	
    33                              <1> 	;w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34                              <1> 	;endofline: resb 1					;Maybe Not Needed
    35                              <1> 	
    36                              <1> 
    37                              <1> 
    38                              <1> segment .data
    39 0000012F 90                  <1> 	ALIGN 4
    40 00000130 [AC040000]          <1> 	vV_sys_format_mode: dd vV_ascii_int_to_dec
     7                                  %include "vVc/assembly/w_runtime/vV_io.asm"			
     1                              <1> 
     2                              <1> 
     3                              <1> ;%include "vVc/assembly/w_runtime/vV_ascii.asm"
     4                              <1> 
     5                              <1> 
     6                              <1> ;Group all read/wrie syscalls
     7                              <1> 
     8                              <1> ;global convert_to_string
     9                              <1> ;global convert_to_int
    10                              <1> 
    11                              <1> ;extern vV_input_buffer
    12                              <1> ;extern vV_output_buffer
    13                              <1> ;extern w_number_buffer
    14                              <1> 
    15                              <1> global wio_out
    16                              <1> global wio_get
    17                              <1> global wio_get_str_raw
    18                              <1> global wio_get_str_null
    19                              <1> global wio_get_str_nline
    20                              <1> global wio_move_in_to_out
    21                              <1> 
    22                              <1> 
    23                              <1> segment .text 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> vV_io_flush_no_nline:							;Temporary
    28                              <1> 	
    29                              <1> 	
    30                              <1> 	
    31 0000018E 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    32                              <1> 	
    33 00000195 C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    33 0000019D 000000              <1>
    34                              <1> 	
    35 000001A0 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    35 000001A2 [8701000000000000]  <1>
    36                              <1> 		
    37 000001AA BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    38 000001AF B801000000          <1> 	mov rax , 1					; Write sysCall
    39 000001B4 0F05                <1> 	syscall
    40                              <1> 	
    41                              <1> 	
    42                              <1> 	
    43 000001B6 C3                  <1> 	ret
    44                              <1> 
    45                              <1> vV_io_flush:
    46                              <1> 	
    47                              <1> 	
    48                              <1> 	
    49 000001B7 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    50                              <1> 	
    51 000001BE C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    51 000001C6 000000              <1>
    52                              <1> 	
    53 000001C9 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    53 000001CB [8701000000000000]  <1>
    54                              <1> 		
    55 000001D3 67C682[87010000]0A  <1> 	mov BYTE[vV_output_buffer + edx] , 0xa
    56 000001DB FFC2                <1> 	inc edx
    57                              <1> 		
    58 000001DD BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    59 000001E2 B801000000          <1> 	mov rax , 1					; Write sysCall
    60 000001E7 0F05                <1> 	syscall
    61                              <1> 	
    62                              <1> 	
    63                              <1> 	
    64 000001E9 C3                  <1> 	ret
    65                              <1> 	
    66                              <1> 		
    67                              <1> ;-------------------------------------------------------------------------------
    68                              <1> ;-------------------------------------------------------------------------------
    69                              <1> 	
    70                              <1> vV_io_out_buffer_default:
    71                              <1> 
    72 000001EA 448B1425[30010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    73 000001F2 E80F000000          <1> 	call vV_io_out_buffer
    74 000001F7 C3                  <1> 	ret
    75                              <1> 	
    76                              <1> vV_io_out_default:
    77                              <1> 
    78 000001F8 448B1425[30010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    79 00000200 E80C000000          <1> 	call vV_io_out
    80 00000205 C3                  <1> 	ret
    81                              <1> 
    82                              <1> ;-------------------------------------------------------------------------------
    83                              <1> ;-------------------------------------------------------------------------------
    84                              <1> 	
    85                              <1> vV_io_out_buffer:				;print str repr of Top Of Stack element
    86                              <1> 						
    87                              <1> 						
    88 00000206 E811000000          <1> 	call vV_io_out01			
    89 0000020B E84A000000          <1> 	call vV_io_out_buffer_end
    90 00000210 C3                  <1> 	ret
    91                              <1> 
    92                              <1> ;-------------------------------------------------------------------------------
    93                              <1> 		
    94                              <1> vV_io_out:					;print str repr of Top Of Stack element
    95                              <1> 
    96                              <1> 
    97 00000211 E806000000          <1> 	call vV_io_out01					
    98 00000216 E826000000          <1> 	call vV_io_out_direct_end
    99 0000021B C3                  <1> 	ret
   100                              <1> 
   101                              <1> ;-------------------------------------------------------------------------------	
   102                              <1> ;-------------------------------------------------------------------------------	
   103                              <1> 
   104                              <1> vV_io_out01:					;print str repr of Top Of Stack element
   105                              <1> 
   106                              <1> 
   107                              <1> 	vV_pop eax				;get value in eax
   107                              <2> 
   107 0000021C 4983EF04            <2>  sub vV_sp , 4
   107 00000220 418B07              <2>  mov %1 , [vV_sp]
   107                              <2> 
   108                              <1> 	
   109 00000223 BF[87010000]        <1> 	mov edi , vV_output_buffer		;set dest as O_buff
   110 00000228 033C25[83010000]    <1> 	add edi ,DWORD[vV_output_buffer_content]		;set offset to start of freespace
   111                              <1> 	
   112 0000022F 57                  <1> push rdi					;Save buffer origin
   113                              <1> 	
   114 00000230 41B9FF000000        <1> 	mov r9 , 255				;set Max buffer available	
   115 00000236 4129F9              <1> 	sub r9d , edi				;#TODO: Stop HardCoding VALUES!!!!
   116 00000239 41FFD2              <1> 		call r10			;call current conversion format function
   117 0000023C 4831FF              <1> 	xor rdi , rdi
   118                              <1> 	
   119 0000023F 5F                  <1> pop rdi						;recover Buffer origin
   120                              <1> 	
   121 00000240 C3                  <1> 	ret
   122                              <1> 
   123                              <1> ;-------------------------------------------------------------------------------	
   124                              <1> 	
   125                              <1> vV_io_out_direct_end:
   126                              <1> 
   127                              <1> 
   128                              <1> 
   129 00000241 67C604070A          <1> 	mov BYTE[edi + eax] , 0xa		;add new_line
   130                              <1> 		
   131 00000246 FFC0                <1> 		inc eax
   132                              <1> 		
   133 00000248 89C2                <1> 		mov edx , eax				;string lenght		
   134 0000024A 4889FE              <1> 		mov rsi , rdi				;strng ptr
   135 0000024D BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   136 00000252 B801000000          <1> 		mov rax , 1				; Write sysCall
   137 00000257 0F05                <1> 		syscall
   138                              <1> 	
   139 00000259 C3                  <1> 		ret
   140                              <1> 
   141                              <1> ;-------------------------------------------------------------------------------		
   142                              <1> 		
   143                              <1> vV_io_out_buffer_end:
   144                              <1> 
   145 0000025A 010425[83010000]    <1> 	add [vV_output_buffer_content] , eax
   146                              <1> 
   147 00000261 C3                  <1> 	ret
   148                              <1> 
   149                              <1> ;-------------------------------------------------------------------------------
   150                              <1> 
   151                              <1> vV_io_out_char:
   152                              <1> 
   153                              <1> 	
   154 00000262 E827000000          <1> 	call vV_io_read_char
   155 00000267 E8D5FFFFFF          <1> 	call vV_io_out_direct_end
   156                              <1> 	
   157 0000026C C3                  <1> 	ret
   158                              <1> 	
   159                              <1> vV_io_out_packed_char:
   160                              <1> 
   161                              <1> 	
   162 0000026D E842000000          <1> 	call vV_io_read_packed_char
   163                              <1> 	
   164 00000272 E8CAFFFFFF          <1> 	call vV_io_out_direct_end
   165                              <1> 	
   166 00000277 C3                  <1> 	ret
   167                              <1> 	
   168                              <1> vV_io_out_char_buffer:
   169                              <1> 
   170 00000278 E811000000          <1> 	call vV_io_read_char
   171                              <1> 	
   172 0000027D E8D8FFFFFF          <1> 	call vV_io_out_buffer_end
   173                              <1> 	
   174 00000282 C3                  <1> 	ret
   175                              <1> 	
   176                              <1> vV_io_out_packed_char_buffer:
   177                              <1> 
   178 00000283 E82C000000          <1> 	call vV_io_read_packed_char
   179                              <1> 	
   180 00000288 E8CDFFFFFF          <1> 	call vV_io_out_buffer_end
   181                              <1> 	
   182 0000028D C3                  <1> 	ret
   183                              <1> 	
   184                              <1> vV_io_read_char:
   185                              <1> 
   186                              <1> 	vV_pop eax
   186                              <2> 
   186 0000028E 4983EF04            <2>  sub vV_sp , 4
   186 00000292 418B07              <2>  mov %1 , [vV_sp]
   186                              <2> 
   187                              <1> 	
   188 00000295 48BF-               <1> 	mov rdi , vV_output_buffer
   188 00000297 [8701000000000000]  <1>
   189 0000029F 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   190                              <1> 	
   191 000002A6 678807              <1> 	mov [edi] , al
   192                              <1> 	
   193 000002A9 BF[87010000]        <1> 	mov edi , vV_output_buffer
   194 000002AE B801000000          <1> 	mov eax , 1
   195                              <1> 	
   196 000002B3 C3                  <1> 	ret	
   197                              <1> 	
   198                              <1> vV_io_read_packed_char:
   199                              <1> 
   200                              <1> 	vV_pop eax
   200                              <2> 
   200 000002B4 4983EF04            <2>  sub vV_sp , 4
   200 000002B8 418B07              <2>  mov %1 , [vV_sp]
   200                              <2> 
   201                              <1> 	
   202 000002BB 48BF-               <1> 	mov rdi , vV_output_buffer
   202 000002BD [8701000000000000]  <1>
   203 000002C5 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   204                              <1> 	
   205 000002CC 678907              <1> 	mov [edi] , eax
   206                              <1> 	
   207 000002CF BF[87010000]        <1> 	mov edi , vV_output_buffer
   208 000002D4 B804000000          <1> 	mov eax , 4	
   209                              <1> 	
   210 000002D9 C3                  <1> 	ret
   211                              <1> 		
   212                              <1> ;-------------------------------------------------------------------------------
   213                              <1> ;-------------------------------------------------------------------------------
   214                              <1> ;-------------------------------------------------------------------------------
   215                              <1> ;-------------------------------------------------------------------------------
   216                              <1> ;-------------------------------------------------------------------------------
   217                              <1> ;-------------------------------------------------------------------------------
   218                              <1> ;-------------------------------------------------------------------------------
   219                              <1> 	
   220                              <1> vV_io_read:
   221                              <1> 
   222                              <1> 								
   223 000002DA 48BE-               <1> 		mov rsi , vV_input_buffer		;ptr to string destination	
   223 000002DC [8400000000000000]  <1>
   224 000002E4 BAFF000000          <1> 		mov edx , vV_input_buffer_size				;string lenght	
   225 000002E9 BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   226 000002EE B800000000          <1> 		mov rax , 0				; read sysCall
   227                              <1> 		
   228 000002F3 0F05                <1> 		syscall
   229                              <1> 	
   230                              <1> ;-------------Buffer_Overflow_Execption  
   231                              <1> 
   232                              <1> 
   233                              <1> 
   234 000002F5 3DFF000000          <1> 		cmp eax , 255				;Check if Buffer Is Full
   235                              <1> 		
   236 000002FA 721F                <1> 			jb .no_overflow
   237                              <1> 			
   238 000002FC 803C25[82010000]0A  <1> 		cmp BYTE[vV_input_buffer + vV_input_buffer_size-1] , 0xa	;Check if Buffer end with "\n"
   239                              <1> 		
   240 00000304 7415                <1> 			je .no_overflow
   241                              <1> 		
   242                              <1> 		
   243 00000306 50                  <1> 			push rax
   244 00000307 53                  <1> 			push rbx
   245                              <1> 		
   246 00000308 B401                <1> 			mov ah , vV_ERR_IO_I_OVERFLOW
   247 0000030A 6683C800            <1> 			or ax , 0
   248 0000030E 4831DB              <1> 			xor rbx , rbx
   249 00000311 4889F3              <1> 			mov rbx , rsi
   250                              <1> 		
   251 00000314 E86DFDFFFF          <1> 			call vV_error
   252                              <1> 		
   253 00000319 5B                  <1> 			pop rbx
   254 0000031A 58                  <1> 			pop rax
   255                              <1> 		
   256                              <1> 			;ret
   257                              <1> 		
   258                              <1> 		.no_overflow:
   259                              <1> 		
   260 0000031B C3                  <1> 			ret
   261                              <1> 		
   262                              <1> 		
   263                              <1> 	
   264                              <1> 	
   265                              <1> vV_io_get_default:
   266                              <1> 
   267 0000031C 41BA[BC030000]      <1> 	mov r10d , vV_ascii_as_dec			;TODO: default settings
   268 00000322 E801000000          <1> 	call vV_io_get
   269 00000327 C3                  <1> 	ret
   270                              <1> 	
   271                              <1> 	
   272                              <1> vV_io_get:						;convert inputed value to 
   273                              <1> 							;32bit int, push it on
   274                              <1> 							;the stack
   275 00000328 E8ADFFFFFF          <1> 	call vV_io_read
   276                              <1> 		
   277                              <1> ;----------------------------------------------	
   278                              <1> 
   279 0000032D 53                  <1> 	push rbx				;Save rbx (conversion uses it) 
   280                              <1> 
   281 0000032E 89C3                <1> 		mov ebx , eax 			;send char count by ebx
   282 00000330 31FF                <1> 		xor edi , edi 			;zero out counter
   283 00000332 BE[84000000]        <1> 		mov esi , vV_input_buffer	;Set source to I_buffer
   284                              <1> 		
   285                              <1> 
   286 00000337 41FFD2              <1> 		call r10
   287                              <1> 		
   288 0000033A 5B                  <1> 	pop rbx
   289                              <1> 	
   290                              <1> 		vV_push eax
   290                              <2> 
   290 0000033B 418907              <2>  mov DWORD[vV_sp] , %1
   290 0000033E 4983C704            <2>  add vV_sp , 4
   290                              <2> 
   291                              <1> 		
   292 00000342 C3                  <1> 		ret
   293                              <1> 
   294                              <1> 
   295                              <1> ;-------------------------------------------------------------------------------
   296                              <1> ;-------------------------------------------------------------------------------
   297                              <1> 
   298                              <1> 
   299                              <1> vV_io_get_char:
   300                              <1> 
   301                              <1> 
   302 00000343 E892FFFFFF          <1> 	call vV_io_read
   303                              <1> 	
   304 00000348 31D2                <1> 	xor edx , edx
   305                              <1> 	
   306 0000034A 8A1425[84000000]    <1> 	mov dl , [vV_input_buffer]
   307                              <1> 	
   308                              <1> 	vV_push edx
   308                              <2> 
   308 00000351 418917              <2>  mov DWORD[vV_sp] , %1
   308 00000354 4983C704            <2>  add vV_sp , 4
   308                              <2> 
   309                              <1> 	
   310 00000358 C3                  <1> 	ret
   311                              <1> 	
   312                              <1> vV_io_get_packed_char:
   313                              <1> 
   314 00000359 C70425[84000000]00- <1> 	mov DWORD [vV_input_buffer] , 0
   314 00000361 000000              <1>
   315                              <1> 
   316 00000364 E871FFFFFF          <1> 	call vV_io_read
   317                              <1> 	
   318 00000369 31D2                <1> 	xor edx , edx
   319                              <1> 	
   320 0000036B 8B1425[84000000]    <1> 	mov edx, [vV_input_buffer]
   321                              <1> 	
   322                              <1> 	vV_push edx
   322                              <2> 
   322 00000372 418917              <2>  mov DWORD[vV_sp] , %1
   322 00000375 4983C704            <2>  add vV_sp , 4
   322                              <2> 
   323                              <1> 	
   324 00000379 C3                  <1> 	ret
   325                              <1> 	
   326                              <1> 		
   327                              <1> 		
   328                              <1> 
   329                              <1> 
   330                              <1> 
     8                                  %include "vVc/assembly/w_runtime/vV_ascii.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> segment .text 
     4                              <1> 
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> vV_ascii_as_hex2:						;Jumped to from parse_num OR called
     9                              <1> 								;use edi as counter/offset in string !Set if direct call
    10                              <1> 								;use esi as source string
    11                              <1> 								;concatenate result in eax
    12                              <1> 								;parse digit in cl
    13                              <1> 								
    14                              <1> 								;use r8 for base
    15                              <1> 								;use r9 for max_value
    16                              <1> 								
    17                              <1> 							
    18                              <1> 	;mov r8 , 16	
    19                              <1> 	
    20                              <1> 	.start_loop:
    21                              <1> 	
    22 0000037A 678A0C3E            <1> 		mov cl , [esi + edi]
    23                              <1> 	
    24                              <1> 		
    25 0000037E 80F930              <1> 		cmp cl , 48
    26                              <1> 		
    27 00000381 7265                <1> 			jb vV_ascii_unvalid
    28                              <1> 			
    29 00000383 80F93A              <1> 		cmp cl , 58
    30                              <1> 		
    31 00000386 720D                <1> 			jb .pass_int
    32                              <1> 			
    33 00000388 80F966              <1> 			cmp cl , 'f'
    34                              <1> 			
    35 0000038B 775B                <1> 				ja vV_ascii_unvalid
    36                              <1> 			
    37 0000038D 80F961              <1> 			cmp cl , 'a'
    38                              <1> 			
    39 00000390 7256                <1> 				jb vV_ascii_unvalid
    40                              <1> 				
    41 00000392 80E927              <1> 			sub cl , 39
    42                              <1> 				
    43                              <1> 			
    44                              <1> 		.pass_int:	
    45                              <1> 			
    46 00000395 80E930              <1> 		sub cl , '0'
    47                              <1> 		
    48                              <1> 		
    49                              <1> 		
    50 00000398 31D2                <1> 		xor edx , edx
    51                              <1> 		
    52 0000039A F8                  <1> 		clc
    53                              <1> 		
    54 0000039B 41F7E0              <1> 		mul r8d
    55                              <1> 		
    56 0000039E 725D                <1> 		jc vV_ascii_overflow
    57                              <1> 		
    58 000003A0 01C8                <1> 		add eax , ecx
    59                              <1> 		
    60                              <1> 		.pass02:
    61                              <1> 		
    62 000003A2 FFC7                <1> 		inc edi
    63                              <1> 		
    64 000003A4 39DF                <1> 		cmp edi , ebx
    65                              <1> 		
    66 000003A6 72D2                <1> 		jb .start_loop
    67                              <1> 
    68                              <1> 		
    69 000003A8 C3                  <1> 		ret	
    70                              <1> 		
    71                              <1> 		
    72                              <1> ;
    73                              <1> ;				ebx		esi
    74                              <1> ;	ascii_to_format( buffer_size , buffer_adress ) 
    75                              <1> ;		
    76                              <1> ;
    77                              <1> ;	set:	rcx,rdx (rax) to 0
    78                              <1> ;		r8,r9
    79                              <1> ;		
    80                              <1> ;	call: specialized dexodefunction
    81                              <1> 		
    82                              <1> vV_ascii_as_hex:
    83                              <1> 	
    84 000003A9 FFCB                <1> 	dec ebx
    85 000003AB 41B810000000        <1> 	mov r8 , 16	
    86 000003B1 4831C0              <1> 	xor rax , rax 		;(just in case not switching from dec mode)			
    87 000003B4 4831C9              <1> 	xor rcx , rcx
    88 000003B7 4831D2              <1> 	xor rdx , rdx
    89 000003BA EBBE                <1> 	jmp vV_ascii_as_hex2
    90                              <1> 
    91                              <1> vV_ascii_as_dec:
    92                              <1> 
    93 000003BC FFCB                <1> 	dec ebx
    94 000003BE 41B80A000000        <1> 	mov r8 , 10			
    95 000003C4 41B93A000000        <1> 	mov r9 , 58
    96 000003CA 4831C9              <1> 	xor rcx , rcx
    97 000003CD 4831D2              <1> 	xor rdx , rdx
    98 000003D0 EB5E                <1> 	jmp vV_ascii_as_decbin
    99                              <1> 
   100                              <1> vV_ascii_as_bin:
   101                              <1> 
   102 000003D2 FFCB                <1> 	dec ebx
   103 000003D4 41B802000000        <1> 	mov r8 , 2			
   104 000003DA 41B932000000        <1> 	mov r9 , 50
   105 000003E0 4831C9              <1> 	xor rcx , rcx
   106 000003E3 4831D2              <1> 	xor rdx , rdx
   107                              <1> 	
   108 000003E6 EB48                <1> 	jmp vV_ascii_as_decbin
   109                              <1> 	
   110                              <1> vV_ascii_unvalid:
   111                              <1> 	
   112                              <1> 		;mov rax , 24;	#TODO: Defined Errors code/ data in file
   113                              <1> 		;xor rdx , rdx
   114                              <1> 		;mov dl , cl
   115                              <1> 		
   116                              <1> 		;call w_forced_exit
   117                              <1> 		
   118 000003E8 50                  <1> 		push rax
   119 000003E9 53                  <1> 		push rbx
   120                              <1> 		
   121 000003EA B403                <1> 		mov ah , vV_ERR_IO_I_UNVALID
   122 000003EC 6683C800            <1> 		or ax , 0
   123 000003F0 4831DB              <1> 		xor rbx , rbx
   124 000003F3 88CB                <1> 		mov bl , cl
   125                              <1> 		
   126 000003F5 E88CFCFFFF          <1> 		call vV_error
   127                              <1> 		
   128 000003FA 5B                  <1> 		pop rbx
   129 000003FB 58                  <1> 		pop rax
   130                              <1> 		
   131 000003FC C3                  <1> 		ret
   132                              <1> 		
   133                              <1> 		
   134                              <1> 		
   135                              <1> 		
   136                              <1> vV_ascii_overflow:
   137                              <1> 	
   138 000003FD 50                  <1> 		push rax
   139 000003FE 53                  <1> 		push rbx
   140                              <1> 		
   141 000003FF 4831DB              <1> 		xor rbx , rbx
   142 00000402 4889C3              <1> 		mov rbx , rax
   143                              <1> 		
   144                              <1> 		;or rbx , 0x00010000
   145                              <1> 		
   146 00000405 B401                <1> 		mov ah , vV_ERR_IO_I_OVERFLOW
   147 00000407 6683C800            <1> 		or ax , 0
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151 0000040B E876FCFFFF          <1> 		call vV_error
   152                              <1> 		
   153 00000410 5B                  <1> 		pop rbx
   154 00000411 58                  <1> 		pop rax
   155                              <1> 		
   156                              <1> 		;TODO: Maybe use vV_error return value for decision making
   157                              <1> 		
   158 00000412 B8FFFFFFFF          <1> 		mov eax , -1
   159                              <1> 		
   160 00000417 C3                  <1> 		ret
   161                              <1> 		
   162                              <1> 		
   163                              <1> vV_ascii_change_to_hex:
   164                              <1> 		
   165 00000418 83F800              <1> 		cmp eax , 0
   166                              <1> 			
   167 0000041B 75CB                <1> 			jne vV_ascii_unvalid
   168                              <1> 			
   169 0000041D 41B810000000        <1> 		mov r8 , 16
   170 00000423 4831C9              <1> 		xor rcx , rcx
   171 00000426 4831C0              <1> 		xor rax ,rax
   172                              <1> 				
   173 00000429 FFC7                <1> 		inc edi
   174 0000042B E94AFFFFFF          <1> 		jmp vV_ascii_as_hex2		
   175                              <1> 		
   176                              <1> 	
   177                              <1> 
   178                              <1> 
   179                              <1> vV_ascii_as_decbin:						;ebx: number of char to read
   180                              <1> 
   181                              <1> 	
   182                              <1> 
   183                              <1> 								;use edi as counter/offset in string
   184                              <1> 								;concatenate result in eax
   185                              <1> 								;parse digit in cl
   186                              <1> 								
   187                              <1> 								;use r8 for base
   188                              <1> 								;use r9 for max_value					
   189                              <1> 								;itou
   190                              <1> 	;xor edi, edi			;should be set by caller
   191 00000430 4831C0              <1> 	xor rax , rax
   192                              <1> 	
   193 00000433 4831C9              <1> 	xor rcx , rcx
   194                              <1> 	
   195 00000436 4831D2              <1> 	xor rdx , rdx
   196                              <1> 	
   197                              <1> 	
   198                              <1> 	.start_loop:
   199                              <1> 	
   200 00000439 678A0C3E            <1> 		mov cl , [esi + edi]
   201                              <1> 		
   202                              <1> 		
   203 0000043D 80F962              <1> 		cmp cl , 'b'										
   204 00000440 7513                <1> 			jne .pass01
   205                              <1> 		
   206                              <1> 		.format_change:
   207                              <1> 			
   208 00000442 83F800              <1> 			cmp eax , 0
   209                              <1> 			
   210 00000445 75A1                <1> 				jne vV_ascii_unvalid
   211                              <1> 				
   212 00000447 41B802000000        <1> 			mov r8 , 2
   213                              <1> 			
   214 0000044D 41B932000000        <1> 			mov r9 , 50
   215                              <1> 	
   216 00000453 EB26                <1> 			jmp .pass02
   217                              <1> 		
   218                              <1> 		
   219                              <1> 	
   220                              <1> 		.pass01:
   221                              <1> 		
   222 00000455 80F968              <1> 		cmp cl , 'h'											
   223 00000458 74BE                <1> 			je vV_ascii_change_to_hex
   224 0000045A 80F978              <1> 		cmp cl , 'x'											
   225 0000045D 74B9                <1> 			je vV_ascii_change_to_hex
   226                              <1> 			
   227                              <1> 			
   228 0000045F 4438C9              <1> 		cmp cl , r9b
   229                              <1> 		
   230 00000462 7384                <1> 			jae vV_ascii_unvalid
   231                              <1> 		
   232 00000464 80F930              <1> 		cmp cl , 48
   233                              <1> 		
   234 00000467 0F827BFFFFFF        <1> 			jb vV_ascii_unvalid
   235                              <1> 			
   236                              <1> 		
   237                              <1> 			
   238 0000046D 80E930              <1> 		sub cl , 48
   239                              <1> 		
   240 00000470 4831D2              <1> 		xor rdx , rdx
   241 00000473 F8                  <1> 		clc
   242                              <1> 		
   243 00000474 41F7E0              <1> 		mul r8d
   244                              <1> 		
   245 00000477 7284                <1> 		jc vV_ascii_overflow
   246                              <1> 		
   247 00000479 01C8                <1> 		add eax , ecx
   248                              <1> 		
   249                              <1> 		.pass02:
   250                              <1> 		
   251 0000047B FFC7                <1> 		inc edi
   252                              <1> 		
   253 0000047D 39DF                <1> 		cmp edi , ebx
   254                              <1> 		
   255 0000047F 72B8                <1> 		jb .start_loop
   256                              <1> 		
   257                              <1> 		
   258 00000481 C3                  <1> 		ret			; result should be in eax
   259                              <1> 		
   260                              <1> 
   261                              <1> 	
   262                              <1> ;------------------------------------------------------------------------------------------
   263                              <1> ;------------------------------------------------------------------------------------------
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> vV_ascii_int_to_hex:					;value in eax
   268                              <1> 						;dest in rdi
   269                              <1> 
   270                              <1> 
   271                              <1> 
   272 00000482 31C9                <1> 	xor ecx , ecx	
   273                              <1> 	
   274 00000484 BE10000000          <1> 	mov esi , 16
   275                              <1> 
   276                              <1> 	
   277                              <1> 	.loop01:
   278                              <1> 	
   279 00000489 4831D2              <1> 		xor rdx , rdx
   280                              <1> 		
   281 0000048C F7F6                <1> 		div esi
   282                              <1> 		
   283                              <1> 		
   284 0000048E 80FA0A              <1> 		cmp dl , 10
   285                              <1> 		
   286 00000491 7203                <1> 		jb .dec
   287                              <1> 		
   288 00000493 80C207              <1> 			add dl , 7
   289                              <1> 		
   290                              <1> 		.dec:
   291                              <1> 		
   292 00000496 80C230              <1> 			add dl , '0'
   293                              <1> 		
   294                              <1> 		
   295 00000499 52                  <1> 		push rdx
   296                              <1> 		
   297 0000049A FFC1                <1> 		inc ecx
   298                              <1> 		
   299 0000049C 39F0                <1> 		cmp eax , esi
   300                              <1> 		
   301 0000049E 73E9                <1> 		jae .loop01
   302                              <1> 	
   303                              <1> 	
   304 000004A0 3C0A                <1> 	cmp al , 10
   305                              <1> 		
   306 000004A2 7202                <1> 		jb .dec2
   307                              <1> 		
   308 000004A4 0407                <1> 			add al , 7
   309                              <1> 		
   310                              <1> 		.dec2:
   311                              <1> 		
   312 000004A6 0430                <1> 			add al , '0'	
   313 000004A8 8807                <1> 	mov [rdi] , al
   314                              <1> 	
   315 000004AA EB1B                <1> 	jmp vV_ascii_pop_digits
   316                              <1> 		
   317                              <1> 	
   318                              <1> 	
   319                              <1> 	
   320                              <1> vV_ascii_int_to_dec:					;value in eax
   321                              <1> 						;dest in rdi
   322                              <1> 						;max_dest_size in r9d
   323                              <1> 
   324                              <1> 
   325                              <1> 
   326 000004AC 31C9                <1> 	xor ecx , ecx	
   327                              <1> 	
   328 000004AE BE0A000000          <1> 	mov esi , 10
   329                              <1> 	
   330                              <1> 
   331                              <1> 
   332                              <1> 	
   333                              <1> 	.loop01:
   334                              <1> 	
   335 000004B3 4831D2              <1> 		xor rdx , rdx
   336                              <1> 		
   337 000004B6 F7F6                <1> 		div esi
   338                              <1> 		
   339                              <1> 		
   340 000004B8 80C230              <1> 		add dl , '0'
   341 000004BB 52                  <1> 		push rdx
   342                              <1> 		
   343 000004BC FFC1                <1> 		inc ecx
   344                              <1> 		
   345 000004BE 83F80A              <1> 		cmp eax , 10
   346                              <1> 		
   347 000004C1 73F0                <1> 		jae .loop01
   348                              <1> 	
   349 000004C3 0430                <1> 	add al , '0'	
   350 000004C5 8807                <1> 	mov [rdi] , al
   351                              <1> 		
   352                              <1> 	
   353                              <1> 		
   354                              <1> vV_ascii_pop_digits:			; Need nb of digits currently on stack(ecx)
   355                              <1> 						;dest in rdi
   356 000004C7 41B801000000        <1> 		mov r8d , 1
   357 000004CD FFC1                <1> 		inc ecx
   358                              <1> 		
   359 000004CF 4439C9              <1> 		cmp ecx , r9d
   360                              <1> 		
   361 000004D2 7219                <1> 		jb .loopstart
   362                              <1> 		
   363                              <1> 	
   364 000004D4 50                  <1> 			push rax
   365 000004D5 53                  <1> 			push rbx
   366                              <1> 		
   367 000004D6 B410                <1> 			mov ah , vV_ERR_MEMORY_BUFFER_LIMIT
   368 000004D8 6683C800            <1> 			or ax , 0
   369 000004DC 4831DB              <1> 			xor rbx , rbx
   370 000004DF 89FB                <1> 			mov ebx , edi
   371                              <1> 		
   372 000004E1 E8A0FBFFFF          <1> 			call vV_error
   373                              <1> 		
   374 000004E6 5B                  <1> 			pop rbx
   375 000004E7 58                  <1> 			pop rax
   376                              <1> 			
   377 000004E8 4489C9              <1> 			mov ecx , r9d		;Should protect memory..
   378 000004EB FFC9                <1> 			dec ecx		;will need testing
   379                              <1> 		
   380                              <1> 						
   381                              <1> 		.loopstart:
   382                              <1> 		
   383 000004ED 5A                  <1> 			pop rdx
   384 000004EE 6742881407          <1> 			mov BYTE[edi + r8d] , dl
   385 000004F3 41FFC0              <1> 			inc r8d
   386                              <1> 			
   387 000004F6 4139C8              <1> 			cmp r8d , ecx
   388                              <1> 		
   389 000004F9 72F2                <1> 		jb .loopstart
   390                              <1> 	
   391                              <1> 	
   392 000004FB 89C8                <1> 		mov eax , ecx
   393                              <1> 		
   394 000004FD C3                  <1> 		ret	
   395                              <1> 	
   396                              <1> 	
   397                              <1> vV_ascii_int_to_bin:					;value in eax, 
   398                              <1> 							
   399                              <1> 
   400                              <1> 
   401 000004FE 31C9                <1> 	xor ecx , ecx
   402                              <1> 	
   403                              <1> 	
   404                              <1> 	.loop01:
   405                              <1> 	
   406                              <1> 		
   407 00000500 D1E8                <1> 		shr eax , 1
   408                              <1> 		
   409 00000502 7205                <1> 		jc .one
   410                              <1> 		
   411 00000504 B230                <1> 			mov dl , '0'
   412 00000506 52                  <1> 			push rdx
   413                              <1> 			
   414 00000507 EB03                <1> 		jmp .next
   415                              <1> 		.one:
   416                              <1> 			
   417 00000509 B231                <1> 			mov dl , '1'
   418 0000050B 52                  <1> 			push rdx
   419                              <1> 		
   420                              <1> 		.next:
   421                              <1> 		
   422 0000050C FFC1                <1> 		inc ecx
   423                              <1> 		
   424 0000050E 83F801              <1> 		cmp eax , 1
   425                              <1> 		
   426 00000511 77ED                <1> 		ja .loop01
   427                              <1> 	
   428 00000513 0430                <1> 	add al , '0'	
   429 00000515 8807                <1> 	mov [rdi] , al
   430                              <1> 	
   431 00000517 EBAE                <1> 	jmp vV_ascii_pop_digits
   432                              <1> 	
   433                              <1> 	
   434                              <1> ;Will need a special version for String stack
   435                              <1> 
   436                              <1> 
   437                              <1> 
   438                              <1> 
   439                              <1> 
   440                              <1> 
   441                              <1> 
     9                                  %include "w_samples/assembly/bytetesting_vars.was"	
     1                              <1>  segment .bss
     2                              <1> 	u_global_term:
     3                              <1> 	u_global:
     4 00000286 <res 0000000B>      <1> .text:resb 11 
     5 00000291 <res 00000004>      <1> .colors:resb 4 
     6 00000295 <res 00000005>      <1> .partial:resb 5 
     7                              <1>  segment .data
     8                              <1> 	i_global_term:
     9 00000134 1000000000000000    <1> .default_bg:dq 16
    10 0000013C 0F00000000000000    <1> .default_fg:dq 15
    11                              <1> 	i_global:
    12 00000144 00                  <1> .color_bg:db 0
    10                                  %include "vVc/assembly/w_runtime/vV_system90.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	
     5                              <1> 	
     6                              <1> 	stacks: 
     7                              <1> 
     8                              <1> 
     9 0000029A <res 00040000>      <1> 	string_stack_start: resb 262144
    10                              <1> 
    11                              <1> 
    12                              <1> 	
    13                              <1> 	
    14                              <1> 						
    15 0004029A <res 00020000>      <1> 	fake_stack_start: resb 131072
    11                                  
    12                                  
    13                                  
    14                                  global w_entry_point
    15                                  
    16                                  
    17                                  
    18                                  segment .text 
    19                                  
    20                                  
    21                                  clear:		
    22 00000519 55                      	push rbp	
    23 0000051A 4889E5                  	mov rbp , rsp	
    24                                  
    25                                  ;------Setup Phase
    26                                  
    27                                  ;------Init Phase
    28                                  
    29                                  .tailcall:		;Body Section	
    30                                  
    31                                   ;OpADR: [0]  ; PUSH opcode 
    32                                  
    33                                  	vV_push 680731 
    33                              <1> 
    33 0000051D 41C7071B630A00      <1>  mov DWORD[vV_sp] , %1
    33 00000524 4983C704            <1>  add vV_sp , 4
    33                              <1> 
    34                                  
    35                                  
    36                                   ;OpADR: [1]  ; OUT opcode (9)			
    37                                  
    38                                  								
    39 00000528 E840FDFFFF              	call vV_io_out_packed_char				
    40                                  						
    41                                  
    42                                   ;OpADR: [2]  ; End of func opcode					
    43                                  
    44                                  
    45                                  ;------Cleanup Phase
    46                                  
    47                                  ;------frame restore Phase
    48 0000052D 4889EC                  	mov rsp , rbp	
    49 00000530 5D                      	pop rbp	
    50 00000531 C3                      	ret	
    51                                  cursor_x_y:		
    52 00000532 55                      	push rbp	
    53 00000533 4889E5                  	mov rbp , rsp	
    54                                  
    55                                  ;------Setup Phase
    56 00000536 4883EC18                	sub rsp , 24	;Space for local vars	
    57                                  
    58                                  ;------Init Phase
    59                                  
    60                                  .tailcall:		;Body Section	
    61                                  
    62                                   ;OpADR: [3]  ; Var assignement					
    63                                  
    64 0000053A 4831C0                  	xor rax , rax
    65 0000053D 488D7DF0                	lea rdi , [rbp - 16]	
    66                                  	vV_pop ecx	
    66                              <1> 
    66 00000541 4983EF04            <1>  sub vV_sp , 4
    66 00000545 418B0F              <1>  mov %1 , [vV_sp]
    66                              <1> 
    67 00000548 4801C7                  	add rdi , rax	
    68 0000054B 4889F8                  	mov rax , rdi	
    69 0000054E 8908                    	mov [rax] , ecx	
    70                                  
    71                                   ;OpADR: [4]  ; Var assignement					
    72                                  
    73 00000550 4831C0                  	xor rax , rax
    74 00000553 488D7DF8                	lea rdi , [rbp - 8]	
    75                                  	vV_pop ecx	
    75                              <1> 
    75 00000557 4983EF04            <1>  sub vV_sp , 4
    75 0000055B 418B0F              <1>  mov %1 , [vV_sp]
    75                              <1> 
    76 0000055E 4801C7                  	add rdi , rax	
    77 00000561 4889F8                  	mov rax , rdi	
    78 00000564 8908                    	mov [rax] , ecx	
    79                                  
    80                                   ;OpADR: [5]  ; PUSH opcode 
    81                                  
    82                                  	vV_push 72 
    82                              <1> 
    82 00000566 41C70748000000      <1>  mov DWORD[vV_sp] , %1
    82 0000056D 4983C704            <1>  add vV_sp , 4
    82                              <1> 
    83                                  
    84                                  
    85                                   ;OpADR: [6]  ; Var invocation					
    86                                  
    87 00000571 4831C0                  	xor rax , rax
    88 00000574 488D7DF0                	lea rdi , [rbp - 16]	
    89 00000578 4801C7                  	add rdi , rax	
    90 0000057B 8B07                    	mov eax , [rdi]	
    91                                  	vV_push eax	
    91                              <1> 
    91 0000057D 418907              <1>  mov DWORD[vV_sp] , %1
    91 00000580 4983C704            <1>  add vV_sp , 4
    91                              <1> 
    92                                  
    93                                   ;OpADR: [7]  ; PUSH opcode 
    94                                  
    95                                  	vV_push 59 
    95                              <1> 
    95 00000584 41C7073B000000      <1>  mov DWORD[vV_sp] , %1
    95 0000058B 4983C704            <1>  add vV_sp , 4
    95                              <1> 
    96                                  
    97                                  
    98                                   ;OpADR: [8]  ; Var invocation					
    99                                  
   100 0000058F 4831C0                  	xor rax , rax
   101 00000592 488D7DF8                	lea rdi , [rbp - 8]	
   102 00000596 4801C7                  	add rdi , rax	
   103 00000599 8B07                    	mov eax , [rdi]	
   104                                  	vV_push eax	
   104                              <1> 
   104 0000059B 418907              <1>  mov DWORD[vV_sp] , %1
   104 0000059E 4983C704            <1>  add vV_sp , 4
   104                              <1> 
   105                                  
   106                                   ;OpADR: [9]  ; PUSH opcode 
   107                                  
   108                                  	vV_push 91 
   108                              <1> 
   108 000005A2 41C7075B000000      <1>  mov DWORD[vV_sp] , %1
   108 000005A9 4983C704            <1>  add vV_sp , 4
   108                              <1> 
   109                                  
   110                                  
   111                                   ;OpADR: [10]  ; PUSH opcode 
   112                                  
   113                                  	vV_push 27 
   113                              <1> 
   113 000005AD 41C7071B000000      <1>  mov DWORD[vV_sp] , %1
   113 000005B4 4983C704            <1>  add vV_sp , 4
   113                              <1> 
   114                                  
   115                                  
   116                                   ;OpADR: [11]  ; BUFF_OUT opcode (8)			
   117                                  
   118                                  
   119 000005B8 E8BBFCFFFF              	call vV_io_out_char_buffer			
   120                                  						
   121                                  
   122                                   ;OpADR: [12]  ; BUFF_OUT opcode (8)			
   123                                  
   124                                  
   125 000005BD E8B6FCFFFF              	call vV_io_out_char_buffer			
   126                                  						
   127                                  
   128                                   ;OpADR: [13]  ; BUFF_OUT opcode (0)			
   129                                  
   130 000005C2 E823FCFFFF              	call vV_io_out_buffer_default			
   131                                  						
   132                                  
   133                                   ;OpADR: [14]  ; BUFF_OUT opcode (8)			
   134                                  
   135                                  
   136 000005C7 E8ACFCFFFF              	call vV_io_out_char_buffer			
   137                                  						
   138                                  
   139                                   ;OpADR: [15]  ; BUFF_OUT opcode (0)			
   140                                  
   141 000005CC E819FCFFFF              	call vV_io_out_buffer_default			
   142                                  						
   143                                  
   144                                   ;OpADR: [16]  ; BUFF_OUT opcode (8)			
   145                                  
   146                                  
   147 000005D1 E8A2FCFFFF              	call vV_io_out_char_buffer			
   148                                  						
   149                                  
   150                                   ;OpADR: [17]  ; FLUSH opcode					
   151                                  
   152 000005D6 E8B3FBFFFF              		call vV_io_flush_no_nline	
   153                                  
   154                                   ;OpADR: [18]  ; End of func opcode					
   155                                  
   156                                  
   157                                  ;------Cleanup Phase
   158                                  
   159                                  ;------frame restore Phase
   160 000005DB 4889EC                  	mov rsp , rbp	
   161 000005DE 5D                      	pop rbp	
   162 000005DF C3                      	ret	
   163                                  term_bg:		
   164 000005E0 55                      	push rbp	
   165 000005E1 4889E5                  	mov rbp , rsp	
   166                                  
   167                                  ;------Setup Phase
   168 000005E4 4883EC10                	sub rsp , 16	;Space for local vars	
   169                                  
   170                                  ;------Init Phase
   171                                  
   172                                  .tailcall:		;Body Section	
   173                                  
   174                                   ;OpADR: [19]  ; Var assignement					
   175                                  
   176 000005E8 4831C0                  	xor rax , rax
   177 000005EB 488D7DF8                	lea rdi , [rbp - 8]	
   178                                  	vV_pop ecx	
   178                              <1> 
   178 000005EF 4983EF04            <1>  sub vV_sp , 4
   178 000005F3 418B0F              <1>  mov %1 , [vV_sp]
   178                              <1> 
   179 000005F6 4801C7                  	add rdi , rax	
   180 000005F9 4889F8                  	mov rax , rdi	
   181 000005FC 8908                    	mov [rax] , ecx	
   182                                  
   183                                   ;OpADR: [20]  ; PUSH opcode 
   184                                  
   185                                  	vV_push 109 
   185                              <1> 
   185 000005FE 41C7076D000000      <1>  mov DWORD[vV_sp] , %1
   185 00000605 4983C704            <1>  add vV_sp , 4
   185                              <1> 
   186                                  
   187                                  
   188                                   ;OpADR: [21]  ; PUSH opcode 
   189                                  
   190                                  	vV_push 59 
   190                              <1> 
   190 00000609 41C7073B000000      <1>  mov DWORD[vV_sp] , %1
   190 00000610 4983C704            <1>  add vV_sp , 4
   190                              <1> 
   191                                  
   192                                  
   193                                   ;OpADR: [22]  ; PUSH opcode 
   194                                  
   195                                  	vV_push 53 
   195                              <1> 
   195 00000614 41C70735000000      <1>  mov DWORD[vV_sp] , %1
   195 0000061B 4983C704            <1>  add vV_sp , 4
   195                              <1> 
   196                                  
   197                                  
   198                                   ;OpADR: [23]  ; PUSH opcode 
   199                                  
   200                                  	vV_push 59 
   200                              <1> 
   200 0000061F 41C7073B000000      <1>  mov DWORD[vV_sp] , %1
   200 00000626 4983C704            <1>  add vV_sp , 4
   200                              <1> 
   201                                  
   202                                  
   203                                   ;OpADR: [24]  ; PUSH opcode 
   204                                  
   205                                  	vV_push 56 
   205                              <1> 
   205 0000062A 41C70738000000      <1>  mov DWORD[vV_sp] , %1
   205 00000631 4983C704            <1>  add vV_sp , 4
   205                              <1> 
   206                                  
   207                                  
   208                                   ;OpADR: [25]  ; PUSH opcode 
   209                                  
   210                                  	vV_push 52 
   210                              <1> 
   210 00000635 41C70734000000      <1>  mov DWORD[vV_sp] , %1
   210 0000063C 4983C704            <1>  add vV_sp , 4
   210                              <1> 
   211                                  
   212                                  
   213                                   ;OpADR: [26]  ; PUSH opcode 
   214                                  
   215                                  	vV_push 91 
   215                              <1> 
   215 00000640 41C7075B000000      <1>  mov DWORD[vV_sp] , %1
   215 00000647 4983C704            <1>  add vV_sp , 4
   215                              <1> 
   216                                  
   217                                  
   218                                   ;OpADR: [27]  ; PUSH opcode 
   219                                  
   220                                  	vV_push 27 
   220                              <1> 
   220 0000064B 41C7071B000000      <1>  mov DWORD[vV_sp] , %1
   220 00000652 4983C704            <1>  add vV_sp , 4
   220                              <1> 
   221                                  
   222                                  
   223                                   ;OpADR: [28]  ; BUFF_OUT opcode (8)			
   224                                  
   225                                  
   226 00000656 E81DFCFFFF              	call vV_io_out_char_buffer			
   227                                  						
   228                                  
   229                                   ;OpADR: [29]  ; BUFF_OUT opcode (8)			
   230                                  
   231                                  
   232 0000065B E818FCFFFF              	call vV_io_out_char_buffer			
   233                                  						
   234                                  
   235                                   ;OpADR: [30]  ; BUFF_OUT opcode (8)			
   236                                  
   237                                  
   238 00000660 E813FCFFFF              	call vV_io_out_char_buffer			
   239                                  						
   240                                  
   241                                   ;OpADR: [31]  ; BUFF_OUT opcode (8)			
   242                                  
   243                                  
   244 00000665 E80EFCFFFF              	call vV_io_out_char_buffer			
   245                                  						
   246                                  
   247                                   ;OpADR: [32]  ; BUFF_OUT opcode (8)			
   248                                  
   249                                  
   250 0000066A E809FCFFFF              	call vV_io_out_char_buffer			
   251                                  						
   252                                  
   253                                   ;OpADR: [33]  ; BUFF_OUT opcode (8)			
   254                                  
   255                                  
   256 0000066F E804FCFFFF              	call vV_io_out_char_buffer			
   257                                  						
   258                                  
   259                                   ;OpADR: [34]  ; BUFF_OUT opcode (8)			
   260                                  
   261                                  
   262 00000674 E8FFFBFFFF              	call vV_io_out_char_buffer			
   263                                  						
   264                                  
   265                                   ;OpADR: [35]  ; Var invocation					
   266                                  
   267 00000679 4831C0                  	xor rax , rax
   268 0000067C 488D7DF8                	lea rdi , [rbp - 8]	
   269 00000680 4801C7                  	add rdi , rax	
   270 00000683 8B07                    	mov eax , [rdi]	
   271                                  	vV_push eax	
   271                              <1> 
   271 00000685 418907              <1>  mov DWORD[vV_sp] , %1
   271 00000688 4983C704            <1>  add vV_sp , 4
   271                              <1> 
   272                                  
   273                                   ;OpADR: [36]  ; BUFF_OUT opcode (0)			
   274                                  
   275 0000068C E859FBFFFF              	call vV_io_out_buffer_default			
   276                                  						
   277                                  
   278                                   ;OpADR: [37]  ; BUFF_OUT opcode (8)			
   279                                  
   280                                  
   281 00000691 E8E2FBFFFF              	call vV_io_out_char_buffer			
   282                                  						
   283                                  
   284                                   ;OpADR: [38]  ; FLUSH opcode					
   285                                  
   286 00000696 E8F3FAFFFF              		call vV_io_flush_no_nline	
   287                                  
   288                                   ;OpADR: [39]  ; End of func opcode					
   289                                  
   290                                  
   291                                  ;------Cleanup Phase
   292                                  
   293                                  ;------frame restore Phase
   294 0000069B 4889EC                  	mov rsp , rbp	
   295 0000069E 5D                      	pop rbp	
   296 0000069F C3                      	ret	
   297                                  term_fg:		
   298 000006A0 55                      	push rbp	
   299 000006A1 4889E5                  	mov rbp , rsp	
   300                                  
   301                                  ;------Setup Phase
   302 000006A4 4883EC10                	sub rsp , 16	;Space for local vars	
   303                                  
   304                                  ;------Init Phase
   305                                  
   306                                  .tailcall:		;Body Section	
   307                                  
   308                                   ;OpADR: [40]  ; Var assignement					
   309                                  
   310 000006A8 4831C0                  	xor rax , rax
   311 000006AB 488D7DF8                	lea rdi , [rbp - 8]	
   312                                  	vV_pop ecx	
   312                              <1> 
   312 000006AF 4983EF04            <1>  sub vV_sp , 4
   312 000006B3 418B0F              <1>  mov %1 , [vV_sp]
   312                              <1> 
   313 000006B6 4801C7                  	add rdi , rax	
   314 000006B9 4889F8                  	mov rax , rdi	
   315 000006BC 8908                    	mov [rax] , ecx	
   316                                  
   317                                   ;OpADR: [41]  ; PUSH opcode 
   318                                  
   319                                  	vV_push 109 
   319                              <1> 
   319 000006BE 41C7076D000000      <1>  mov DWORD[vV_sp] , %1
   319 000006C5 4983C704            <1>  add vV_sp , 4
   319                              <1> 
   320                                  
   321                                  
   322                                   ;OpADR: [42]  ; PUSH opcode 
   323                                  
   324                                  	vV_push 59 
   324                              <1> 
   324 000006C9 41C7073B000000      <1>  mov DWORD[vV_sp] , %1
   324 000006D0 4983C704            <1>  add vV_sp , 4
   324                              <1> 
   325                                  
   326                                  
   327                                   ;OpADR: [43]  ; PUSH opcode 
   328                                  
   329                                  	vV_push 53 
   329                              <1> 
   329 000006D4 41C70735000000      <1>  mov DWORD[vV_sp] , %1
   329 000006DB 4983C704            <1>  add vV_sp , 4
   329                              <1> 
   330                                  
   331                                  
   332                                   ;OpADR: [44]  ; PUSH opcode 
   333                                  
   334                                  	vV_push 59 
   334                              <1> 
   334 000006DF 41C7073B000000      <1>  mov DWORD[vV_sp] , %1
   334 000006E6 4983C704            <1>  add vV_sp , 4
   334                              <1> 
   335                                  
   336                                  
   337                                   ;OpADR: [45]  ; PUSH opcode 
   338                                  
   339                                  	vV_push 56 
   339                              <1> 
   339 000006EA 41C70738000000      <1>  mov DWORD[vV_sp] , %1
   339 000006F1 4983C704            <1>  add vV_sp , 4
   339                              <1> 
   340                                  
   341                                  
   342                                   ;OpADR: [46]  ; PUSH opcode 
   343                                  
   344                                  	vV_push 51 
   344                              <1> 
   344 000006F5 41C70733000000      <1>  mov DWORD[vV_sp] , %1
   344 000006FC 4983C704            <1>  add vV_sp , 4
   344                              <1> 
   345                                  
   346                                  
   347                                   ;OpADR: [47]  ; PUSH opcode 
   348                                  
   349                                  	vV_push 91 
   349                              <1> 
   349 00000700 41C7075B000000      <1>  mov DWORD[vV_sp] , %1
   349 00000707 4983C704            <1>  add vV_sp , 4
   349                              <1> 
   350                                  
   351                                  
   352                                   ;OpADR: [48]  ; PUSH opcode 
   353                                  
   354                                  	vV_push 27 
   354                              <1> 
   354 0000070B 41C7071B000000      <1>  mov DWORD[vV_sp] , %1
   354 00000712 4983C704            <1>  add vV_sp , 4
   354                              <1> 
   355                                  
   356                                  
   357                                   ;OpADR: [49]  ; BUFF_OUT opcode (8)			
   358                                  
   359                                  
   360 00000716 E85DFBFFFF              	call vV_io_out_char_buffer			
   361                                  						
   362                                  
   363                                   ;OpADR: [50]  ; BUFF_OUT opcode (8)			
   364                                  
   365                                  
   366 0000071B E858FBFFFF              	call vV_io_out_char_buffer			
   367                                  						
   368                                  
   369                                   ;OpADR: [51]  ; BUFF_OUT opcode (8)			
   370                                  
   371                                  
   372 00000720 E853FBFFFF              	call vV_io_out_char_buffer			
   373                                  						
   374                                  
   375                                   ;OpADR: [52]  ; BUFF_OUT opcode (8)			
   376                                  
   377                                  
   378 00000725 E84EFBFFFF              	call vV_io_out_char_buffer			
   379                                  						
   380                                  
   381                                   ;OpADR: [53]  ; BUFF_OUT opcode (8)			
   382                                  
   383                                  
   384 0000072A E849FBFFFF              	call vV_io_out_char_buffer			
   385                                  						
   386                                  
   387                                   ;OpADR: [54]  ; BUFF_OUT opcode (8)			
   388                                  
   389                                  
   390 0000072F E844FBFFFF              	call vV_io_out_char_buffer			
   391                                  						
   392                                  
   393                                   ;OpADR: [55]  ; BUFF_OUT opcode (8)			
   394                                  
   395                                  
   396 00000734 E83FFBFFFF              	call vV_io_out_char_buffer			
   397                                  						
   398                                  
   399                                   ;OpADR: [56]  ; Var invocation					
   400                                  
   401 00000739 4831C0                  	xor rax , rax
   402 0000073C 488D7DF8                	lea rdi , [rbp - 8]	
   403 00000740 4801C7                  	add rdi , rax	
   404 00000743 8B07                    	mov eax , [rdi]	
   405                                  	vV_push eax	
   405                              <1> 
   405 00000745 418907              <1>  mov DWORD[vV_sp] , %1
   405 00000748 4983C704            <1>  add vV_sp , 4
   405                              <1> 
   406                                  
   407                                   ;OpADR: [57]  ; BUFF_OUT opcode (0)			
   408                                  
   409 0000074C E899FAFFFF              	call vV_io_out_buffer_default			
   410                                  						
   411                                  
   412                                   ;OpADR: [58]  ; BUFF_OUT opcode (8)			
   413                                  
   414                                  
   415 00000751 E822FBFFFF              	call vV_io_out_char_buffer			
   416                                  						
   417                                  
   418                                   ;OpADR: [59]  ; FLUSH opcode					
   419                                  
   420 00000756 E833FAFFFF              		call vV_io_flush_no_nline	
   421                                  
   422                                   ;OpADR: [60]  ; End of func opcode					
   423                                  
   424                                  
   425                                  ;------Cleanup Phase
   426                                  
   427                                  ;------frame restore Phase
   428 0000075B 4889EC                  	mov rsp , rbp	
   429 0000075E 5D                      	pop rbp	
   430 0000075F C3                      	ret	
   431                                  defined_color:		
   432 00000760 55                      	push rbp	
   433 00000761 4889E5                  	mov rbp , rsp	
   434                                  
   435                                  ;------Setup Phase
   436                                  
   437                                  ;------Init Phase
   438                                  
   439                                  .tailcall:		;Body Section	
   440                                  
   441                                   ;OpADR: [61]  ; Var invocation					
   442                                  
   443 00000764 4831C0                  	xor rax , rax
   444 00000767 488D3C25[34010000]      	lea rdi , [i_global_term.default_bg]	
   445 0000076F 4801C7                  	add rdi , rax	
   446 00000772 8B07                    	mov eax , [rdi]	
   447                                  	vV_push eax	
   447                              <1> 
   447 00000774 418907              <1>  mov DWORD[vV_sp] , %1
   447 00000777 4983C704            <1>  add vV_sp , 4
   447                              <1> 
   448                                  
   449                                   ;OpADR: [62]  ; Function Call					
   450                                  
   451 0000077B E860FEFFFF              		call term_bg			
   452                                  
   453                                   ;OpADR: [63]  ; Var invocation					
   454                                  
   455 00000780 4831C0                  	xor rax , rax
   456 00000783 488D3C25[3C010000]      	lea rdi , [i_global_term.default_fg]	
   457 0000078B 4801C7                  	add rdi , rax	
   458 0000078E 8B07                    	mov eax , [rdi]	
   459                                  	vV_push eax	
   459                              <1> 
   459 00000790 418907              <1>  mov DWORD[vV_sp] , %1
   459 00000793 4983C704            <1>  add vV_sp , 4
   459                              <1> 
   460                                  
   461                                   ;OpADR: [64]  ; Function Call					
   462                                  
   463 00000797 E804FFFFFF              		call term_fg			
   464                                  
   465                                   ;OpADR: [65]  ; End of func opcode					
   466                                  
   467                                  
   468                                  ;------Cleanup Phase
   469                                  
   470                                  ;------frame restore Phase
   471 0000079C 4889EC                  	mov rsp , rbp	
   472 0000079F 5D                      	pop rbp	
   473 000007A0 C3                      	ret	
   474                                  default_color:		
   475 000007A1 55                      	push rbp	
   476 000007A2 4889E5                  	mov rbp , rsp	
   477                                  
   478                                  ;------Setup Phase
   479                                  
   480                                  ;------Init Phase
   481                                  
   482                                  .tailcall:		;Body Section	
   483                                  
   484                                   ;OpADR: [66]  ; PUSH opcode 
   485                                  
   486                                  	vV_push 109 
   486                              <1> 
   486 000007A5 41C7076D000000      <1>  mov DWORD[vV_sp] , %1
   486 000007AC 4983C704            <1>  add vV_sp , 4
   486                              <1> 
   487                                  
   488                                  
   489                                   ;OpADR: [67]  ; PUSH opcode 
   490                                  
   491                                  	vV_push 57 
   491                              <1> 
   491 000007B0 41C70739000000      <1>  mov DWORD[vV_sp] , %1
   491 000007B7 4983C704            <1>  add vV_sp , 4
   491                              <1> 
   492                                  
   493                                  
   494                                   ;OpADR: [68]  ; PUSH opcode 
   495                                  
   496                                  	vV_push 52 
   496                              <1> 
   496 000007BB 41C70734000000      <1>  mov DWORD[vV_sp] , %1
   496 000007C2 4983C704            <1>  add vV_sp , 4
   496                              <1> 
   497                                  
   498                                  
   499                                   ;OpADR: [69]  ; PUSH opcode 
   500                                  
   501                                  	vV_push 91 
   501                              <1> 
   501 000007C6 41C7075B000000      <1>  mov DWORD[vV_sp] , %1
   501 000007CD 4983C704            <1>  add vV_sp , 4
   501                              <1> 
   502                                  
   503                                  
   504                                   ;OpADR: [70]  ; PUSH opcode 
   505                                  
   506                                  	vV_push 27 
   506                              <1> 
   506 000007D1 41C7071B000000      <1>  mov DWORD[vV_sp] , %1
   506 000007D8 4983C704            <1>  add vV_sp , 4
   506                              <1> 
   507                                  
   508                                  
   509                                   ;OpADR: [71]  ; BUFF_OUT opcode (8)			
   510                                  
   511                                  
   512 000007DC E897FAFFFF              	call vV_io_out_char_buffer			
   513                                  						
   514                                  
   515                                   ;OpADR: [72]  ; BUFF_OUT opcode (8)			
   516                                  
   517                                  
   518 000007E1 E892FAFFFF              	call vV_io_out_char_buffer			
   519                                  						
   520                                  
   521                                   ;OpADR: [73]  ; BUFF_OUT opcode (8)			
   522                                  
   523                                  
   524 000007E6 E88DFAFFFF              	call vV_io_out_char_buffer			
   525                                  						
   526                                  
   527                                   ;OpADR: [74]  ; BUFF_OUT opcode (8)			
   528                                  
   529                                  
   530 000007EB E888FAFFFF              	call vV_io_out_char_buffer			
   531                                  						
   532                                  
   533                                   ;OpADR: [75]  ; BUFF_OUT opcode (8)			
   534                                  
   535                                  
   536 000007F0 E883FAFFFF              	call vV_io_out_char_buffer			
   537                                  						
   538                                  
   539                                   ;OpADR: [76]  ; FLUSH opcode					
   540                                  
   541 000007F5 E894F9FFFF              		call vV_io_flush_no_nline	
   542                                  
   543                                   ;OpADR: [77]  ; PUSH opcode 
   544                                  
   545                                  	vV_push 109 
   545                              <1> 
   545 000007FA 41C7076D000000      <1>  mov DWORD[vV_sp] , %1
   545 00000801 4983C704            <1>  add vV_sp , 4
   545                              <1> 
   546                                  
   547                                  
   548                                   ;OpADR: [78]  ; PUSH opcode 
   549                                  
   550                                  	vV_push 57 
   550                              <1> 
   550 00000805 41C70739000000      <1>  mov DWORD[vV_sp] , %1
   550 0000080C 4983C704            <1>  add vV_sp , 4
   550                              <1> 
   551                                  
   552                                  
   553                                   ;OpADR: [79]  ; PUSH opcode 
   554                                  
   555                                  	vV_push 51 
   555                              <1> 
   555 00000810 41C70733000000      <1>  mov DWORD[vV_sp] , %1
   555 00000817 4983C704            <1>  add vV_sp , 4
   555                              <1> 
   556                                  
   557                                  
   558                                   ;OpADR: [80]  ; PUSH opcode 
   559                                  
   560                                  	vV_push 91 
   560                              <1> 
   560 0000081B 41C7075B000000      <1>  mov DWORD[vV_sp] , %1
   560 00000822 4983C704            <1>  add vV_sp , 4
   560                              <1> 
   561                                  
   562                                  
   563                                   ;OpADR: [81]  ; PUSH opcode 
   564                                  
   565                                  	vV_push 27 
   565                              <1> 
   565 00000826 41C7071B000000      <1>  mov DWORD[vV_sp] , %1
   565 0000082D 4983C704            <1>  add vV_sp , 4
   565                              <1> 
   566                                  
   567                                  
   568                                   ;OpADR: [82]  ; BUFF_OUT opcode (8)			
   569                                  
   570                                  
   571 00000831 E842FAFFFF              	call vV_io_out_char_buffer			
   572                                  						
   573                                  
   574                                   ;OpADR: [83]  ; BUFF_OUT opcode (8)			
   575                                  
   576                                  
   577 00000836 E83DFAFFFF              	call vV_io_out_char_buffer			
   578                                  						
   579                                  
   580                                   ;OpADR: [84]  ; BUFF_OUT opcode (8)			
   581                                  
   582                                  
   583 0000083B E838FAFFFF              	call vV_io_out_char_buffer			
   584                                  						
   585                                  
   586                                   ;OpADR: [85]  ; BUFF_OUT opcode (8)			
   587                                  
   588                                  
   589 00000840 E833FAFFFF              	call vV_io_out_char_buffer			
   590                                  						
   591                                  
   592                                   ;OpADR: [86]  ; BUFF_OUT opcode (8)			
   593                                  
   594                                  
   595 00000845 E82EFAFFFF              	call vV_io_out_char_buffer			
   596                                  						
   597                                  
   598                                   ;OpADR: [87]  ; FLUSH opcode					
   599                                  
   600 0000084A E83FF9FFFF              		call vV_io_flush_no_nline	
   601                                  
   602                                   ;OpADR: [88]  ; End of func opcode					
   603                                  
   604                                  
   605                                  ;------Cleanup Phase
   606                                  
   607                                  ;------frame restore Phase
   608 0000084F 4889EC                  	mov rsp , rbp	
   609 00000852 5D                      	pop rbp	
   610 00000853 C3                      	ret	
   611                                  print:		
   612 00000854 55                      	push rbp	
   613 00000855 4889E5                  	mov rbp , rsp	
   614                                  
   615                                  ;------Setup Phase
   616                                  
   617                                  ;------Init Phase
   618                                  
   619                                  .tailcall:		;Body Section	
   620                                  
   621                                   ;OpADR: [0]  ; PUSH opcode 
   622                                  
   623                                  	vV_push 0 
   623                              <1> 
   623 00000858 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   623 0000085F 4983C704            <1>  add vV_sp , 4
   623                              <1> 
   624                                  
   625                                  
   626                                   ;OpADR: [1]  ; PUSH opcode 
   627                                  
   628                                  	vV_push 10 
   628                              <1> 
   628 00000863 41C7070A000000      <1>  mov DWORD[vV_sp] , %1
   628 0000086A 4983C704            <1>  add vV_sp , 4
   628                              <1> 
   629                                  
   630                                  
   631                                   ;OpADR: [2]  ; PUSH opcode 
   632                                  
   633                                  	vV_push 0 
   633                              <1> 
   633 0000086E 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   633 00000875 4983C704            <1>  add vV_sp , 4
   633                              <1> 
   634                                  
   635                                  
   636                                   ;OpADR: [3]  ; Loop init 					
   637                                  	vV_pop eax	;get index
   637                              <1> 
   637 00000879 4983EF04            <1>  sub vV_sp , 4
   637 0000087D 418B07              <1>  mov %1 , [vV_sp]
   637                              <1> 
   638 00000880 50                      	push rax	
   639                                  	vV_pop eax	;get limit
   639                              <1> 
   639 00000881 4983EF04            <1>  sub vV_sp , 4
   639 00000885 418B07              <1>  mov %1 , [vV_sp]
   639                              <1> 
   640 00000888 50                      	push rax	
   641                                  
   642                                  
   643                                  	wblock_0:		
   644                                  
   645                                  ;------------------------------------------------------
   646                                  
   647                                  
   648                                   ;OpADR: [4]  ; DUP opcode (1)			
   649                                  
   650                                  	vV_dup 1			
   650                              <1> 
   650 00000889 B901000000          <1>  mov ecx , %1
   650 0000088E 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   650 00000892 4C89FF              <1>  mov rdi , vV_sp
   650                              <1> 
   650 00000895 F3A5                <1>  rep movsd
   650                              <1> 
   650 00000897 4983C704            <1>  add vV_sp , cell(%1)
   650                              <1> 
   651                                  
   652                                  
   653                                   ;OpADR: [5]  ; DUP opcode (1)			
   654                                  
   655                                  	vV_dup 1			
   655                              <1> 
   655 0000089B B901000000          <1>  mov ecx , %1
   655 000008A0 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   655 000008A4 4C89FF              <1>  mov rdi , vV_sp
   655                              <1> 
   655 000008A7 F3A5                <1>  rep movsd
   655                              <1> 
   655 000008A9 4983C704            <1>  add vV_sp , cell(%1)
   655                              <1> 
   656                                  
   657                                  
   658                                   ;OpADR: [6]  ; PUSH opcode 
   659                                  
   660                                  	vV_push 4 
   660                              <1> 
   660 000008AD 41C70704000000      <1>  mov DWORD[vV_sp] , %1
   660 000008B4 4983C704            <1>  add vV_sp , 4
   660                              <1> 
   661                                  
   662                                  
   663                                   ;OpADR: [7]  ; MOD opcode 					
   664                                  
   665 000008B8 31D2                    	xor edx , edx				
   666 000008BA 418B47F8                	mov eax , vV_2nd			
   667 000008BE 41F777FC                	div DWORD vV_top			
   668 000008C2 418957F8                	mov vV_2nd , edx			
   669                                  
   670 000008C6 4983EF04                	sub r15 , 4				
   671                                  
   672                                   ;OpADR: [8]  ; Var invocation					
   673                                  
   674 000008CA 488D3C25[91020000]      	lea rdi , [u_global.colors]	
   675 000008D2 4831C0                  	xor rax , rax	
   676                                  	vV_pop ecx	
   676                              <1> 
   676 000008D5 4983EF04            <1>  sub vV_sp , 4
   676 000008D9 418B0F              <1>  mov %1 , [vV_sp]
   676                              <1> 
   677 000008DC 83F904                  	cmp ecx , 4	
   678 000008DF 0F8DBDF7FFFF            	jge vV_bound_error	
   679 000008E5 01C8                    	add eax , ecx	
   680 000008E7 4801C7                  	add rdi , rax	
   681 000008EA 8A07                    	mov al , [rdi]	
   682                                  	vV_push eax	
   682                              <1> 
   682 000008EC 418907              <1>  mov DWORD[vV_sp] , %1
   682 000008EF 4983C704            <1>  add vV_sp , 4
   682                              <1> 
   683                                  
   684                                   ;OpADR: [9]  ; Function Call					
   685                                  
   686 000008F3 E8A8FDFFFF              		call term_fg			
   687                                  
   688                                   ;OpADR: [10]  ; Var invocation					
   689                                  
   690 000008F8 488D7D10                	lea rdi , [rbp + 16]	
   691 000008FC 8B3F                    	mov edi , [rdi]	
   692 000008FE 4831C0                  	xor rax , rax	
   693                                  	vV_pop ecx	
   693                              <1> 
   693 00000901 4983EF04            <1>  sub vV_sp , 4
   693 00000905 418B0F              <1>  mov %1 , [vV_sp]
   693                              <1> 
   694 00000908 83F90B                  	cmp ecx , 11	
   695 0000090B 0F8D91F7FFFF            	jge vV_bound_error	
   696 00000911 01C8                    	add eax , ecx	
   697 00000913 4801C7                  	add rdi , rax	
   698 00000916 8A07                    	mov al , [rdi]	
   699                                  	vV_push eax	
   699                              <1> 
   699 00000918 418907              <1>  mov DWORD[vV_sp] , %1
   699 0000091B 4983C704            <1>  add vV_sp , 4
   699                              <1> 
   700                                  
   701                                   ;OpADR: [11]  ; BUFF_OUT opcode (8)			
   702                                  
   703                                  
   704 0000091F E854F9FFFF              	call vV_io_out_char_buffer			
   705                                  						
   706                                  
   707                                   ;OpADR: [12]  ; PUSH opcode 
   708                                  
   709                                  	vV_push 1 
   709                              <1> 
   709 00000924 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   709 0000092B 4983C704            <1>  add vV_sp , 4
   709                              <1> 
   710                                  
   711                                  
   712                                   ;OpADR: [13]  ; ADD opcode 					
   713                                  
   714 0000092F 418B47F8                	mov eax , vV_2nd			
   715 00000933 410347FC                	add eax , vV_top			
   716 00000937 418947F8                	mov vV_2nd , eax			
   717                                  
   718                                  	vV_dec_sp 1		
   718                              <1> 
   718 0000093B 4983EF04            <1>  sub vV_sp , cell(%1)
   718                              <1> 
   719                                  
   720                                   ;OpADR: [14]  ; Loop check 					
   721 0000093F FF442408                	inc DWORD[rsp + 8]
   722 00000943 488B442408              	mov rax , [rsp + 8]	;get index
   723 00000948 488B0C24                	mov rcx , [rsp]	;get max
   724 0000094C 39C8                    	cmp eax , ecx	
   725 0000094E 0F8635FFFFFF            	jbe wblock_0	
   726                                  
   727                                  
   728                                  	wblock_1:		
   729                                  
   730                                  ;------------------------------------------------------
   731                                  
   732                                  
   733                                   ;OpADR: [15]  ; Loop Cleanup 					
   734 00000954 4883C410                	add rsp , 16	
   735                                  
   736                                   ;OpADR: [16]  ; FLUSH opcode					
   737                                  
   738 00000958 E831F8FFFF              		call vV_io_flush_no_nline	
   739                                  
   740                                   ;OpADR: [17]  ; End of func opcode					
   741                                  
   742                                  
   743                                  ;------Cleanup Phase
   744                                  
   745                                  ;------frame restore Phase
   746 0000095D 4889EC                  	mov rsp , rbp	
   747 00000960 5D                      	pop rbp	
   748 00000961 C3                      	ret	
   749                                  
   750                                  		
   751                                  
   752                                  
   753                                  
   754                                  vV_entry_point:
   755                                  
   756                                  
   757 00000962 55                      	push rbp
   758 00000963 4889E5                  	mov rbp, rsp			;Setup Stack Frame
   759                                  	
   760                                  	
   761                                   ;OpADR: [0]  ; PUSH opcode 
   762                                  
   763                                  	vV_push 14 
   763                              <1> 
   763 00000966 41C7070E000000      <1>  mov DWORD[vV_sp] , %1
   763 0000096D 4983C704            <1>  add vV_sp , 4
   763                              <1> 
   764                                  
   765                                  
   766                                   ;OpADR: [1]  ; PUSH opcode 
   767                                  
   768                                  	vV_push 0 
   768                              <1> 
   768 00000971 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   768 00000978 4983C704            <1>  add vV_sp , 4
   768                              <1> 
   769                                  
   770                                  
   771                                   ;OpADR: [2]  ; Var assignement					
   772                                  
   773 0000097C 488D3C25[91020000]      	lea rdi , [u_global.colors]	
   774 00000984 4831C0                  	xor rax , rax	
   775                                  	vV_pop ecx	
   775                              <1> 
   775 00000987 4983EF04            <1>  sub vV_sp , 4
   775 0000098B 418B0F              <1>  mov %1 , [vV_sp]
   775                              <1> 
   776 0000098E 83F904                  	cmp ecx , 4	
   777 00000991 0F8D0BF7FFFF            	jge vV_bound_error	
   778 00000997 01C8                    	add eax , ecx	
   779                                  	vV_pop ecx	
   779                              <1> 
   779 00000999 4983EF04            <1>  sub vV_sp , 4
   779 0000099D 418B0F              <1>  mov %1 , [vV_sp]
   779                              <1> 
   780 000009A0 4801C7                  	add rdi , rax	
   781 000009A3 4889F8                  	mov rax , rdi	
   782 000009A6 8808                    	mov BYTE[rax] , cl	
   783                                  
   784                                   ;OpADR: [3]  ; PUSH opcode 
   785                                  
   786                                  	vV_push 11 
   786                              <1> 
   786 000009A8 41C7070B000000      <1>  mov DWORD[vV_sp] , %1
   786 000009AF 4983C704            <1>  add vV_sp , 4
   786                              <1> 
   787                                  
   788                                  
   789                                   ;OpADR: [4]  ; PUSH opcode 
   790                                  
   791                                  	vV_push 1 
   791                              <1> 
   791 000009B3 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   791 000009BA 4983C704            <1>  add vV_sp , 4
   791                              <1> 
   792                                  
   793                                  
   794                                   ;OpADR: [5]  ; Var assignement					
   795                                  
   796 000009BE 488D3C25[91020000]      	lea rdi , [u_global.colors]	
   797 000009C6 4831C0                  	xor rax , rax	
   798                                  	vV_pop ecx	
   798                              <1> 
   798 000009C9 4983EF04            <1>  sub vV_sp , 4
   798 000009CD 418B0F              <1>  mov %1 , [vV_sp]
   798                              <1> 
   799 000009D0 83F904                  	cmp ecx , 4	
   800 000009D3 0F8DC9F6FFFF            	jge vV_bound_error	
   801 000009D9 01C8                    	add eax , ecx	
   802                                  	vV_pop ecx	
   802                              <1> 
   802 000009DB 4983EF04            <1>  sub vV_sp , 4
   802 000009DF 418B0F              <1>  mov %1 , [vV_sp]
   802                              <1> 
   803 000009E2 4801C7                  	add rdi , rax	
   804 000009E5 4889F8                  	mov rax , rdi	
   805 000009E8 8808                    	mov BYTE[rax] , cl	
   806                                  
   807                                   ;OpADR: [6]  ; PUSH opcode 
   808                                  
   809                                  	vV_push 112 
   809                              <1> 
   809 000009EA 41C70770000000      <1>  mov DWORD[vV_sp] , %1
   809 000009F1 4983C704            <1>  add vV_sp , 4
   809                              <1> 
   810                                  
   811                                  
   812                                   ;OpADR: [7]  ; PUSH opcode 
   813                                  
   814                                  	vV_push 2 
   814                              <1> 
   814 000009F5 41C70702000000      <1>  mov DWORD[vV_sp] , %1
   814 000009FC 4983C704            <1>  add vV_sp , 4
   814                              <1> 
   815                                  
   816                                  
   817                                   ;OpADR: [8]  ; Var assignement					
   818                                  
   819 00000A00 488D3C25[91020000]      	lea rdi , [u_global.colors]	
   820 00000A08 4831C0                  	xor rax , rax	
   821                                  	vV_pop ecx	
   821                              <1> 
   821 00000A0B 4983EF04            <1>  sub vV_sp , 4
   821 00000A0F 418B0F              <1>  mov %1 , [vV_sp]
   821                              <1> 
   822 00000A12 83F904                  	cmp ecx , 4	
   823 00000A15 0F8D87F6FFFF            	jge vV_bound_error	
   824 00000A1B 01C8                    	add eax , ecx	
   825                                  	vV_pop ecx	
   825                              <1> 
   825 00000A1D 4983EF04            <1>  sub vV_sp , 4
   825 00000A21 418B0F              <1>  mov %1 , [vV_sp]
   825                              <1> 
   826 00000A24 4801C7                  	add rdi , rax	
   827 00000A27 4889F8                  	mov rax , rdi	
   828 00000A2A 8808                    	mov BYTE[rax] , cl	
   829                                  
   830                                   ;OpADR: [9]  ; PUSH opcode 
   831                                  
   832                                  	vV_push 76 
   832                              <1> 
   832 00000A2C 41C7074C000000      <1>  mov DWORD[vV_sp] , %1
   832 00000A33 4983C704            <1>  add vV_sp , 4
   832                              <1> 
   833                                  
   834                                  
   835                                   ;OpADR: [10]  ; PUSH opcode 
   836                                  
   837                                  	vV_push 3 
   837                              <1> 
   837 00000A37 41C70703000000      <1>  mov DWORD[vV_sp] , %1
   837 00000A3E 4983C704            <1>  add vV_sp , 4
   837                              <1> 
   838                                  
   839                                  
   840                                   ;OpADR: [11]  ; Var assignement					
   841                                  
   842 00000A42 488D3C25[91020000]      	lea rdi , [u_global.colors]	
   843 00000A4A 4831C0                  	xor rax , rax	
   844                                  	vV_pop ecx	
   844                              <1> 
   844 00000A4D 4983EF04            <1>  sub vV_sp , 4
   844 00000A51 418B0F              <1>  mov %1 , [vV_sp]
   844                              <1> 
   845 00000A54 83F904                  	cmp ecx , 4	
   846 00000A57 0F8D45F6FFFF            	jge vV_bound_error	
   847 00000A5D 01C8                    	add eax , ecx	
   848                                  	vV_pop ecx	
   848                              <1> 
   848 00000A5F 4983EF04            <1>  sub vV_sp , 4
   848 00000A63 418B0F              <1>  mov %1 , [vV_sp]
   848                              <1> 
   849 00000A66 4801C7                  	add rdi , rax	
   850 00000A69 4889F8                  	mov rax , rdi	
   851 00000A6C 8808                    	mov BYTE[rax] , cl	
   852                                  
   853                                   ;OpADR: [12]  ; PUSH opcode 
   854                                  
   855                                  	vV_push 72 
   855                              <1> 
   855 00000A6E 41C70748000000      <1>  mov DWORD[vV_sp] , %1
   855 00000A75 4983C704            <1>  add vV_sp , 4
   855                              <1> 
   856                                  
   857                                  
   858                                   ;OpADR: [13]  ; PUSH opcode 
   859                                  
   860                                  	vV_push 0 
   860                              <1> 
   860 00000A79 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   860 00000A80 4983C704            <1>  add vV_sp , 4
   860                              <1> 
   861                                  
   862                                  
   863                                   ;OpADR: [14]  ; Var assignement					
   864                                  
   865 00000A84 488D3C25[86020000]      	lea rdi , [u_global.text]	
   866 00000A8C 4831C0                  	xor rax , rax	
   867                                  	vV_pop ecx	
   867                              <1> 
   867 00000A8F 4983EF04            <1>  sub vV_sp , 4
   867 00000A93 418B0F              <1>  mov %1 , [vV_sp]
   867                              <1> 
   868 00000A96 83F90B                  	cmp ecx , 11	
   869 00000A99 0F8D03F6FFFF            	jge vV_bound_error	
   870 00000A9F 01C8                    	add eax , ecx	
   871                                  	vV_pop ecx	
   871                              <1> 
   871 00000AA1 4983EF04            <1>  sub vV_sp , 4
   871 00000AA5 418B0F              <1>  mov %1 , [vV_sp]
   871                              <1> 
   872 00000AA8 4801C7                  	add rdi , rax	
   873 00000AAB 4889F8                  	mov rax , rdi	
   874 00000AAE 8808                    	mov BYTE[rax] , cl	
   875                                  
   876                                   ;OpADR: [15]  ; PUSH opcode 
   877                                  
   878                                  	vV_push 101 
   878                              <1> 
   878 00000AB0 41C70765000000      <1>  mov DWORD[vV_sp] , %1
   878 00000AB7 4983C704            <1>  add vV_sp , 4
   878                              <1> 
   879                                  
   880                                  
   881                                   ;OpADR: [16]  ; PUSH opcode 
   882                                  
   883                                  	vV_push 1 
   883                              <1> 
   883 00000ABB 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   883 00000AC2 4983C704            <1>  add vV_sp , 4
   883                              <1> 
   884                                  
   885                                  
   886                                   ;OpADR: [17]  ; Var assignement					
   887                                  
   888 00000AC6 488D3C25[86020000]      	lea rdi , [u_global.text]	
   889 00000ACE 4831C0                  	xor rax , rax	
   890                                  	vV_pop ecx	
   890                              <1> 
   890 00000AD1 4983EF04            <1>  sub vV_sp , 4
   890 00000AD5 418B0F              <1>  mov %1 , [vV_sp]
   890                              <1> 
   891 00000AD8 83F90B                  	cmp ecx , 11	
   892 00000ADB 0F8DC1F5FFFF            	jge vV_bound_error	
   893 00000AE1 01C8                    	add eax , ecx	
   894                                  	vV_pop ecx	
   894                              <1> 
   894 00000AE3 4983EF04            <1>  sub vV_sp , 4
   894 00000AE7 418B0F              <1>  mov %1 , [vV_sp]
   894                              <1> 
   895 00000AEA 4801C7                  	add rdi , rax	
   896 00000AED 4889F8                  	mov rax , rdi	
   897 00000AF0 8808                    	mov BYTE[rax] , cl	
   898                                  
   899                                   ;OpADR: [18]  ; PUSH opcode 
   900                                  
   901                                  	vV_push 108 
   901                              <1> 
   901 00000AF2 41C7076C000000      <1>  mov DWORD[vV_sp] , %1
   901 00000AF9 4983C704            <1>  add vV_sp , 4
   901                              <1> 
   902                                  
   903                                  
   904                                   ;OpADR: [19]  ; PUSH opcode 
   905                                  
   906                                  	vV_push 2 
   906                              <1> 
   906 00000AFD 41C70702000000      <1>  mov DWORD[vV_sp] , %1
   906 00000B04 4983C704            <1>  add vV_sp , 4
   906                              <1> 
   907                                  
   908                                  
   909                                   ;OpADR: [20]  ; Var assignement					
   910                                  
   911 00000B08 488D3C25[86020000]      	lea rdi , [u_global.text]	
   912 00000B10 4831C0                  	xor rax , rax	
   913                                  	vV_pop ecx	
   913                              <1> 
   913 00000B13 4983EF04            <1>  sub vV_sp , 4
   913 00000B17 418B0F              <1>  mov %1 , [vV_sp]
   913                              <1> 
   914 00000B1A 83F90B                  	cmp ecx , 11	
   915 00000B1D 0F8D7FF5FFFF            	jge vV_bound_error	
   916 00000B23 01C8                    	add eax , ecx	
   917                                  	vV_pop ecx	
   917                              <1> 
   917 00000B25 4983EF04            <1>  sub vV_sp , 4
   917 00000B29 418B0F              <1>  mov %1 , [vV_sp]
   917                              <1> 
   918 00000B2C 4801C7                  	add rdi , rax	
   919 00000B2F 4889F8                  	mov rax , rdi	
   920 00000B32 8808                    	mov BYTE[rax] , cl	
   921                                  
   922                                   ;OpADR: [21]  ; PUSH opcode 
   923                                  
   924                                  	vV_push 108 
   924                              <1> 
   924 00000B34 41C7076C000000      <1>  mov DWORD[vV_sp] , %1
   924 00000B3B 4983C704            <1>  add vV_sp , 4
   924                              <1> 
   925                                  
   926                                  
   927                                   ;OpADR: [22]  ; PUSH opcode 
   928                                  
   929                                  	vV_push 3 
   929                              <1> 
   929 00000B3F 41C70703000000      <1>  mov DWORD[vV_sp] , %1
   929 00000B46 4983C704            <1>  add vV_sp , 4
   929                              <1> 
   930                                  
   931                                  
   932                                   ;OpADR: [23]  ; Var assignement					
   933                                  
   934 00000B4A 488D3C25[86020000]      	lea rdi , [u_global.text]	
   935 00000B52 4831C0                  	xor rax , rax	
   936                                  	vV_pop ecx	
   936                              <1> 
   936 00000B55 4983EF04            <1>  sub vV_sp , 4
   936 00000B59 418B0F              <1>  mov %1 , [vV_sp]
   936                              <1> 
   937 00000B5C 83F90B                  	cmp ecx , 11	
   938 00000B5F 0F8D3DF5FFFF            	jge vV_bound_error	
   939 00000B65 01C8                    	add eax , ecx	
   940                                  	vV_pop ecx	
   940                              <1> 
   940 00000B67 4983EF04            <1>  sub vV_sp , 4
   940 00000B6B 418B0F              <1>  mov %1 , [vV_sp]
   940                              <1> 
   941 00000B6E 4801C7                  	add rdi , rax	
   942 00000B71 4889F8                  	mov rax , rdi	
   943 00000B74 8808                    	mov BYTE[rax] , cl	
   944                                  
   945                                   ;OpADR: [24]  ; PUSH opcode 
   946                                  
   947                                  	vV_push 111 
   947                              <1> 
   947 00000B76 41C7076F000000      <1>  mov DWORD[vV_sp] , %1
   947 00000B7D 4983C704            <1>  add vV_sp , 4
   947                              <1> 
   948                                  
   949                                  
   950                                   ;OpADR: [25]  ; PUSH opcode 
   951                                  
   952                                  	vV_push 4 
   952                              <1> 
   952 00000B81 41C70704000000      <1>  mov DWORD[vV_sp] , %1
   952 00000B88 4983C704            <1>  add vV_sp , 4
   952                              <1> 
   953                                  
   954                                  
   955                                   ;OpADR: [26]  ; Var assignement					
   956                                  
   957 00000B8C 488D3C25[86020000]      	lea rdi , [u_global.text]	
   958 00000B94 4831C0                  	xor rax , rax	
   959                                  	vV_pop ecx	
   959                              <1> 
   959 00000B97 4983EF04            <1>  sub vV_sp , 4
   959 00000B9B 418B0F              <1>  mov %1 , [vV_sp]
   959                              <1> 
   960 00000B9E 83F90B                  	cmp ecx , 11	
   961 00000BA1 0F8DFBF4FFFF            	jge vV_bound_error	
   962 00000BA7 01C8                    	add eax , ecx	
   963                                  	vV_pop ecx	
   963                              <1> 
   963 00000BA9 4983EF04            <1>  sub vV_sp , 4
   963 00000BAD 418B0F              <1>  mov %1 , [vV_sp]
   963                              <1> 
   964 00000BB0 4801C7                  	add rdi , rax	
   965 00000BB3 4889F8                  	mov rax , rdi	
   966 00000BB6 8808                    	mov BYTE[rax] , cl	
   967                                  
   968                                   ;OpADR: [27]  ; PUSH opcode 
   969                                  
   970                                  	vV_push 32 
   970                              <1> 
   970 00000BB8 41C70720000000      <1>  mov DWORD[vV_sp] , %1
   970 00000BBF 4983C704            <1>  add vV_sp , 4
   970                              <1> 
   971                                  
   972                                  
   973                                   ;OpADR: [28]  ; PUSH opcode 
   974                                  
   975                                  	vV_push 5 
   975                              <1> 
   975 00000BC3 41C70705000000      <1>  mov DWORD[vV_sp] , %1
   975 00000BCA 4983C704            <1>  add vV_sp , 4
   975                              <1> 
   976                                  
   977                                  
   978                                   ;OpADR: [29]  ; Var assignement					
   979                                  
   980 00000BCE 488D3C25[86020000]      	lea rdi , [u_global.text]	
   981 00000BD6 4831C0                  	xor rax , rax	
   982                                  	vV_pop ecx	
   982                              <1> 
   982 00000BD9 4983EF04            <1>  sub vV_sp , 4
   982 00000BDD 418B0F              <1>  mov %1 , [vV_sp]
   982                              <1> 
   983 00000BE0 83F90B                  	cmp ecx , 11	
   984 00000BE3 0F8DB9F4FFFF            	jge vV_bound_error	
   985 00000BE9 01C8                    	add eax , ecx	
   986                                  	vV_pop ecx	
   986                              <1> 
   986 00000BEB 4983EF04            <1>  sub vV_sp , 4
   986 00000BEF 418B0F              <1>  mov %1 , [vV_sp]
   986                              <1> 
   987 00000BF2 4801C7                  	add rdi , rax	
   988 00000BF5 4889F8                  	mov rax , rdi	
   989 00000BF8 8808                    	mov BYTE[rax] , cl	
   990                                  
   991                                   ;OpADR: [30]  ; PUSH opcode 
   992                                  
   993                                  	vV_push 87 
   993                              <1> 
   993 00000BFA 41C70757000000      <1>  mov DWORD[vV_sp] , %1
   993 00000C01 4983C704            <1>  add vV_sp , 4
   993                              <1> 
   994                                  
   995                                  
   996                                   ;OpADR: [31]  ; PUSH opcode 
   997                                  
   998                                  	vV_push 6 
   998                              <1> 
   998 00000C05 41C70706000000      <1>  mov DWORD[vV_sp] , %1
   998 00000C0C 4983C704            <1>  add vV_sp , 4
   998                              <1> 
   999                                  
  1000                                  
  1001                                   ;OpADR: [32]  ; Var assignement					
  1002                                  
  1003 00000C10 488D3C25[86020000]      	lea rdi , [u_global.text]	
  1004 00000C18 4831C0                  	xor rax , rax	
  1005                                  	vV_pop ecx	
  1005                              <1> 
  1005 00000C1B 4983EF04            <1>  sub vV_sp , 4
  1005 00000C1F 418B0F              <1>  mov %1 , [vV_sp]
  1005                              <1> 
  1006 00000C22 83F90B                  	cmp ecx , 11	
  1007 00000C25 0F8D77F4FFFF            	jge vV_bound_error	
  1008 00000C2B 01C8                    	add eax , ecx	
  1009                                  	vV_pop ecx	
  1009                              <1> 
  1009 00000C2D 4983EF04            <1>  sub vV_sp , 4
  1009 00000C31 418B0F              <1>  mov %1 , [vV_sp]
  1009                              <1> 
  1010 00000C34 4801C7                  	add rdi , rax	
  1011 00000C37 4889F8                  	mov rax , rdi	
  1012 00000C3A 8808                    	mov BYTE[rax] , cl	
  1013                                  
  1014                                   ;OpADR: [33]  ; PUSH opcode 
  1015                                  
  1016                                  	vV_push 111 
  1016                              <1> 
  1016 00000C3C 41C7076F000000      <1>  mov DWORD[vV_sp] , %1
  1016 00000C43 4983C704            <1>  add vV_sp , 4
  1016                              <1> 
  1017                                  
  1018                                  
  1019                                   ;OpADR: [34]  ; PUSH opcode 
  1020                                  
  1021                                  	vV_push 7 
  1021                              <1> 
  1021 00000C47 41C70707000000      <1>  mov DWORD[vV_sp] , %1
  1021 00000C4E 4983C704            <1>  add vV_sp , 4
  1021                              <1> 
  1022                                  
  1023                                  
  1024                                   ;OpADR: [35]  ; Var assignement					
  1025                                  
  1026 00000C52 488D3C25[86020000]      	lea rdi , [u_global.text]	
  1027 00000C5A 4831C0                  	xor rax , rax	
  1028                                  	vV_pop ecx	
  1028                              <1> 
  1028 00000C5D 4983EF04            <1>  sub vV_sp , 4
  1028 00000C61 418B0F              <1>  mov %1 , [vV_sp]
  1028                              <1> 
  1029 00000C64 83F90B                  	cmp ecx , 11	
  1030 00000C67 0F8D35F4FFFF            	jge vV_bound_error	
  1031 00000C6D 01C8                    	add eax , ecx	
  1032                                  	vV_pop ecx	
  1032                              <1> 
  1032 00000C6F 4983EF04            <1>  sub vV_sp , 4
  1032 00000C73 418B0F              <1>  mov %1 , [vV_sp]
  1032                              <1> 
  1033 00000C76 4801C7                  	add rdi , rax	
  1034 00000C79 4889F8                  	mov rax , rdi	
  1035 00000C7C 8808                    	mov BYTE[rax] , cl	
  1036                                  
  1037                                   ;OpADR: [36]  ; PUSH opcode 
  1038                                  
  1039                                  	vV_push 114 
  1039                              <1> 
  1039 00000C7E 41C70772000000      <1>  mov DWORD[vV_sp] , %1
  1039 00000C85 4983C704            <1>  add vV_sp , 4
  1039                              <1> 
  1040                                  
  1041                                  
  1042                                   ;OpADR: [37]  ; PUSH opcode 
  1043                                  
  1044                                  	vV_push 8 
  1044                              <1> 
  1044 00000C89 41C70708000000      <1>  mov DWORD[vV_sp] , %1
  1044 00000C90 4983C704            <1>  add vV_sp , 4
  1044                              <1> 
  1045                                  
  1046                                  
  1047                                   ;OpADR: [38]  ; Var assignement					
  1048                                  
  1049 00000C94 488D3C25[86020000]      	lea rdi , [u_global.text]	
  1050 00000C9C 4831C0                  	xor rax , rax	
  1051                                  	vV_pop ecx	
  1051                              <1> 
  1051 00000C9F 4983EF04            <1>  sub vV_sp , 4
  1051 00000CA3 418B0F              <1>  mov %1 , [vV_sp]
  1051                              <1> 
  1052 00000CA6 83F90B                  	cmp ecx , 11	
  1053 00000CA9 0F8DF3F3FFFF            	jge vV_bound_error	
  1054 00000CAF 01C8                    	add eax , ecx	
  1055                                  	vV_pop ecx	
  1055                              <1> 
  1055 00000CB1 4983EF04            <1>  sub vV_sp , 4
  1055 00000CB5 418B0F              <1>  mov %1 , [vV_sp]
  1055                              <1> 
  1056 00000CB8 4801C7                  	add rdi , rax	
  1057 00000CBB 4889F8                  	mov rax , rdi	
  1058 00000CBE 8808                    	mov BYTE[rax] , cl	
  1059                                  
  1060                                   ;OpADR: [39]  ; PUSH opcode 
  1061                                  
  1062                                  	vV_push 108 
  1062                              <1> 
  1062 00000CC0 41C7076C000000      <1>  mov DWORD[vV_sp] , %1
  1062 00000CC7 4983C704            <1>  add vV_sp , 4
  1062                              <1> 
  1063                                  
  1064                                  
  1065                                   ;OpADR: [40]  ; PUSH opcode 
  1066                                  
  1067                                  	vV_push 9 
  1067                              <1> 
  1067 00000CCB 41C70709000000      <1>  mov DWORD[vV_sp] , %1
  1067 00000CD2 4983C704            <1>  add vV_sp , 4
  1067                              <1> 
  1068                                  
  1069                                  
  1070                                   ;OpADR: [41]  ; Var assignement					
  1071                                  
  1072 00000CD6 488D3C25[86020000]      	lea rdi , [u_global.text]	
  1073 00000CDE 4831C0                  	xor rax , rax	
  1074                                  	vV_pop ecx	
  1074                              <1> 
  1074 00000CE1 4983EF04            <1>  sub vV_sp , 4
  1074 00000CE5 418B0F              <1>  mov %1 , [vV_sp]
  1074                              <1> 
  1075 00000CE8 83F90B                  	cmp ecx , 11	
  1076 00000CEB 0F8DB1F3FFFF            	jge vV_bound_error	
  1077 00000CF1 01C8                    	add eax , ecx	
  1078                                  	vV_pop ecx	
  1078                              <1> 
  1078 00000CF3 4983EF04            <1>  sub vV_sp , 4
  1078 00000CF7 418B0F              <1>  mov %1 , [vV_sp]
  1078                              <1> 
  1079 00000CFA 4801C7                  	add rdi , rax	
  1080 00000CFD 4889F8                  	mov rax , rdi	
  1081 00000D00 8808                    	mov BYTE[rax] , cl	
  1082                                  
  1083                                   ;OpADR: [42]  ; PUSH opcode 
  1084                                  
  1085                                  	vV_push 100 
  1085                              <1> 
  1085 00000D02 41C70764000000      <1>  mov DWORD[vV_sp] , %1
  1085 00000D09 4983C704            <1>  add vV_sp , 4
  1085                              <1> 
  1086                                  
  1087                                  
  1088                                   ;OpADR: [43]  ; PUSH opcode 
  1089                                  
  1090                                  	vV_push 10 
  1090                              <1> 
  1090 00000D0D 41C7070A000000      <1>  mov DWORD[vV_sp] , %1
  1090 00000D14 4983C704            <1>  add vV_sp , 4
  1090                              <1> 
  1091                                  
  1092                                  
  1093                                   ;OpADR: [44]  ; Var assignement					
  1094                                  
  1095 00000D18 488D3C25[86020000]      	lea rdi , [u_global.text]	
  1096 00000D20 4831C0                  	xor rax , rax	
  1097                                  	vV_pop ecx	
  1097                              <1> 
  1097 00000D23 4983EF04            <1>  sub vV_sp , 4
  1097 00000D27 418B0F              <1>  mov %1 , [vV_sp]
  1097                              <1> 
  1098 00000D2A 83F90B                  	cmp ecx , 11	
  1099 00000D2D 0F8D6FF3FFFF            	jge vV_bound_error	
  1100 00000D33 01C8                    	add eax , ecx	
  1101                                  	vV_pop ecx	
  1101                              <1> 
  1101 00000D35 4983EF04            <1>  sub vV_sp , 4
  1101 00000D39 418B0F              <1>  mov %1 , [vV_sp]
  1101                              <1> 
  1102 00000D3C 4801C7                  	add rdi , rax	
  1103 00000D3F 4889F8                  	mov rax , rdi	
  1104 00000D42 8808                    	mov BYTE[rax] , cl	
  1105                                  
  1106                                   ;OpADR: [45]  ; Var invocation					
  1107                                  
  1108 00000D44 4831C0                  	xor rax , rax
  1109 00000D47 488D3C25[44010000]      	lea rdi , [i_global.color_bg]	
  1110 00000D4F 4801C7                  	add rdi , rax	
  1111 00000D52 8A07                    	mov al , [rdi]	
  1112                                  	vV_push eax	
  1112                              <1> 
  1112 00000D54 418907              <1>  mov DWORD[vV_sp] , %1
  1112 00000D57 4983C704            <1>  add vV_sp , 4
  1112                              <1> 
  1113                                  
  1114                                   ;OpADR: [46]  ; Function Call					
  1115                                  
  1116 00000D5B E880F8FFFF              		call term_bg			
  1117                                  
  1118                                   ;OpADR: [47]  ; Function Call with args					
  1119 00000D60 4831C0                  	xor rax , rax
  1120 00000D63 488D3C25[86020000]      	lea rdi , [u_global.text]	
  1121 00000D6B 4889FE                  	mov rsi , rdi	
  1122 00000D6E 4801C6                  	add rsi , rax	
  1123 00000D71 50                      	push rax	
  1124 00000D72 4889E7                  	mov rdi , rsp	
  1125 00000D75 4889F0                  	mov  rax , rsi	
  1126 00000D78 8907                    	mov [rdi] , eax	
  1127 00000D7A E8D5FAFFFF              	call print
  1128 00000D7F 4883C408                add rsp , 8
  1129                                   ;OpADR: [48]  ; Function Call					
  1130                                  
  1131 00000D83 E819FAFFFF              		call default_color			
  1132                                  
  1133                                   ;OpADR: [49]  ; FLUSH opcode					
  1134                                  
  1135 00000D88 E82AF4FFFF              		call vV_io_flush	
  1136                                  
  1137                                   ;OpADR: [50]  ; Var Ref assignement					
  1138                                  
  1139 00000D8D 488D3C25[86020000]      	lea rdi , [u_global.text]	
  1140 00000D95 4831C0                  	xor rax , rax	
  1141 00000D98 B906000000              	mov ecx , 6	
  1142 00000D9D 83F90B                  	cmp ecx , 11	
  1143 00000DA0 0F8DFCF2FFFF            	jge vV_bound_error	
  1144 00000DA6 01C8                    	add eax , ecx	
  1145 00000DA8 4889FE                  	mov rsi , rdi	
  1146 00000DAB 4801C6                  	add rsi , rax	
  1147 00000DAE 4831C0                  	xor rax , rax
  1148 00000DB1 488D3C25[95020000]      	lea rdi , [u_global.partial]	
  1149 00000DB9 4801C7                  	add rdi , rax	
  1150 00000DBC B905000000              	mov ecx , 5	
  1151 00000DC1 F3A4                    	rep movsb	
  1152                                  
  1153                                   ;OpADR: [51]  ; Var Ref assignement					
  1154                                  
  1155 00000DC3 4831C0                  	xor rax , rax
  1156 00000DC6 488D3C25[95020000]      	lea rdi , [u_global.partial]	
  1157 00000DCE 4889FE                  	mov rsi , rdi	
  1158 00000DD1 4801C6                  	add rsi , rax	
  1159 00000DD4 488D3C25[86020000]      	lea rdi , [u_global.text]	
  1160 00000DDC 4831C0                  	xor rax , rax	
  1161 00000DDF B900000000              	mov ecx , 0	
  1162 00000DE4 83F90B                  	cmp ecx , 11	
  1163 00000DE7 0F8DB5F2FFFF            	jge vV_bound_error	
  1164 00000DED 01C8                    	add eax , ecx	
  1165 00000DEF 4801C7                  	add rdi , rax	
  1166 00000DF2 B905000000              	mov ecx , 5	
  1167 00000DF7 F3A4                    	rep movsb	
  1168                                  
  1169                                   ;OpADR: [52]  ; Var invocation					
  1170                                  
  1171 00000DF9 4831C0                  	xor rax , rax
  1172 00000DFC 488D3C25[44010000]      	lea rdi , [i_global.color_bg]	
  1173 00000E04 4801C7                  	add rdi , rax	
  1174 00000E07 8A07                    	mov al , [rdi]	
  1175                                  	vV_push eax	
  1175                              <1> 
  1175 00000E09 418907              <1>  mov DWORD[vV_sp] , %1
  1175 00000E0C 4983C704            <1>  add vV_sp , 4
  1175                              <1> 
  1176                                  
  1177                                   ;OpADR: [53]  ; Function Call					
  1178                                  
  1179 00000E10 E8CBF7FFFF              		call term_bg			
  1180                                  
  1181                                   ;OpADR: [54]  ; Function Call with args					
  1182 00000E15 4831C0                  	xor rax , rax
  1183 00000E18 488D3C25[86020000]      	lea rdi , [u_global.text]	
  1184 00000E20 4889FE                  	mov rsi , rdi	
  1185 00000E23 4801C6                  	add rsi , rax	
  1186 00000E26 50                      	push rax	
  1187 00000E27 4889E7                  	mov rdi , rsp	
  1188 00000E2A 4889F0                  	mov  rax , rsi	
  1189 00000E2D 8907                    	mov [rdi] , eax	
  1190 00000E2F E820FAFFFF              	call print
  1191 00000E34 4883C408                add rsp , 8
  1192                                   ;OpADR: [55]  ; Function Call					
  1193                                  
  1194 00000E38 E864F9FFFF              		call default_color			
  1195                                  
  1196                                   ;OpADR: [56]  ; FLUSH opcode					
  1197                                  
  1198 00000E3D E875F3FFFF              		call vV_io_flush	
  1199                                  		
  1200 00000E42 4889EC                  		mov rsp , rbp
  1201 00000E45 5D                      		pop rbp
  1202 00000E46 C3                      		ret
  1203                                  
  1204                                  ;Transpiled from vV with vVc version 0.0.4
  1205                                  		
  1206                                  		
