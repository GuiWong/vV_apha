     1                                  %include "vVc/assembly/w_runtime/vV_defines.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> ;------------------Variables From Project-------------
     5                              <1> 
     6                              <1> 	;------------------Should come from io module(need refactoring)
     7                              <1> 
     8                              <1> 
     9                              <1> 	%define vV_input_buffer_size 255
    10                              <1> 	%define vV_output_buffer_size 255
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;------------------Implementation Relative-------------
    15                              <1> 
    16                              <1> %deftok vV_sp 'r15'
    17                              <1> 
    18                              <1> %deftok vV_spS 'r14'
    19                              <1> 
    20                              <1> %deftok vV_sdir '-'
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24                              <1> 
    25                              <1> ;------------------Stack Shortcuts--------------------
    26                              <1> 
    27                              <1> %define cell(a) (a*4)
    28                              <1> 
    29                              <1> 
    30                              <1> %define vV_top [vV_sp vV_sdir %+ cell(1)]
    31                              <1> %define vV_2nd [vV_sp vV_sdir %+ cell(2)]
    32                              <1> 
    33                              <1> %define vV_stack_v(a) ([vV_sp vV_sdir %+ cell(a)])
    34                              <1> 
    35                              <1> 
    36                              <1> ;-------------------Out_Format Pointer------------------
    37                              <1> 
    38                              <1> %deftok vV_FORMAT_BIN "vV_ascii_int_to_bin"
    39                              <1> %deftok vV_FORMAT_DEC "vV_ascii_int_to_dec"
    40                              <1> %deftok vV_FORMAT_HEX "vV_ascii_int_to_hex"
    41                              <1> 
    42                              <1> 
    43                              <1> 
    44                              <1> ;--------------------Op Macros--------------------------
    45                              <1> 
    46                              <1> %macro vV_push 1
    47                              <1> 
    48                              <1> 	mov DWORD[vV_sp] , %1
    49                              <1> 	add vV_sp , 4
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro vV_pop 1
    54                              <1> 
    55                              <1> 	sub vV_sp , 4
    56                              <1> 	mov %1 , [vV_sp]
    57                              <1> 	
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro vV_swap 0
    61                              <1> 
    62                              <1> 	mov edx , [vV_sp-4]
    63                              <1> 	mov eax , [vV_sp-8]
    64                              <1> 	mov [vV_sp-8] , edx 
    65                              <1> 	mov [vV_sp-4] , eax 
    66                              <1> 	
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro vV_dup 1
    70                              <1> 
    71                              <1> 	mov ecx , %1
    72                              <1> 	lea rsi , [vV_sp-cell(%1)]
    73                              <1> 	mov rdi , vV_sp
    74                              <1> 		
    75                              <1> 	rep movsd
    76                              <1> 	
    77                              <1> 	add vV_sp , cell(%1)
    78                              <1> 	
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> 
    82                              <1> %macro vV_dec_sp 1
    83                              <1> 
    84                              <1> 	sub vV_sp , cell(%1)
    85                              <1> 	
    86                              <1> %endmacro
    87                              <1> 	
     2                                  %include "vVc/assembly/w_runtime/vV_error_code.asm"		
     1                              <1> 
     2                              <1> %define vV_ERR_IO_I_OVERFLOW 1
     3                              <1> %define vV_ERR_IO_O_OVERFLOW 2
     4                              <1> %define vV_ERR_IO_I_UNVALID 3
     5                              <1> %define vV_ERR_IO_O_UNVALID 4
     6                              <1> %define vV_ERR_IO_I_VALUE_OVERFLOW 5
     7                              <1> 
     8                              <1> 
     9                              <1> %define vV_ERR_VALUE_OVERFLOW 8
    10                              <1> 
    11                              <1> 
    12                              <1> %define vV_ERR_MEMORY_BUFFER_LIMIT 16
    13                              <1> %define vV_ERR_MEMORY_OUT_OF_BOUND 17
     3                                  %include "vVc/assembly/w_runtime/vV_runtime.asm"		
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> 
     4                              <1> ;%include "vVc/assembly/w_runtime/vV_errors.asm"
     5                              <1> ;%include "vVc/assembly/w_runtime/vV_system00.asm"
     6                              <1> ;%include "vVc/assembly/w_runtime/vV_system10.asm"
     7                              <1> ;%include "vVc/assembly/w_runtime/vV_system90.asm"
     8                              <1> 
     9                              <1> 
    10                              <1> global _start
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;extern vV_entry_point			;Defined by main program
    15                              <1> 
    16                              <1> 
    17                              <1> 
    18                              <1> 	
    19                              <1> segment .data 
    20                              <1> 
    21                              <1> 
    22                              <1> 	
    23                              <1> 
    24                              <1> segment .text 
    25                              <1> 
    26                              <1> 
    27                              <1> 	vV_forced_exit:				;rax hold exit code
    28                              <1> 							;Removed default error printing
    29                              <1> 							;This will now happens in errors module
    30                              <1> 
    31 00000000 4889C7              <1> 		mov rdi, rax
    32 00000003 B83C000000          <1> 		mov rax, SYS_EXIT
    33 00000008 0F05                <1> 		syscall
    34                              <1> 		
    35                              <1> 		
    36                              <1> 
    37                              <1> 
    38                              <1> 	save_regs:			;In case called from other process
    39                              <1> 	
    40 0000000A 58                  <1> 		pop rax
    41                              <1> 	
    42 0000000B 53                  <1> 		push rbx
    43 0000000C 4154                <1> 		push r12
    44 0000000E 4155                <1> 		push r13
    45 00000010 4156                <1> 		push r14
    46 00000012 4157                <1> 		push r15
    47                              <1> 		
    48 00000014 50                  <1> 		push rax
    49                              <1> 		
    50 00000015 C3                  <1> 		ret
    51                              <1> 		
    52                              <1> 	restore_regs:
    53                              <1> 	
    54 00000016 58                  <1> 		pop rax
    55                              <1> 	
    56 00000017 415F                <1> 		pop r15
    57 00000019 415E                <1> 		pop r14
    58 0000001B 415D                <1> 		pop r13
    59 0000001D 415C                <1> 		pop r12
    60 0000001F 5B                  <1> 		pop rbx
    61                              <1> 		
    62 00000020 50                  <1> 		push rax
    63                              <1> 		
    64 00000021 C3                  <1> 		ret
    65                              <1> 		
    66                              <1> 	setup_memory:
    67                              <1> 	
    68 00000022 C70425[80000000]00- <1> 		mov DWORD [vV_input_buffer_content] , 0
    68 0000002A 000000              <1>
    69 0000002D C70425[83010000]00- <1> 		mov DWORD [vV_output_buffer_content] , 0
    69 00000035 000000              <1>
    70                              <1> 		
    71                              <1> 		;mov DWORD [endofline] , 0xa
    72                              <1> 		
    73 00000038 C70425[28010000]-   <1> 		mov DWORD[vV_sys_format_mode] , vV_ascii_int_to_dec
    73 0000003F [6E040000]          <1>
    74                              <1> 		
    75 00000043 C3                  <1> 		ret
    76                              <1> 		
    77                              <1> 		
    78                              <1> 	
    79                              <1> 		
    80                              <1> _start:				;Entry point of Every Program
    81                              <1> 	
    82                              <1> 		
    83                              <1> 
    84 00000044 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
    85                              <1> 	
    86 00000047 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
    86 00000049 [5604040000000000]  <1>
    87                              <1> 	
    88 00000051 E8B4FFFFFF          <1> 	call save_regs				;just in case
    89                              <1> 	
    90                              <1> 	
    91 00000056 E8C7FFFFFF          <1> 	call setup_memory			;all memory setup at start
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
    95 0000005B E87B040000          <1> 	call vV_entry_point			;Start the program 
    96                              <1> 	
    97                              <1> 	
    98 00000060 E8B1FFFFFF          <1> 	call restore_regs
    99                              <1> 	
   100                              <1> 
   101                              <1> ;------------------------------------------------------------------------------
   102                              <1> 
   103 00000065 B83C000000          <1> 	mov rax, SYS_EXIT
   104 0000006A BF00000000          <1> 	mov rdi, 0		;Normal exit procedure (no code returned from main)
   105 0000006F 0F05                <1> 	syscall
   106                              <1> 	
   107                              <1> 	
   108                              <1> 	
   109                              <1> 	
   110                              <1> 	
     4                                  %include "vVc/assembly/w_runtime/vV_system00.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5 00000000 <res 00000040>      <1> 	vV_sys_start:	resd 16		;not used now
     6                              <1> 
     7                              <1> 	
     8                              <1> 	
     9                              <1> segment .data
    10                              <1> 
    11                              <1> 
    12                              <1> ;--Start of Memory----------------------------------------------------------
    13                              <1> 
    14                              <1> 	ALIGN 8
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;---------------------Error Managment----------
    18                              <1> 
    19                              <1> 
    20                              <1> ;error vectors	
    21                              <1> 	
    22                              <1> 	vV_error_vectors:
    23 00000000 [FA00000000000000]- <1> 	times 17 dq vV_error_unhandeled
    23 00000000 <rept>              <1>
    24 00000088 [9D00000000000000]  <1> 	dq vV_error_invalid_index
    25 00000090 [FA00000000000000]- <1> 	times 14 dq vV_error_unhandeled
    25 00000090 <rept>              <1>
    26                              <1> 
    27                              <1> 	
    28                              <1> 	
    29                              <1> segment .text
    30                              <1> 
    31                              <1> 
    32                              <1> vV_error:
    33                              <1> 
    34 00000071 52                  <1> 	push rdx
    35                              <1> 	
    36 00000072 4831D2              <1> 	xor rdx , rdx
    37                              <1> 	
    38 00000075 88E2                <1> 	mov dl , ah
    39                              <1> 	
    40 00000077 C0E203              <1> 	shl dl , 3
    41                              <1> 	
    42 0000007A 67FF92[00000000]    <1> 	call [vV_error_vectors + edx]
    43                              <1> 	
    44                              <1> 	
    45 00000081 5A                  <1> 	pop rdx
    46                              <1> 	
    47 00000082 C3                  <1> 	ret
    48                              <1> 	
    49                              <1> 	
    50                              <1> vV_error_fatal:
    51                              <1> 
    52                              <1> 	
    53 00000083 88D0                <1> 	mov al , dl
    54                              <1> 	
    55 00000085 C0E803              <1> 	shr al , 3
    56                              <1> 
    57 00000088 E873FFFFFF          <1> 	call vV_forced_exit
    58                              <1> 	
    59                              <1> vV_bound_error:
    60                              <1> 
    61 0000008D 89FB                <1> 	mov ebx , edi
    62 0000008F B411                <1> 	mov ah , vV_ERR_MEMORY_OUT_OF_BOUND
    63 00000091 E8DBFFFFFF          <1> 	call vV_error	
    64                              <1> 	
    65 00000096 B011                <1> 	mov al , vV_ERR_MEMORY_OUT_OF_BOUND
    66 00000098 E863FFFFFF          <1> 	call vV_forced_exit
    67                              <1> 	
    68                              <1> 	
    69                              <1> 	
    70                              <1> 	
    71                              <1> 	
    72                              <1> 	
    73                              <1> 
    74                              <1> 	
     5                                  %include "vVc/assembly/w_runtime/vV_errors.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> segment .bss
     5                              <1> 
     6                              <1> 
     7                              <1> 	ALIGNB 4
     8                              <1> 		
     9                              <1> 	vV_error_buffer:
    10 00000040 <res 00000040>      <1> 	resb 64
    11                              <1> 	vV_end_err_buff:
    12                              <1> 	vV_error_buffer_size equ vV_end_err_buff-vV_error_buffer
    13                              <1> 
    14                              <1> 
    15                              <1> 
    16                              <1> 
    17                              <1> segment .data
    18                              <1> 
    19                              <1> ;Error String	
    20                              <1> 
    21                              <1> 	
    22                              <1> 	vV_error_msg:
    23 00000100 556E68616E64656C65- <1> 	.default: db "Unhandeled Error "
    23 00000109 64204572726F7220    <1>
    24                              <1> 	default_size equ $-.default
    25 00000111 496E76616C69642049- <1> 	.invalid_index: db "Invalid Index Error : "
    25 0000011A 6E646578204572726F- <1>
    25 00000123 72203A20            <1>
    26                              <1> 	inv_indx_size equ $-.invalid_index
    27                              <1> 
    28                              <1> 
    29                              <1> 
    30                              <1> segment .text
    31                              <1> 
    32                              <1> 
    33                              <1> vV_error_invalid_index:
    34                              <1> 
    35                              <1> 
    36 0000009D 56                  <1> 	push rsi
    37 0000009E 57                  <1> 	push rdi	;Save reg used by syscall
    38 0000009F 4151                <1> 	push r9	;and by conversion func
    39 000000A1 53                  <1> 	push rbx	;Save Arg
    40                              <1> 	
    41 000000A2 BA16000000          <1> 	mov edx , inv_indx_size				;string lenght
    42 000000A7 48BE-               <1> 	mov rsi , vV_error_msg.invalid_index			;strng ptr
    42 000000A9 [1101000000000000]  <1>
    43 000000B1 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    44 000000B6 B801000000          <1> 	mov rax , 1				; Write sysCall
    45 000000BB 0F05                <1> 	syscall	
    46                              <1> 	
    47                              <1> 	
    48 000000BD 58                  <1> 	pop rax
    49                              <1> 	
    50 000000BE BF[40000000]        <1> 	mov edi , vV_error_buffer
    51 000000C3 41B940000000        <1> 	mov r9d , vV_error_buffer_size
    52 000000C9 E8A0030000          <1> 	call vV_ascii_int_to_dec	
    53                              <1> 
    54 000000CE 67C680[40000000]0A  <1> 	mov BYTE[vV_error_buffer + eax] , 0xa
    55                              <1> 	
    56 000000D6 FFC0                <1> 	inc eax
    57                              <1> 	
    58 000000D8 89C2                <1> 	mov edx , eax				;string lenght
    59 000000DA 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
    59 000000DC [4000000000000000]  <1>
    60 000000E4 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    61 000000E9 B801000000          <1> 	mov rax , 1				; Write sysCall
    62 000000EE 0F05                <1> 	syscall
    63                              <1> 	
    64 000000F0 4159                <1> 	pop r9
    65 000000F2 5F                  <1> 	pop rdi
    66 000000F3 5E                  <1> 	pop rsi
    67                              <1> 	
    68 000000F4 E88AFFFFFF          <1> 	call vV_error_fatal
    69                              <1> 	
    70 000000F9 C3                  <1> 	ret
    71                              <1> 	
    72                              <1> 	
    73                              <1> 	
    74                              <1> 
    75                              <1> 	
    76                              <1> vV_error_unhandeled:
    77                              <1> 
    78                              <1> 
    79 000000FA 56                  <1> 	push rsi
    80 000000FB 57                  <1> 	push rdi	;Save reg used by syscall
    81 000000FC 4151                <1> 	push r9	;and by conversion func
    82                              <1> 	
    83                              <1> 	
    84                              <1> ;push rax	;Save flags ( and value)
    85                              <1> 
    86 000000FE 53                  <1> 	push rbx	;Save Arg
    87 000000FF 52                  <1> push rdx		;Save error code
    88                              <1> 	
    89                              <1> 	
    90 00000100 BA11000000          <1> 	mov edx , default_size				;string lenght
    91 00000105 48BE-               <1> 	mov rsi , vV_error_msg.default			;strng ptr
    91 00000107 [0001000000000000]  <1>
    92 0000010F BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    93 00000114 B801000000          <1> 	mov rax , 1				; Write sysCall
    94 00000119 0F05                <1> 	syscall	
    95                              <1> 	
    96                              <1> 	
    97 0000011B 58                  <1> pop rax	;error code
    98                              <1> 
    99                              <1> 
   100 0000011C C0E803              <1> 	shr al , 3
   101                              <1> 	
   102                              <1> 	
   103 0000011F BF[40000000]        <1> 	mov edi , vV_error_buffer
   104 00000124 41B940000000        <1> 	mov r9d , vV_error_buffer_size
   105                              <1> 	
   106                              <1> 
   107 0000012A E83F030000          <1> 	call vV_ascii_int_to_dec	
   108                              <1> 	
   109                              <1> 		
   110                              <1> 	
   111 0000012F 67C680[40000000]20  <1> 	mov BYTE[vV_error_buffer + eax] , ' '
   112                              <1> 	
   113                              <1> 	
   114                              <1> 	
   115                              <1> 	
   116 00000137 67488DB8[41000000]  <1> 	lea rdi , [vV_error_buffer + eax + 1]
   117 0000013F 4129F9              <1> 	sub r9d , edi
   118                              <1> 	
   119 00000142 58                  <1> 	pop rax
   120                              <1> 	
   121 00000143 E826030000          <1> 	call vV_ascii_int_to_dec
   122                              <1> 	
   123 00000148 674C8D0C07          <1> 	lea r9 , [edi + eax]
   124                              <1> 	
   125 0000014D 41C6010A            <1> 	mov BYTE[r9] , 0xa
   126                              <1> 	
   127 00000151 49FFC1              <1> 	inc r9
   128                              <1> 	
   129 00000154 4981E9[40000000]    <1> 	sub r9 , vV_error_buffer
   130                              <1> 	
   131 0000015B 4489CA              <1> 	mov edx , r9d				;string lenght
   132 0000015E 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
   132 00000160 [4000000000000000]  <1>
   133 00000168 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
   134 0000016D B801000000          <1> 	mov rax , 1				; Write sysCall
   135 00000172 0F05                <1> 	syscall
   136                              <1> 	
   137 00000174 4159                <1> 	pop r9
   138 00000176 5F                  <1> 	pop rdi
   139 00000177 5E                  <1> 	pop rsi
   140                              <1> 	
   141                              <1> 	
   142                              <1> 	
   143                              <1> 	
   144 00000178 C3                  <1> 	ret
   145                              <1> 	
   146                              <1> 	
   147                              <1> 	
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151                              <1> 		
   152                              <1> 		
   153                              <1> 		
   154                              <1> 		
   155                              <1> 		
   156                              <1> 		
   157                              <1> 		
   158                              <1> 		
   159                              <1> 		
   160                              <1> 		
   161                              <1> 		
   162                              <1> 		
   163                              <1> 		
   164                              <1> 		
   165                              <1> 		
   166                              <1> 		
   167                              <1> 
     6                                  %include "vVc/assembly/w_runtime/vV_system10.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5                              <1> 	
     6                              <1> 	
     7                              <1> 	;------------Input Buffer
     8                              <1> 
     9                              <1> 
    10                              <1> 	
    11 00000080 <res 00000004>      <1> 	vV_input_buffer_content: resb 4			;Input Buffer current content
    12 00000084 <res 000000FF>      <1> 	vV_input_buffer: resb vV_input_buffer_size		;Input Buffer of 256 char
    13                              <1> 	
    14                              <1> 	
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;------------Output Buffer
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22 00000183 <res 00000004>      <1> 	vV_output_buffer_content: resb 4			;Output Buffer current content
    23 00000187 <res 000000FF>      <1> 	vV_output_buffer: resb vV_output_buffer_size		;Output Buffer of 256 char
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> 	
    28                              <1> ;------------Number Buffer
    29                              <1> 
    30                              <1> 
    31                              <1> 	
    32                              <1> 	
    33                              <1> 	;w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34                              <1> 	;endofline: resb 1					;Maybe Not Needed
    35                              <1> 	
    36                              <1> 
    37                              <1> 
    38                              <1> segment .data
    39 00000127 90                  <1> 	ALIGN 4
    40 00000128 [6E040000]          <1> 	vV_sys_format_mode: dd vV_ascii_int_to_dec
     7                                  %include "vVc/assembly/w_runtime/vV_io.asm"			
     1                              <1> 
     2                              <1> 
     3                              <1> ;%include "vVc/assembly/w_runtime/vV_ascii.asm"
     4                              <1> 
     5                              <1> 
     6                              <1> ;Group all read/wrie syscalls
     7                              <1> 
     8                              <1> ;global convert_to_string
     9                              <1> ;global convert_to_int
    10                              <1> 
    11                              <1> ;extern vV_input_buffer
    12                              <1> ;extern vV_output_buffer
    13                              <1> ;extern w_number_buffer
    14                              <1> 
    15                              <1> global wio_out
    16                              <1> global wio_get
    17                              <1> global wio_get_str_raw
    18                              <1> global wio_get_str_null
    19                              <1> global wio_get_str_nline
    20                              <1> global wio_move_in_to_out
    21                              <1> 
    22                              <1> 
    23                              <1> segment .text 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> 
    28                              <1> 
    29                              <1> vV_io_flush:
    30                              <1> 	
    31                              <1> 	
    32                              <1> 	
    33 00000179 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    34                              <1> 	
    35 00000180 C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    35 00000188 000000              <1>
    36                              <1> 	
    37 0000018B 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    37 0000018D [8701000000000000]  <1>
    38                              <1> 		
    39 00000195 67C682[87010000]0A  <1> 	mov BYTE[vV_output_buffer + edx] , 0xa
    40 0000019D FFC2                <1> 	inc edx
    41                              <1> 		
    42 0000019F BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    43 000001A4 B801000000          <1> 	mov rax , 1					; Write sysCall
    44 000001A9 0F05                <1> 	syscall
    45                              <1> 	
    46                              <1> 	
    47                              <1> 	
    48 000001AB C3                  <1> 	ret
    49                              <1> 	
    50                              <1> 		
    51                              <1> ;-------------------------------------------------------------------------------
    52                              <1> ;-------------------------------------------------------------------------------
    53                              <1> 	
    54                              <1> vV_io_out_buffer_default:
    55                              <1> 
    56 000001AC 448B1425[28010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    57 000001B4 E80F000000          <1> 	call vV_io_out_buffer
    58 000001B9 C3                  <1> 	ret
    59                              <1> 	
    60                              <1> vV_io_out_default:
    61                              <1> 
    62 000001BA 448B1425[28010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    63 000001C2 E80C000000          <1> 	call vV_io_out
    64 000001C7 C3                  <1> 	ret
    65                              <1> 
    66                              <1> ;-------------------------------------------------------------------------------
    67                              <1> ;-------------------------------------------------------------------------------
    68                              <1> 	
    69                              <1> vV_io_out_buffer:				;print str repr of Top Of Stack element
    70                              <1> 						
    71                              <1> 						
    72 000001C8 E811000000          <1> 	call vV_io_out01			
    73 000001CD E84A000000          <1> 	call vV_io_out_buffer_end
    74 000001D2 C3                  <1> 	ret
    75                              <1> 
    76                              <1> ;-------------------------------------------------------------------------------
    77                              <1> 		
    78                              <1> vV_io_out:					;print str repr of Top Of Stack element
    79                              <1> 
    80                              <1> 
    81 000001D3 E806000000          <1> 	call vV_io_out01					
    82 000001D8 E826000000          <1> 	call vV_io_out_direct_end
    83 000001DD C3                  <1> 	ret
    84                              <1> 
    85                              <1> ;-------------------------------------------------------------------------------	
    86                              <1> ;-------------------------------------------------------------------------------	
    87                              <1> 
    88                              <1> vV_io_out01:					;print str repr of Top Of Stack element
    89                              <1> 
    90                              <1> 
    91                              <1> 	vV_pop eax				;get value in eax
    91                              <2> 
    91 000001DE 4983EF04            <2>  sub vV_sp , 4
    91 000001E2 418B07              <2>  mov %1 , [vV_sp]
    91                              <2> 
    92                              <1> 	
    93 000001E5 BF[87010000]        <1> 	mov edi , vV_output_buffer		;set dest as O_buff
    94 000001EA 033C25[83010000]    <1> 	add edi ,DWORD[vV_output_buffer_content]		;set offset to start of freespace
    95                              <1> 	
    96 000001F1 57                  <1> push rdi					;Save buffer origin
    97                              <1> 	
    98 000001F2 41B9FF000000        <1> 	mov r9 , 255				;set Max buffer available	
    99 000001F8 4129F9              <1> 	sub r9d , edi				;#TODO: Stop HardCoding VALUES!!!!
   100 000001FB 41FFD2              <1> 		call r10			;call current conversion format function
   101 000001FE 4831FF              <1> 	xor rdi , rdi
   102                              <1> 	
   103 00000201 5F                  <1> pop rdi						;recover Buffer origin
   104                              <1> 	
   105 00000202 C3                  <1> 	ret
   106                              <1> 
   107                              <1> ;-------------------------------------------------------------------------------	
   108                              <1> 	
   109                              <1> vV_io_out_direct_end:
   110                              <1> 
   111                              <1> 
   112                              <1> 
   113 00000203 67C604070A          <1> 	mov BYTE[edi + eax] , 0xa		;add new_line
   114                              <1> 		
   115 00000208 FFC0                <1> 		inc eax
   116                              <1> 		
   117 0000020A 89C2                <1> 		mov edx , eax				;string lenght		
   118 0000020C 4889FE              <1> 		mov rsi , rdi				;strng ptr
   119 0000020F BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   120 00000214 B801000000          <1> 		mov rax , 1				; Write sysCall
   121 00000219 0F05                <1> 		syscall
   122                              <1> 	
   123 0000021B C3                  <1> 		ret
   124                              <1> 
   125                              <1> ;-------------------------------------------------------------------------------		
   126                              <1> 		
   127                              <1> vV_io_out_buffer_end:
   128                              <1> 
   129 0000021C 010425[83010000]    <1> 	add [vV_output_buffer_content] , eax
   130                              <1> 
   131 00000223 C3                  <1> 	ret
   132                              <1> 
   133                              <1> ;-------------------------------------------------------------------------------
   134                              <1> 
   135                              <1> vV_io_out_char:
   136                              <1> 
   137                              <1> 	
   138 00000224 E827000000          <1> 	call vV_io_read_char
   139 00000229 E8D5FFFFFF          <1> 	call vV_io_out_direct_end
   140                              <1> 	
   141 0000022E C3                  <1> 	ret
   142                              <1> 	
   143                              <1> vV_io_out_packed_char:
   144                              <1> 
   145                              <1> 	
   146 0000022F E842000000          <1> 	call vV_io_read_packed_char
   147                              <1> 	
   148 00000234 E8CAFFFFFF          <1> 	call vV_io_out_direct_end
   149                              <1> 	
   150 00000239 C3                  <1> 	ret
   151                              <1> 	
   152                              <1> vV_io_out_char_buffer:
   153                              <1> 
   154 0000023A E811000000          <1> 	call vV_io_read_char
   155                              <1> 	
   156 0000023F E8D8FFFFFF          <1> 	call vV_io_out_buffer_end
   157                              <1> 	
   158 00000244 C3                  <1> 	ret
   159                              <1> 	
   160                              <1> vV_io_out_packed_char_buffer:
   161                              <1> 
   162 00000245 E82C000000          <1> 	call vV_io_read_packed_char
   163                              <1> 	
   164 0000024A E8CDFFFFFF          <1> 	call vV_io_out_buffer_end
   165                              <1> 	
   166 0000024F C3                  <1> 	ret
   167                              <1> 	
   168                              <1> vV_io_read_char:
   169                              <1> 
   170                              <1> 	vV_pop eax
   170                              <2> 
   170 00000250 4983EF04            <2>  sub vV_sp , 4
   170 00000254 418B07              <2>  mov %1 , [vV_sp]
   170                              <2> 
   171                              <1> 	
   172 00000257 48BF-               <1> 	mov rdi , vV_output_buffer
   172 00000259 [8701000000000000]  <1>
   173 00000261 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   174                              <1> 	
   175 00000268 678807              <1> 	mov [edi] , al
   176                              <1> 	
   177 0000026B BF[87010000]        <1> 	mov edi , vV_output_buffer
   178 00000270 B801000000          <1> 	mov eax , 1
   179                              <1> 	
   180 00000275 C3                  <1> 	ret	
   181                              <1> 	
   182                              <1> vV_io_read_packed_char:
   183                              <1> 
   184                              <1> 	vV_pop eax
   184                              <2> 
   184 00000276 4983EF04            <2>  sub vV_sp , 4
   184 0000027A 418B07              <2>  mov %1 , [vV_sp]
   184                              <2> 
   185                              <1> 	
   186 0000027D 48BF-               <1> 	mov rdi , vV_output_buffer
   186 0000027F [8701000000000000]  <1>
   187 00000287 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   188                              <1> 	
   189 0000028E 678907              <1> 	mov [edi] , eax
   190                              <1> 	
   191 00000291 BF[87010000]        <1> 	mov edi , vV_output_buffer
   192 00000296 B804000000          <1> 	mov eax , 4	
   193                              <1> 	
   194 0000029B C3                  <1> 	ret
   195                              <1> 		
   196                              <1> ;-------------------------------------------------------------------------------
   197                              <1> ;-------------------------------------------------------------------------------
   198                              <1> ;-------------------------------------------------------------------------------
   199                              <1> ;-------------------------------------------------------------------------------
   200                              <1> ;-------------------------------------------------------------------------------
   201                              <1> ;-------------------------------------------------------------------------------
   202                              <1> ;-------------------------------------------------------------------------------
   203                              <1> 	
   204                              <1> vV_io_read:
   205                              <1> 
   206                              <1> 								
   207 0000029C 48BE-               <1> 		mov rsi , vV_input_buffer		;ptr to string destination	
   207 0000029E [8400000000000000]  <1>
   208 000002A6 BAFF000000          <1> 		mov edx , vV_input_buffer_size				;string lenght	
   209 000002AB BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   210 000002B0 B800000000          <1> 		mov rax , 0				; read sysCall
   211                              <1> 		
   212 000002B5 0F05                <1> 		syscall
   213                              <1> 	
   214                              <1> ;-------------Buffer_Overflow_Execption  
   215                              <1> 
   216                              <1> 
   217                              <1> 
   218 000002B7 3DFF000000          <1> 		cmp eax , 255				;Check if Buffer Is Full
   219                              <1> 		
   220 000002BC 721F                <1> 			jb .no_overflow
   221                              <1> 			
   222 000002BE 803C25[82010000]0A  <1> 		cmp BYTE[vV_input_buffer + vV_input_buffer_size-1] , 0xa	;Check if Buffer end with "\n"
   223                              <1> 		
   224 000002C6 7415                <1> 			je .no_overflow
   225                              <1> 		
   226                              <1> 		
   227 000002C8 50                  <1> 			push rax
   228 000002C9 53                  <1> 			push rbx
   229                              <1> 		
   230 000002CA B401                <1> 			mov ah , vV_ERR_IO_I_OVERFLOW
   231 000002CC 6683C800            <1> 			or ax , 0
   232 000002D0 4831DB              <1> 			xor rbx , rbx
   233 000002D3 4889F3              <1> 			mov rbx , rsi
   234                              <1> 		
   235 000002D6 E896FDFFFF          <1> 			call vV_error
   236                              <1> 		
   237 000002DB 5B                  <1> 			pop rbx
   238 000002DC 58                  <1> 			pop rax
   239                              <1> 		
   240                              <1> 			;ret
   241                              <1> 		
   242                              <1> 		.no_overflow:
   243                              <1> 		
   244 000002DD C3                  <1> 			ret
   245                              <1> 		
   246                              <1> 		
   247                              <1> 	
   248                              <1> 	
   249                              <1> vV_io_get_default:
   250                              <1> 
   251 000002DE 41BA[7E030000]      <1> 	mov r10d , vV_ascii_as_dec			;TODO: default settings
   252 000002E4 E801000000          <1> 	call vV_io_get
   253 000002E9 C3                  <1> 	ret
   254                              <1> 	
   255                              <1> 	
   256                              <1> vV_io_get:						;convert inputed value to 
   257                              <1> 							;32bit int, push it on
   258                              <1> 							;the stack
   259 000002EA E8ADFFFFFF          <1> 	call vV_io_read
   260                              <1> 		
   261                              <1> ;----------------------------------------------	
   262                              <1> 
   263 000002EF 53                  <1> 	push rbx				;Save rbx (conversion uses it) 
   264                              <1> 
   265 000002F0 89C3                <1> 		mov ebx , eax 			;send char count by ebx
   266 000002F2 31FF                <1> 		xor edi , edi 			;zero out counter
   267 000002F4 BE[84000000]        <1> 		mov esi , vV_input_buffer	;Set source to I_buffer
   268                              <1> 		
   269                              <1> 
   270 000002F9 41FFD2              <1> 		call r10
   271                              <1> 		
   272 000002FC 5B                  <1> 	pop rbx
   273                              <1> 	
   274                              <1> 		vV_push eax
   274                              <2> 
   274 000002FD 418907              <2>  mov DWORD[vV_sp] , %1
   274 00000300 4983C704            <2>  add vV_sp , 4
   274                              <2> 
   275                              <1> 		
   276 00000304 C3                  <1> 		ret
   277                              <1> 
   278                              <1> 
   279                              <1> ;-------------------------------------------------------------------------------
   280                              <1> ;-------------------------------------------------------------------------------
   281                              <1> 
   282                              <1> 
   283                              <1> vV_io_get_char:
   284                              <1> 
   285                              <1> 
   286 00000305 E892FFFFFF          <1> 	call vV_io_read
   287                              <1> 	
   288 0000030A 31D2                <1> 	xor edx , edx
   289                              <1> 	
   290 0000030C 8A1425[84000000]    <1> 	mov dl , [vV_input_buffer]
   291                              <1> 	
   292                              <1> 	vV_push edx
   292                              <2> 
   292 00000313 418917              <2>  mov DWORD[vV_sp] , %1
   292 00000316 4983C704            <2>  add vV_sp , 4
   292                              <2> 
   293                              <1> 	
   294 0000031A C3                  <1> 	ret
   295                              <1> 	
   296                              <1> vV_io_get_packed_char:
   297                              <1> 
   298 0000031B C70425[84000000]00- <1> 	mov DWORD [vV_input_buffer] , 0
   298 00000323 000000              <1>
   299                              <1> 
   300 00000326 E871FFFFFF          <1> 	call vV_io_read
   301                              <1> 	
   302 0000032B 31D2                <1> 	xor edx , edx
   303                              <1> 	
   304 0000032D 8B1425[84000000]    <1> 	mov edx, [vV_input_buffer]
   305                              <1> 	
   306                              <1> 	vV_push edx
   306                              <2> 
   306 00000334 418917              <2>  mov DWORD[vV_sp] , %1
   306 00000337 4983C704            <2>  add vV_sp , 4
   306                              <2> 
   307                              <1> 	
   308 0000033B C3                  <1> 	ret
   309                              <1> 	
   310                              <1> 		
   311                              <1> 		
   312                              <1> 
   313                              <1> 
   314                              <1> 
     8                                  %include "vVc/assembly/w_runtime/vV_ascii.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> segment .text 
     4                              <1> 
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> vV_ascii_as_hex2:						;Jumped to from parse_num OR called
     9                              <1> 								;use edi as counter/offset in string !Set if direct call
    10                              <1> 								;use esi as source string
    11                              <1> 								;concatenate result in eax
    12                              <1> 								;parse digit in cl
    13                              <1> 								
    14                              <1> 								;use r8 for base
    15                              <1> 								;use r9 for max_value
    16                              <1> 								
    17                              <1> 							
    18                              <1> 	;mov r8 , 16	
    19                              <1> 	
    20                              <1> 	.start_loop:
    21                              <1> 	
    22 0000033C 678A0C3E            <1> 		mov cl , [esi + edi]
    23                              <1> 	
    24                              <1> 		
    25 00000340 80F930              <1> 		cmp cl , 48
    26                              <1> 		
    27 00000343 7265                <1> 			jb vV_ascii_unvalid
    28                              <1> 			
    29 00000345 80F93A              <1> 		cmp cl , 58
    30                              <1> 		
    31 00000348 720D                <1> 			jb .pass_int
    32                              <1> 			
    33 0000034A 80F966              <1> 			cmp cl , 'f'
    34                              <1> 			
    35 0000034D 775B                <1> 				ja vV_ascii_unvalid
    36                              <1> 			
    37 0000034F 80F961              <1> 			cmp cl , 'a'
    38                              <1> 			
    39 00000352 7256                <1> 				jb vV_ascii_unvalid
    40                              <1> 				
    41 00000354 80E927              <1> 			sub cl , 39
    42                              <1> 				
    43                              <1> 			
    44                              <1> 		.pass_int:	
    45                              <1> 			
    46 00000357 80E930              <1> 		sub cl , '0'
    47                              <1> 		
    48                              <1> 		
    49                              <1> 		
    50 0000035A 31D2                <1> 		xor edx , edx
    51                              <1> 		
    52 0000035C F8                  <1> 		clc
    53                              <1> 		
    54 0000035D 41F7E0              <1> 		mul r8d
    55                              <1> 		
    56 00000360 725D                <1> 		jc vV_ascii_overflow
    57                              <1> 		
    58 00000362 01C8                <1> 		add eax , ecx
    59                              <1> 		
    60                              <1> 		.pass02:
    61                              <1> 		
    62 00000364 FFC7                <1> 		inc edi
    63                              <1> 		
    64 00000366 39DF                <1> 		cmp edi , ebx
    65                              <1> 		
    66 00000368 72D2                <1> 		jb .start_loop
    67                              <1> 
    68                              <1> 		
    69 0000036A C3                  <1> 		ret	
    70                              <1> 		
    71                              <1> 		
    72                              <1> ;
    73                              <1> ;				ebx		esi
    74                              <1> ;	ascii_to_format( buffer_size , buffer_adress ) 
    75                              <1> ;		
    76                              <1> ;
    77                              <1> ;	set:	rcx,rdx (rax) to 0
    78                              <1> ;		r8,r9
    79                              <1> ;		
    80                              <1> ;	call: specialized dexodefunction
    81                              <1> 		
    82                              <1> vV_ascii_as_hex:
    83                              <1> 	
    84 0000036B FFCB                <1> 	dec ebx
    85 0000036D 41B810000000        <1> 	mov r8 , 16	
    86 00000373 4831C0              <1> 	xor rax , rax 		;(just in case not switching from dec mode)			
    87 00000376 4831C9              <1> 	xor rcx , rcx
    88 00000379 4831D2              <1> 	xor rdx , rdx
    89 0000037C EBBE                <1> 	jmp vV_ascii_as_hex2
    90                              <1> 
    91                              <1> vV_ascii_as_dec:
    92                              <1> 
    93 0000037E FFCB                <1> 	dec ebx
    94 00000380 41B80A000000        <1> 	mov r8 , 10			
    95 00000386 41B93A000000        <1> 	mov r9 , 58
    96 0000038C 4831C9              <1> 	xor rcx , rcx
    97 0000038F 4831D2              <1> 	xor rdx , rdx
    98 00000392 EB5E                <1> 	jmp vV_ascii_as_decbin
    99                              <1> 
   100                              <1> vV_ascii_as_bin:
   101                              <1> 
   102 00000394 FFCB                <1> 	dec ebx
   103 00000396 41B802000000        <1> 	mov r8 , 2			
   104 0000039C 41B932000000        <1> 	mov r9 , 50
   105 000003A2 4831C9              <1> 	xor rcx , rcx
   106 000003A5 4831D2              <1> 	xor rdx , rdx
   107                              <1> 	
   108 000003A8 EB48                <1> 	jmp vV_ascii_as_decbin
   109                              <1> 	
   110                              <1> vV_ascii_unvalid:
   111                              <1> 	
   112                              <1> 		;mov rax , 24;	#TODO: Defined Errors code/ data in file
   113                              <1> 		;xor rdx , rdx
   114                              <1> 		;mov dl , cl
   115                              <1> 		
   116                              <1> 		;call w_forced_exit
   117                              <1> 		
   118 000003AA 50                  <1> 		push rax
   119 000003AB 53                  <1> 		push rbx
   120                              <1> 		
   121 000003AC B403                <1> 		mov ah , vV_ERR_IO_I_UNVALID
   122 000003AE 6683C800            <1> 		or ax , 0
   123 000003B2 4831DB              <1> 		xor rbx , rbx
   124 000003B5 88CB                <1> 		mov bl , cl
   125                              <1> 		
   126 000003B7 E8B5FCFFFF          <1> 		call vV_error
   127                              <1> 		
   128 000003BC 5B                  <1> 		pop rbx
   129 000003BD 58                  <1> 		pop rax
   130                              <1> 		
   131 000003BE C3                  <1> 		ret
   132                              <1> 		
   133                              <1> 		
   134                              <1> 		
   135                              <1> 		
   136                              <1> vV_ascii_overflow:
   137                              <1> 	
   138 000003BF 50                  <1> 		push rax
   139 000003C0 53                  <1> 		push rbx
   140                              <1> 		
   141 000003C1 4831DB              <1> 		xor rbx , rbx
   142 000003C4 4889C3              <1> 		mov rbx , rax
   143                              <1> 		
   144                              <1> 		;or rbx , 0x00010000
   145                              <1> 		
   146 000003C7 B401                <1> 		mov ah , vV_ERR_IO_I_OVERFLOW
   147 000003C9 6683C800            <1> 		or ax , 0
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151 000003CD E89FFCFFFF          <1> 		call vV_error
   152                              <1> 		
   153 000003D2 5B                  <1> 		pop rbx
   154 000003D3 58                  <1> 		pop rax
   155                              <1> 		
   156                              <1> 		;TODO: Maybe use vV_error return value for decision making
   157                              <1> 		
   158 000003D4 B8FFFFFFFF          <1> 		mov eax , -1
   159                              <1> 		
   160 000003D9 C3                  <1> 		ret
   161                              <1> 		
   162                              <1> 		
   163                              <1> vV_ascii_change_to_hex:
   164                              <1> 		
   165 000003DA 83F800              <1> 		cmp eax , 0
   166                              <1> 			
   167 000003DD 75CB                <1> 			jne vV_ascii_unvalid
   168                              <1> 			
   169 000003DF 41B810000000        <1> 		mov r8 , 16
   170 000003E5 4831C9              <1> 		xor rcx , rcx
   171 000003E8 4831C0              <1> 		xor rax ,rax
   172                              <1> 				
   173 000003EB FFC7                <1> 		inc edi
   174 000003ED E94AFFFFFF          <1> 		jmp vV_ascii_as_hex2		
   175                              <1> 		
   176                              <1> 	
   177                              <1> 
   178                              <1> 
   179                              <1> vV_ascii_as_decbin:						;ebx: number of char to read
   180                              <1> 
   181                              <1> 	
   182                              <1> 
   183                              <1> 								;use edi as counter/offset in string
   184                              <1> 								;concatenate result in eax
   185                              <1> 								;parse digit in cl
   186                              <1> 								
   187                              <1> 								;use r8 for base
   188                              <1> 								;use r9 for max_value					
   189                              <1> 								;itou
   190                              <1> 	;xor edi, edi			;should be set by caller
   191 000003F2 4831C0              <1> 	xor rax , rax
   192                              <1> 	
   193 000003F5 4831C9              <1> 	xor rcx , rcx
   194                              <1> 	
   195 000003F8 4831D2              <1> 	xor rdx , rdx
   196                              <1> 	
   197                              <1> 	
   198                              <1> 	.start_loop:
   199                              <1> 	
   200 000003FB 678A0C3E            <1> 		mov cl , [esi + edi]
   201                              <1> 		
   202                              <1> 		
   203 000003FF 80F962              <1> 		cmp cl , 'b'										
   204 00000402 7513                <1> 			jne .pass01
   205                              <1> 		
   206                              <1> 		.format_change:
   207                              <1> 			
   208 00000404 83F800              <1> 			cmp eax , 0
   209                              <1> 			
   210 00000407 75A1                <1> 				jne vV_ascii_unvalid
   211                              <1> 				
   212 00000409 41B802000000        <1> 			mov r8 , 2
   213                              <1> 			
   214 0000040F 41B932000000        <1> 			mov r9 , 50
   215                              <1> 	
   216 00000415 EB26                <1> 			jmp .pass02
   217                              <1> 		
   218                              <1> 		
   219                              <1> 	
   220                              <1> 		.pass01:
   221                              <1> 		
   222 00000417 80F968              <1> 		cmp cl , 'h'											
   223 0000041A 74BE                <1> 			je vV_ascii_change_to_hex
   224 0000041C 80F978              <1> 		cmp cl , 'x'											
   225 0000041F 74B9                <1> 			je vV_ascii_change_to_hex
   226                              <1> 			
   227                              <1> 			
   228 00000421 4438C9              <1> 		cmp cl , r9b
   229                              <1> 		
   230 00000424 7384                <1> 			jae vV_ascii_unvalid
   231                              <1> 		
   232 00000426 80F930              <1> 		cmp cl , 48
   233                              <1> 		
   234 00000429 0F827BFFFFFF        <1> 			jb vV_ascii_unvalid
   235                              <1> 			
   236                              <1> 		
   237                              <1> 			
   238 0000042F 80E930              <1> 		sub cl , 48
   239                              <1> 		
   240 00000432 4831D2              <1> 		xor rdx , rdx
   241 00000435 F8                  <1> 		clc
   242                              <1> 		
   243 00000436 41F7E0              <1> 		mul r8d
   244                              <1> 		
   245 00000439 7284                <1> 		jc vV_ascii_overflow
   246                              <1> 		
   247 0000043B 01C8                <1> 		add eax , ecx
   248                              <1> 		
   249                              <1> 		.pass02:
   250                              <1> 		
   251 0000043D FFC7                <1> 		inc edi
   252                              <1> 		
   253 0000043F 39DF                <1> 		cmp edi , ebx
   254                              <1> 		
   255 00000441 72B8                <1> 		jb .start_loop
   256                              <1> 		
   257                              <1> 		
   258 00000443 C3                  <1> 		ret			; result should be in eax
   259                              <1> 		
   260                              <1> 
   261                              <1> 	
   262                              <1> ;------------------------------------------------------------------------------------------
   263                              <1> ;------------------------------------------------------------------------------------------
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> vV_ascii_int_to_hex:					;value in eax
   268                              <1> 						;dest in rdi
   269                              <1> 
   270                              <1> 
   271                              <1> 
   272 00000444 31C9                <1> 	xor ecx , ecx	
   273                              <1> 	
   274 00000446 BE10000000          <1> 	mov esi , 16
   275                              <1> 
   276                              <1> 	
   277                              <1> 	.loop01:
   278                              <1> 	
   279 0000044B 4831D2              <1> 		xor rdx , rdx
   280                              <1> 		
   281 0000044E F7F6                <1> 		div esi
   282                              <1> 		
   283                              <1> 		
   284 00000450 80FA0A              <1> 		cmp dl , 10
   285                              <1> 		
   286 00000453 7203                <1> 		jb .dec
   287                              <1> 		
   288 00000455 80C207              <1> 			add dl , 7
   289                              <1> 		
   290                              <1> 		.dec:
   291                              <1> 		
   292 00000458 80C230              <1> 			add dl , '0'
   293                              <1> 		
   294                              <1> 		
   295 0000045B 52                  <1> 		push rdx
   296                              <1> 		
   297 0000045C FFC1                <1> 		inc ecx
   298                              <1> 		
   299 0000045E 39F0                <1> 		cmp eax , esi
   300                              <1> 		
   301 00000460 73E9                <1> 		jae .loop01
   302                              <1> 	
   303                              <1> 	
   304 00000462 3C0A                <1> 	cmp al , 10
   305                              <1> 		
   306 00000464 7202                <1> 		jb .dec2
   307                              <1> 		
   308 00000466 0407                <1> 			add al , 7
   309                              <1> 		
   310                              <1> 		.dec2:
   311                              <1> 		
   312 00000468 0430                <1> 			add al , '0'	
   313 0000046A 8807                <1> 	mov [rdi] , al
   314                              <1> 	
   315 0000046C EB1B                <1> 	jmp vV_ascii_pop_digits
   316                              <1> 		
   317                              <1> 	
   318                              <1> 	
   319                              <1> 	
   320                              <1> vV_ascii_int_to_dec:					;value in eax
   321                              <1> 						;dest in rdi
   322                              <1> 						;max_dest_size in r9d
   323                              <1> 
   324                              <1> 
   325                              <1> 
   326 0000046E 31C9                <1> 	xor ecx , ecx	
   327                              <1> 	
   328 00000470 BE0A000000          <1> 	mov esi , 10
   329                              <1> 	
   330                              <1> 
   331                              <1> 
   332                              <1> 	
   333                              <1> 	.loop01:
   334                              <1> 	
   335 00000475 4831D2              <1> 		xor rdx , rdx
   336                              <1> 		
   337 00000478 F7F6                <1> 		div esi
   338                              <1> 		
   339                              <1> 		
   340 0000047A 80C230              <1> 		add dl , '0'
   341 0000047D 52                  <1> 		push rdx
   342                              <1> 		
   343 0000047E FFC1                <1> 		inc ecx
   344                              <1> 		
   345 00000480 83F80A              <1> 		cmp eax , 10
   346                              <1> 		
   347 00000483 73F0                <1> 		jae .loop01
   348                              <1> 	
   349 00000485 0430                <1> 	add al , '0'	
   350 00000487 8807                <1> 	mov [rdi] , al
   351                              <1> 		
   352                              <1> 	
   353                              <1> 		
   354                              <1> vV_ascii_pop_digits:			; Need nb of digits currently on stack(ecx)
   355                              <1> 						;dest in rdi
   356 00000489 41B801000000        <1> 		mov r8d , 1
   357 0000048F FFC1                <1> 		inc ecx
   358                              <1> 		
   359 00000491 4439C9              <1> 		cmp ecx , r9d
   360                              <1> 		
   361 00000494 7219                <1> 		jb .loopstart
   362                              <1> 		
   363                              <1> 	
   364 00000496 50                  <1> 			push rax
   365 00000497 53                  <1> 			push rbx
   366                              <1> 		
   367 00000498 B410                <1> 			mov ah , vV_ERR_MEMORY_BUFFER_LIMIT
   368 0000049A 6683C800            <1> 			or ax , 0
   369 0000049E 4831DB              <1> 			xor rbx , rbx
   370 000004A1 89FB                <1> 			mov ebx , edi
   371                              <1> 		
   372 000004A3 E8C9FBFFFF          <1> 			call vV_error
   373                              <1> 		
   374 000004A8 5B                  <1> 			pop rbx
   375 000004A9 58                  <1> 			pop rax
   376                              <1> 			
   377 000004AA 4489C9              <1> 			mov ecx , r9d		;Should protect memory..
   378 000004AD FFC9                <1> 			dec ecx		;will need testing
   379                              <1> 		
   380                              <1> 						
   381                              <1> 		.loopstart:
   382                              <1> 		
   383 000004AF 5A                  <1> 			pop rdx
   384 000004B0 6742881407          <1> 			mov BYTE[edi + r8d] , dl
   385 000004B5 41FFC0              <1> 			inc r8d
   386                              <1> 			
   387 000004B8 4139C8              <1> 			cmp r8d , ecx
   388                              <1> 		
   389 000004BB 72F2                <1> 		jb .loopstart
   390                              <1> 	
   391                              <1> 	
   392 000004BD 89C8                <1> 		mov eax , ecx
   393                              <1> 		
   394 000004BF C3                  <1> 		ret	
   395                              <1> 	
   396                              <1> 	
   397                              <1> vV_ascii_int_to_bin:					;value in eax, 
   398                              <1> 							
   399                              <1> 
   400                              <1> 
   401 000004C0 31C9                <1> 	xor ecx , ecx
   402                              <1> 	
   403                              <1> 	
   404                              <1> 	.loop01:
   405                              <1> 	
   406                              <1> 		
   407 000004C2 D1E8                <1> 		shr eax , 1
   408                              <1> 		
   409 000004C4 7205                <1> 		jc .one
   410                              <1> 		
   411 000004C6 B230                <1> 			mov dl , '0'
   412 000004C8 52                  <1> 			push rdx
   413                              <1> 			
   414 000004C9 EB03                <1> 		jmp .next
   415                              <1> 		.one:
   416                              <1> 			
   417 000004CB B231                <1> 			mov dl , '1'
   418 000004CD 52                  <1> 			push rdx
   419                              <1> 		
   420                              <1> 		.next:
   421                              <1> 		
   422 000004CE FFC1                <1> 		inc ecx
   423                              <1> 		
   424 000004D0 83F801              <1> 		cmp eax , 1
   425                              <1> 		
   426 000004D3 77ED                <1> 		ja .loop01
   427                              <1> 	
   428 000004D5 0430                <1> 	add al , '0'	
   429 000004D7 8807                <1> 	mov [rdi] , al
   430                              <1> 	
   431 000004D9 EBAE                <1> 	jmp vV_ascii_pop_digits
   432                              <1> 	
   433                              <1> 	
   434                              <1> ;Will need a special version for String stack
   435                              <1> 
   436                              <1> 
   437                              <1> 
   438                              <1> 
   439                              <1> 
   440                              <1> 
   441                              <1> 
     9                                  %include "w_samples/assembly/vartest_vars.was"	
     1                              <1>  segment .data 
     2                              <1> 
     3                              <1>  i_global:
     4 0000012C 0700000000000000    <1> .c: dq 7
     5 00000134 0200000000000000    <1> .mult: dq 2
     6 0000013C 0000000000000000    <1> .colomn: dq 0
     7                              <1>  segment .bss 
     8                              <1> 
     9                              <1> 	u_global:
    10 00000286 <res 00000004>      <1> .a: resb 4 
    11 0000028A <res 00000004>      <1> .gulf: resb 4 
    12 0000028E <res 00000100>      <1> .board: resb 256 
    13 0000038E <res 000000C8>      <1> .foo: resb 200 
    10                                  %include "vVc/assembly/w_runtime/vV_system90.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	
     5                              <1> 	
     6                              <1> 	stacks: 
     7                              <1> 
     8                              <1> 
     9 00000456 <res 00040000>      <1> 	string_stack_start: resb 262144
    10                              <1> 
    11                              <1> 
    12                              <1> 	
    13                              <1> 	
    14                              <1> 						
    15 00040456 <res 00020000>      <1> 	fake_stack_start: resb 131072
    11                                  
    12                                  
    13                                  
    14                                  global w_entry_point
    15                                  
    16                                  
    17                                  
    18                                  segment .text 
    19                                  
    20                                  
    21                                  
    22                                  		
    23                                  
    24                                  
    25                                  
    26                                  vV_entry_point:
    27                                  
    28                                  
    29 000004DB 4889E5                  	mov rbp, rsp			;Setup Stack Frame
    30                                  	
    31                                  	
    32                                   ;OpADR: [0]  ; PUSH opcode 
    33                                  
    34                                  	vV_push 333 
    34                              <1> 
    34 000004DE 41C7074D010000      <1>  mov DWORD[vV_sp] , %1
    34 000004E5 4983C704            <1>  add vV_sp , 4
    34                              <1> 
    35                                  
    36                                  
    37                                   ;OpADR: [1]  ; Var assignement					
    38                                  
    39                                  vV_pop eax
    39                              <1> 
    39 000004E9 4983EF04            <1>  sub vV_sp , 4
    39 000004ED 418B07              <1>  mov %1 , [vV_sp]
    39                              <1> 
    40 000004F0 890425[8A020000]        mov [u_global.gulf] , eax
    41                                  
    42                                   ;OpADR: [2]  ; PUSH opcode 
    43                                  
    44                                  	vV_push 5 
    44                              <1> 
    44 000004F7 41C70705000000      <1>  mov DWORD[vV_sp] , %1
    44 000004FE 4983C704            <1>  add vV_sp , 4
    44                              <1> 
    45                                  
    46                                  
    47                                   ;OpADR: [3]  ; Var assignement					
    48                                  
    49 00000502 31C0                    	xor eax , eax	
    50 00000504 BF00000000              	mov edi , 0			
    51 00000509 83FF05                  	cmp edi , 5		
    52 0000050C 0F8D7BFBFFFF            	jge vV_bound_error		
    53 00000512 01F8                    	add eax , edi			
    54 00000514 B90A000000              	mov ecx , 10
    55 00000519 F7E1                    	mul ecx		
    56 0000051B BF00000000              	mov edi , 0			
    57 00000520 83FF0A                  	cmp edi , 10		
    58 00000523 0F8D64FBFFFF            	jge vV_bound_error		
    59 00000529 01F8                    	add eax , edi			
    60 0000052B C1E002                  	shl eax , 2	
    61 0000052E 89C6                    	mov esi , eax		
    62 00000530 BF[8E030000]            	mov edi , u_global.foo
    63                                  vV_pop eax
    63                              <1> 
    63 00000535 4983EF04            <1>  sub vV_sp , 4
    63 00000539 418B07              <1>  mov %1 , [vV_sp]
    63                              <1> 
    64 0000053C 67890437                mov [edi + esi] , eax
    65                                  
    66                                   ;OpADR: [4]  ; PUSH opcode 
    67                                  
    68                                  	vV_push 42 
    68                              <1> 
    68 00000540 41C7072A000000      <1>  mov DWORD[vV_sp] , %1
    68 00000547 4983C704            <1>  add vV_sp , 4
    68                              <1> 
    69                                  
    70                                  
    71                                   ;OpADR: [5]  ; Var assignement					
    72                                  
    73 0000054B 31C0                    	xor eax , eax	
    74 0000054D BF00000000              	mov edi , 0			
    75 00000552 83FF05                  	cmp edi , 5		
    76 00000555 0F8D32FBFFFF            	jge vV_bound_error		
    77 0000055B 01F8                    	add eax , edi			
    78 0000055D B90A000000              	mov ecx , 10
    79 00000562 F7E1                    	mul ecx		
    80 00000564 BF01000000              	mov edi , 1			
    81 00000569 83FF0A                  	cmp edi , 10		
    82 0000056C 0F8D1BFBFFFF            	jge vV_bound_error		
    83 00000572 01F8                    	add eax , edi			
    84 00000574 C1E002                  	shl eax , 2	
    85 00000577 89C6                    	mov esi , eax		
    86 00000579 BF[8E030000]            	mov edi , u_global.foo
    87                                  vV_pop eax
    87                              <1> 
    87 0000057E 4983EF04            <1>  sub vV_sp , 4
    87 00000582 418B07              <1>  mov %1 , [vV_sp]
    87                              <1> 
    88 00000585 67890437                mov [edi + esi] , eax
    89                                  
    90                                   ;OpADR: [6]  ; PUSH opcode 
    91                                  
    92                                  	vV_push 69 
    92                              <1> 
    92 00000589 41C70745000000      <1>  mov DWORD[vV_sp] , %1
    92 00000590 4983C704            <1>  add vV_sp , 4
    92                              <1> 
    93                                  
    94                                  
    95                                   ;OpADR: [7]  ; Var assignement					
    96                                  
    97 00000594 31C0                    	xor eax , eax	
    98 00000596 BF00000000              	mov edi , 0			
    99 0000059B 83FF05                  	cmp edi , 5		
   100 0000059E 0F8DE9FAFFFF            	jge vV_bound_error		
   101 000005A4 01F8                    	add eax , edi			
   102 000005A6 B90A000000              	mov ecx , 10
   103 000005AB F7E1                    	mul ecx		
   104 000005AD BF02000000              	mov edi , 2			
   105 000005B2 83FF0A                  	cmp edi , 10		
   106 000005B5 0F8DD2FAFFFF            	jge vV_bound_error		
   107 000005BB 01F8                    	add eax , edi			
   108 000005BD C1E002                  	shl eax , 2	
   109 000005C0 89C6                    	mov esi , eax		
   110 000005C2 BF[8E030000]            	mov edi , u_global.foo
   111                                  vV_pop eax
   111                              <1> 
   111 000005C7 4983EF04            <1>  sub vV_sp , 4
   111 000005CB 418B07              <1>  mov %1 , [vV_sp]
   111                              <1> 
   112 000005CE 67890437                mov [edi + esi] , eax
   113                                  
   114                                   ;OpADR: [8]  ; PUSH opcode 
   115                                  
   116                                  	vV_push 43 
   116                              <1> 
   116 000005D2 41C7072B000000      <1>  mov DWORD[vV_sp] , %1
   116 000005D9 4983C704            <1>  add vV_sp , 4
   116                              <1> 
   117                                  
   118                                  
   119                                   ;OpADR: [9]  ; Var assignement					
   120                                  
   121 000005DD 31C0                    	xor eax , eax	
   122 000005DF BF00000000              	mov edi , 0			
   123 000005E4 83FF05                  	cmp edi , 5		
   124 000005E7 0F8DA0FAFFFF            	jge vV_bound_error		
   125 000005ED 01F8                    	add eax , edi			
   126 000005EF B90A000000              	mov ecx , 10
   127 000005F4 F7E1                    	mul ecx		
   128 000005F6 BF03000000              	mov edi , 3			
   129 000005FB 83FF0A                  	cmp edi , 10		
   130 000005FE 0F8D89FAFFFF            	jge vV_bound_error		
   131 00000604 01F8                    	add eax , edi			
   132 00000606 C1E002                  	shl eax , 2	
   133 00000609 89C6                    	mov esi , eax		
   134 0000060B BF[8E030000]            	mov edi , u_global.foo
   135                                  vV_pop eax
   135                              <1> 
   135 00000610 4983EF04            <1>  sub vV_sp , 4
   135 00000614 418B07              <1>  mov %1 , [vV_sp]
   135                              <1> 
   136 00000617 67890437                mov [edi + esi] , eax
   137                                  
   138                                   ;OpADR: [10]  ; PUSH opcode 
   139                                  
   140                                  	vV_push 67 
   140                              <1> 
   140 0000061B 41C70743000000      <1>  mov DWORD[vV_sp] , %1
   140 00000622 4983C704            <1>  add vV_sp , 4
   140                              <1> 
   141                                  
   142                                  
   143                                   ;OpADR: [11]  ; Var assignement					
   144                                  
   145 00000626 31C0                    	xor eax , eax	
   146 00000628 BF00000000              	mov edi , 0			
   147 0000062D 83FF05                  	cmp edi , 5		
   148 00000630 0F8D57FAFFFF            	jge vV_bound_error		
   149 00000636 01F8                    	add eax , edi			
   150 00000638 B90A000000              	mov ecx , 10
   151 0000063D F7E1                    	mul ecx		
   152 0000063F BF04000000              	mov edi , 4			
   153 00000644 83FF0A                  	cmp edi , 10		
   154 00000647 0F8D40FAFFFF            	jge vV_bound_error		
   155 0000064D 01F8                    	add eax , edi			
   156 0000064F C1E002                  	shl eax , 2	
   157 00000652 89C6                    	mov esi , eax		
   158 00000654 BF[8E030000]            	mov edi , u_global.foo
   159                                  vV_pop eax
   159                              <1> 
   159 00000659 4983EF04            <1>  sub vV_sp , 4
   159 0000065D 418B07              <1>  mov %1 , [vV_sp]
   159                              <1> 
   160 00000660 67890437                mov [edi + esi] , eax
   161                                  
   162                                   ;OpADR: [12]  ; PUSH opcode 
   163                                  
   164                                  	vV_push 34 
   164                              <1> 
   164 00000664 41C70722000000      <1>  mov DWORD[vV_sp] , %1
   164 0000066B 4983C704            <1>  add vV_sp , 4
   164                              <1> 
   165                                  
   166                                  
   167                                   ;OpADR: [13]  ; Var assignement					
   168                                  
   169 0000066F 31C0                    	xor eax , eax	
   170 00000671 BF00000000              	mov edi , 0			
   171 00000676 83FF05                  	cmp edi , 5		
   172 00000679 0F8D0EFAFFFF            	jge vV_bound_error		
   173 0000067F 01F8                    	add eax , edi			
   174 00000681 B90A000000              	mov ecx , 10
   175 00000686 F7E1                    	mul ecx		
   176 00000688 BF00000000              	mov edi , 0			
   177 0000068D 83FF0A                  	cmp edi , 10		
   178 00000690 0F8DF7F9FFFF            	jge vV_bound_error		
   179 00000696 01F8                    	add eax , edi			
   180 00000698 C1E002                  	shl eax , 2	
   181 0000069B 89C6                    	mov esi , eax		
   182 0000069D BF[8E030000]            	mov edi , u_global.foo
   183                                  vV_pop eax
   183                              <1> 
   183 000006A2 4983EF04            <1>  sub vV_sp , 4
   183 000006A6 418B07              <1>  mov %1 , [vV_sp]
   183                              <1> 
   184 000006A9 67890437                mov [edi + esi] , eax
   185                                  
   186                                   ;OpADR: [14]  ; PUSH opcode 
   187                                  
   188                                  	vV_push 467 
   188                              <1> 
   188 000006AD 41C707D3010000      <1>  mov DWORD[vV_sp] , %1
   188 000006B4 4983C704            <1>  add vV_sp , 4
   188                              <1> 
   189                                  
   190                                  
   191                                   ;OpADR: [15]  ; Var assignement					
   192                                  
   193 000006B8 31C0                    	xor eax , eax	
   194 000006BA BF01000000              	mov edi , 1			
   195 000006BF 83FF05                  	cmp edi , 5		
   196 000006C2 0F8DC5F9FFFF            	jge vV_bound_error		
   197 000006C8 01F8                    	add eax , edi			
   198 000006CA B90A000000              	mov ecx , 10
   199 000006CF F7E1                    	mul ecx		
   200 000006D1 BF00000000              	mov edi , 0			
   201 000006D6 83FF0A                  	cmp edi , 10		
   202 000006D9 0F8DAEF9FFFF            	jge vV_bound_error		
   203 000006DF 01F8                    	add eax , edi			
   204 000006E1 C1E002                  	shl eax , 2	
   205 000006E4 89C6                    	mov esi , eax		
   206 000006E6 BF[8E030000]            	mov edi , u_global.foo
   207                                  vV_pop eax
   207                              <1> 
   207 000006EB 4983EF04            <1>  sub vV_sp , 4
   207 000006EF 418B07              <1>  mov %1 , [vV_sp]
   207                              <1> 
   208 000006F2 67890437                mov [edi + esi] , eax
   209                                  
   210                                   ;OpADR: [16]  ; PUSH opcode 
   211                                  
   212                                  	vV_push 888 
   212                              <1> 
   212 000006F6 41C70778030000      <1>  mov DWORD[vV_sp] , %1
   212 000006FD 4983C704            <1>  add vV_sp , 4
   212                              <1> 
   213                                  
   214                                  
   215                                   ;OpADR: [17]  ; Var assignement					
   216                                  
   217 00000701 31C0                    	xor eax , eax	
   218 00000703 BF02000000              	mov edi , 2			
   219 00000708 83FF05                  	cmp edi , 5		
   220 0000070B 0F8D7CF9FFFF            	jge vV_bound_error		
   221 00000711 01F8                    	add eax , edi			
   222 00000713 B90A000000              	mov ecx , 10
   223 00000718 F7E1                    	mul ecx		
   224 0000071A BF00000000              	mov edi , 0			
   225 0000071F 83FF0A                  	cmp edi , 10		
   226 00000722 0F8D65F9FFFF            	jge vV_bound_error		
   227 00000728 01F8                    	add eax , edi			
   228 0000072A C1E002                  	shl eax , 2	
   229 0000072D 89C6                    	mov esi , eax		
   230 0000072F BF[8E030000]            	mov edi , u_global.foo
   231                                  vV_pop eax
   231                              <1> 
   231 00000734 4983EF04            <1>  sub vV_sp , 4
   231 00000738 418B07              <1>  mov %1 , [vV_sp]
   231                              <1> 
   232 0000073B 67890437                mov [edi + esi] , eax
   233                                  
   234                                   ;OpADR: [18]  ; Var invocation					
   235                                  
   236 0000073F 31C0                    	xor eax , eax	
   237 00000741 BF00000000              	mov edi , 0			
   238 00000746 83FF05                  	cmp edi , 5		
   239 00000749 0F8D3EF9FFFF            	jge vV_bound_error		
   240 0000074F 01F8                    	add eax , edi			
   241 00000751 B90A000000              	mov ecx , 10
   242 00000756 F7E1                    	mul ecx		
   243 00000758 BF00000000              	mov edi , 0			
   244 0000075D 83FF0A                  	cmp edi , 10		
   245 00000760 0F8D27F9FFFF            	jge vV_bound_error		
   246 00000766 01F8                    	add eax , edi			
   247 00000768 C1E002                  	shl eax , 2	
   248 0000076B 89C6                    	mov esi , eax		
   249 0000076D BF[8E030000]            	mov edi , u_global.foo
   250 00000772 678B0437                mov eax , [edi + esi]
   251                                  vV_push eax
   251                              <1> 
   251 00000776 418907              <1>  mov DWORD[vV_sp] , %1
   251 00000779 4983C704            <1>  add vV_sp , 4
   251                              <1> 
   252                                  
   253                                   ;OpADR: [19]  ; OUT opcode (0)			
   254                                  
   255 0000077D E838FAFFFF              	call vV_io_out_default			
   256                                  						
   257                                  
   258                                   ;OpADR: [20]  ; Var invocation					
   259                                  
   260 00000782 31C0                    	xor eax , eax	
   261 00000784 BF01000000              	mov edi , 1			
   262 00000789 83FF05                  	cmp edi , 5		
   263 0000078C 0F8DFBF8FFFF            	jge vV_bound_error		
   264 00000792 01F8                    	add eax , edi			
   265 00000794 B90A000000              	mov ecx , 10
   266 00000799 F7E1                    	mul ecx		
   267 0000079B BF00000000              	mov edi , 0			
   268 000007A0 83FF0A                  	cmp edi , 10		
   269 000007A3 0F8DE4F8FFFF            	jge vV_bound_error		
   270 000007A9 01F8                    	add eax , edi			
   271 000007AB C1E002                  	shl eax , 2	
   272 000007AE 89C6                    	mov esi , eax		
   273 000007B0 BF[8E030000]            	mov edi , u_global.foo
   274 000007B5 678B0437                mov eax , [edi + esi]
   275                                  vV_push eax
   275                              <1> 
   275 000007B9 418907              <1>  mov DWORD[vV_sp] , %1
   275 000007BC 4983C704            <1>  add vV_sp , 4
   275                              <1> 
   276                                  
   277                                   ;OpADR: [21]  ; OUT opcode (0)			
   278                                  
   279 000007C0 E8F5F9FFFF              	call vV_io_out_default			
   280                                  						
   281                                  
   282                                   ;OpADR: [22]  ; Var invocation					
   283                                  
   284 000007C5 31C0                    	xor eax , eax	
   285 000007C7 BF02000000              	mov edi , 2			
   286 000007CC 83FF05                  	cmp edi , 5		
   287 000007CF 0F8DB8F8FFFF            	jge vV_bound_error		
   288 000007D5 01F8                    	add eax , edi			
   289 000007D7 B90A000000              	mov ecx , 10
   290 000007DC F7E1                    	mul ecx		
   291 000007DE BF00000000              	mov edi , 0			
   292 000007E3 83FF0A                  	cmp edi , 10		
   293 000007E6 0F8DA1F8FFFF            	jge vV_bound_error		
   294 000007EC 01F8                    	add eax , edi			
   295 000007EE C1E002                  	shl eax , 2	
   296 000007F1 89C6                    	mov esi , eax		
   297 000007F3 BF[8E030000]            	mov edi , u_global.foo
   298 000007F8 678B0437                mov eax , [edi + esi]
   299                                  vV_push eax
   299                              <1> 
   299 000007FC 418907              <1>  mov DWORD[vV_sp] , %1
   299 000007FF 4983C704            <1>  add vV_sp , 4
   299                              <1> 
   300                                  
   301                                   ;OpADR: [23]  ; OUT opcode (0)			
   302                                  
   303 00000803 E8B2F9FFFF              	call vV_io_out_default			
   304                                  						
   305                                  
   306                                   ;OpADR: [24]  ; Var invocation					
   307                                  
   308 00000808 31C0                    	xor eax , eax	
   309 0000080A BF04000000              	mov edi , 4			
   310 0000080F 83FF05                  	cmp edi , 5		
   311 00000812 0F8D75F8FFFF            	jge vV_bound_error		
   312 00000818 01F8                    	add eax , edi			
   313 0000081A B90A000000              	mov ecx , 10
   314 0000081F F7E1                    	mul ecx		
   315 00000821 BF0A000000              	mov edi , 10			
   316 00000826 83FF0A                  	cmp edi , 10		
   317 00000829 0F8D5EF8FFFF            	jge vV_bound_error		
   318 0000082F 01F8                    	add eax , edi			
   319 00000831 C1E002                  	shl eax , 2	
   320 00000834 89C6                    	mov esi , eax		
   321 00000836 BF[8E030000]            	mov edi , u_global.foo
   322 0000083B 678B0437                mov eax , [edi + esi]
   323                                  vV_push eax
   323                              <1> 
   323 0000083F 418907              <1>  mov DWORD[vV_sp] , %1
   323 00000842 4983C704            <1>  add vV_sp , 4
   323                              <1> 
   324                                  
   325                                   ;OpADR: [25]  ; OUT opcode (0)			
   326                                  
   327 00000846 E86FF9FFFF              	call vV_io_out_default			
   328                                  						
   329                                  
   330                                   ;OpADR: [26]  ; PUSH opcode 
   331                                  
   332                                  	vV_push 42 
   332                              <1> 
   332 0000084B 41C7072A000000      <1>  mov DWORD[vV_sp] , %1
   332 00000852 4983C704            <1>  add vV_sp , 4
   332                              <1> 
   333                                  
   334                                  
   335                                   ;OpADR: [27]  ; Var assignement					
   336                                  
   337 00000856 31C0                    	xor eax , eax	
   338 00000858 BF00000000              	mov edi , 0			
   339 0000085D 83FF05                  	cmp edi , 5		
   340 00000860 0F8D27F8FFFF            	jge vV_bound_error		
   341 00000866 01F8                    	add eax , edi			
   342 00000868 B90A000000              	mov ecx , 10
   343 0000086D F7E1                    	mul ecx		
   344 0000086F BF01000000              	mov edi , 1			
   345 00000874 83FF0A                  	cmp edi , 10		
   346 00000877 0F8D10F8FFFF            	jge vV_bound_error		
   347 0000087D 01F8                    	add eax , edi			
   348 0000087F C1E002                  	shl eax , 2	
   349 00000882 89C6                    	mov esi , eax		
   350 00000884 BF[8E030000]            	mov edi , u_global.foo
   351                                  vV_pop eax
   351                              <1> 
   351 00000889 4983EF04            <1>  sub vV_sp , 4
   351 0000088D 418B07              <1>  mov %1 , [vV_sp]
   351                              <1> 
   352 00000890 67890437                mov [edi + esi] , eax
   353                                  
   354                                   ;OpADR: [28]  ; PUSH opcode 
   355                                  
   356                                  	vV_push 900 
   356                              <1> 
   356 00000894 41C70784030000      <1>  mov DWORD[vV_sp] , %1
   356 0000089B 4983C704            <1>  add vV_sp , 4
   356                              <1> 
   357                                  
   358                                  
   359                                   ;OpADR: [29]  ; Var assignement					
   360                                  
   361 0000089F 31C0                    	xor eax , eax	
   362 000008A1 BF00000000              	mov edi , 0			
   363 000008A6 83FF05                  	cmp edi , 5		
   364 000008A9 0F8DDEF7FFFF            	jge vV_bound_error		
   365 000008AF 01F8                    	add eax , edi			
   366 000008B1 B90A000000              	mov ecx , 10
   367 000008B6 F7E1                    	mul ecx		
   368 000008B8 BF00000000              	mov edi , 0			
   369 000008BD 83FF0A                  	cmp edi , 10		
   370 000008C0 0F8DC7F7FFFF            	jge vV_bound_error		
   371 000008C6 01F8                    	add eax , edi			
   372 000008C8 C1E002                  	shl eax , 2	
   373 000008CB 89C6                    	mov esi , eax		
   374 000008CD BF[8E030000]            	mov edi , u_global.foo
   375                                  vV_pop eax
   375                              <1> 
   375 000008D2 4983EF04            <1>  sub vV_sp , 4
   375 000008D6 418B07              <1>  mov %1 , [vV_sp]
   375                              <1> 
   376 000008D9 67890437                mov [edi + esi] , eax
   377                                  
   378                                   ;OpADR: [30]  ; Var invocation					
   379                                  
   380 000008DD 31C0                    	xor eax , eax	
   381 000008DF BF00000000              	mov edi , 0			
   382 000008E4 83FF05                  	cmp edi , 5		
   383 000008E7 0F8DA0F7FFFF            	jge vV_bound_error		
   384 000008ED 01F8                    	add eax , edi			
   385 000008EF B90A000000              	mov ecx , 10
   386 000008F4 F7E1                    	mul ecx		
   387 000008F6 BF01000000              	mov edi , 1			
   388 000008FB 83FF0A                  	cmp edi , 10		
   389 000008FE 0F8D89F7FFFF            	jge vV_bound_error		
   390 00000904 01F8                    	add eax , edi			
   391 00000906 C1E002                  	shl eax , 2	
   392 00000909 89C6                    	mov esi , eax		
   393 0000090B BF[8E030000]            	mov edi , u_global.foo
   394 00000910 678B0437                mov eax , [edi + esi]
   395                                  vV_push eax
   395                              <1> 
   395 00000914 418907              <1>  mov DWORD[vV_sp] , %1
   395 00000917 4983C704            <1>  add vV_sp , 4
   395                              <1> 
   396                                  
   397                                   ;OpADR: [31]  ; OUT opcode (0)			
   398                                  
   399 0000091B E89AF8FFFF              	call vV_io_out_default			
   400                                  						
   401                                  
   402                                   ;OpADR: [32]  ; PUSH opcode 
   403                                  
   404                                  	vV_push 0 
   404                              <1> 
   404 00000920 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   404 00000927 4983C704            <1>  add vV_sp , 4
   404                              <1> 
   405                                  
   406                                  
   407                                  
   408                                  	wblock_0:		
   409                                  
   410                                  ;------------------------------------------------------
   411                                  
   412                                  
   413                                   ;OpADR: [33]  ; DUP opcode (1)			
   414                                  
   415                                  	vV_dup 1			
   415                              <1> 
   415 0000092B B901000000          <1>  mov ecx , %1
   415 00000930 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   415 00000934 4C89FF              <1>  mov rdi , vV_sp
   415                              <1> 
   415 00000937 F3A5                <1>  rep movsd
   415                              <1> 
   415 00000939 4983C704            <1>  add vV_sp , cell(%1)
   415                              <1> 
   416                                  
   417                                  
   418                                   ;OpADR: [34]  ; Var invocation					
   419                                  
   420 0000093D 8B0425[34010000]        mov eax , [i_global.mult]
   421                                  vV_push eax
   421                              <1> 
   421 00000944 418907              <1>  mov DWORD[vV_sp] , %1
   421 00000947 4983C704            <1>  add vV_sp , 4
   421                              <1> 
   422                                  
   423                                   ;OpADR: [35]  ; SWAP opcode 
   424                                  
   425                                  
   426                                  	vV_swap		
   426                              <1> 
   426 0000094B 418B57FC            <1>  mov edx , [vV_sp-4]
   426 0000094F 418B47F8            <1>  mov eax , [vV_sp-8]
   426 00000953 418957F8            <1>  mov [vV_sp-8] , edx
   426 00000957 418947FC            <1>  mov [vV_sp-4] , eax
   426                              <1> 
   427                                  
   428                                  
   429                                   ;OpADR: [36]  ; Var invocation					
   430                                  
   431 0000095B 8B0425[3C010000]        mov eax , [i_global.colomn]
   432                                  vV_push eax
   432                              <1> 
   432 00000962 418907              <1>  mov DWORD[vV_sp] , %1
   432 00000965 4983C704            <1>  add vV_sp , 4
   432                              <1> 
   433                                  
   434                                   ;OpADR: [37]  ; Var assignement					
   435                                  
   436 00000969 31C0                    	xor eax , eax	
   437                                  	vV_pop edi		
   437                              <1> 
   437 0000096B 4983EF04            <1>  sub vV_sp , 4
   437 0000096F 418B3F              <1>  mov %1 , [vV_sp]
   437                              <1> 
   438 00000972 83FF08                  	cmp edi , 8		
   439 00000975 0F8D12F7FFFF            	jge vV_bound_error		
   440 0000097B 01F8                    	add eax , edi			
   441 0000097D C1E003                  	shl eax , 3	
   442                                  	vV_pop edi		
   442                              <1> 
   442 00000980 4983EF04            <1>  sub vV_sp , 4
   442 00000984 418B3F              <1>  mov %1 , [vV_sp]
   442                              <1> 
   443 00000987 83FF08                  	cmp edi , 8		
   444 0000098A 0F8DFDF6FFFF            	jge vV_bound_error		
   445 00000990 01F8                    	add eax , edi			
   446 00000992 C1E002                  	shl eax , 2	
   447 00000995 89C6                    	mov esi , eax		
   448 00000997 BF[8E020000]            	mov edi , u_global.board
   449                                  vV_pop eax
   449                              <1> 
   449 0000099C 4983EF04            <1>  sub vV_sp , 4
   449 000009A0 418B07              <1>  mov %1 , [vV_sp]
   449                              <1> 
   450 000009A3 67890437                mov [edi + esi] , eax
   451                                  
   452                                   ;OpADR: [38]  ; Var invocation					
   453                                  
   454 000009A7 8B0425[34010000]        mov eax , [i_global.mult]
   455                                  vV_push eax
   455                              <1> 
   455 000009AE 418907              <1>  mov DWORD[vV_sp] , %1
   455 000009B1 4983C704            <1>  add vV_sp , 4
   455                              <1> 
   456                                  
   457                                   ;OpADR: [39]  ; Var invocation					
   458                                  
   459 000009B5 8B0425[34010000]        mov eax , [i_global.mult]
   460                                  vV_push eax
   460                              <1> 
   460 000009BC 418907              <1>  mov DWORD[vV_sp] , %1
   460 000009BF 4983C704            <1>  add vV_sp , 4
   460                              <1> 
   461                                  
   462                                   ;OpADR: [40]  ; ADD opcode 					
   463                                  
   464 000009C3 418B47F8                	mov eax , vV_2nd			
   465 000009C7 410347FC                	add eax , vV_top			
   466 000009CB 418947F8                	mov vV_2nd , eax			
   467                                  
   468                                  	vV_dec_sp 1		
   468                              <1> 
   468 000009CF 4983EF04            <1>  sub vV_sp , cell(%1)
   468                              <1> 
   469                                  
   470                                   ;OpADR: [41]  ; Var assignement					
   471                                  
   472                                  vV_pop eax
   472                              <1> 
   472 000009D3 4983EF04            <1>  sub vV_sp , 4
   472 000009D7 418B07              <1>  mov %1 , [vV_sp]
   472                              <1> 
   473 000009DA 890425[34010000]        mov [i_global.mult] , eax
   474                                  
   475                                   ;OpADR: [42]  ; PUSH opcode 
   476                                  
   477                                  	vV_push 1 
   477                              <1> 
   477 000009E1 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   477 000009E8 4983C704            <1>  add vV_sp , 4
   477                              <1> 
   478                                  
   479                                  
   480                                   ;OpADR: [43]  ; ADD opcode 					
   481                                  
   482 000009EC 418B47F8                	mov eax , vV_2nd			
   483 000009F0 410347FC                	add eax , vV_top			
   484 000009F4 418947F8                	mov vV_2nd , eax			
   485                                  
   486                                  	vV_dec_sp 1		
   486                              <1> 
   486 000009F8 4983EF04            <1>  sub vV_sp , cell(%1)
   486                              <1> 
   487                                  
   488                                   ;OpADR: [44]  ; DUP opcode (1)			
   489                                  
   490                                  	vV_dup 1			
   490                              <1> 
   490 000009FC B901000000          <1>  mov ecx , %1
   490 00000A01 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   490 00000A05 4C89FF              <1>  mov rdi , vV_sp
   490                              <1> 
   490 00000A08 F3A5                <1>  rep movsd
   490                              <1> 
   490 00000A0A 4983C704            <1>  add vV_sp , cell(%1)
   490                              <1> 
   491                                  
   492                                  
   493                                   ;OpADR: [45]  ; Var invocation					
   494                                  
   495 00000A0E 8B0425[2C010000]        mov eax , [i_global.c]
   496                                  vV_push eax
   496                              <1> 
   496 00000A15 418907              <1>  mov DWORD[vV_sp] , %1
   496 00000A18 4983C704            <1>  add vV_sp , 4
   496                              <1> 
   497                                  
   498                                   ;OpADR: [46]  ; MORE opcode					
   499                                  
   500 00000A1C 418B47FC                	mov eax , vV_top			
   501 00000A20 413947F8                	cmp DWORD vV_2nd , eax			
   502                                  
   503 00000A24 76(0B)                  	jbe short 0xb				
   504                                  
   505 00000A26 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   506                                  
   507 00000A2E EB(09)                  	jmp short 0x9				
   508                                  
   509 00000A30 41C747F800000000        			mov DWORD vV_2nd , 0	
   510                                  
   511                                  	vV_dec_sp 1				
   511                              <1> 
   511 00000A38 4983EF04            <1>  sub vV_sp , cell(%1)
   511                              <1> 
   512                                  
   513                                   ;OpADR: [47]  ; NOT opcode 					
   514                                  
   515 00000A3C 41F757FC                	not DWORD vV_top			
   516                                  
   517                                   ;OpADR: [48]  ; WHILE opcode					
   518                                  
   519                                  	vV_dec_sp 1				
   519                              <1> 
   519 00000A40 4983EF04            <1>  sub vV_sp , cell(%1)
   519                              <1> 
   520 00000A44 41830F00                	or DWORD[vV_sp] , 0			
   521 00000A48 0F85DDFEFFFF            	jne wblock_0		
   522                                  
   523                                   ;OpADR: [49]  ; PUSH opcode 
   524                                  
   525                                  	vV_push 0 
   525                              <1> 
   525 00000A4E 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   525 00000A55 4983C704            <1>  add vV_sp , 4
   525                              <1> 
   526                                  
   527                                  
   528                                  
   529                                  	wblock_1:		
   530                                  
   531                                  ;------------------------------------------------------
   532                                  
   533                                  
   534                                   ;OpADR: [50]  ; DUP opcode (1)			
   535                                  
   536                                  	vV_dup 1			
   536                              <1> 
   536 00000A59 B901000000          <1>  mov ecx , %1
   536 00000A5E 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   536 00000A62 4C89FF              <1>  mov rdi , vV_sp
   536                              <1> 
   536 00000A65 F3A5                <1>  rep movsd
   536                              <1> 
   536 00000A67 4983C704            <1>  add vV_sp , cell(%1)
   536                              <1> 
   537                                  
   538                                  
   539                                   ;OpADR: [51]  ; Var invocation					
   540                                  
   541 00000A6B 31C0                    	xor eax , eax	
   542 00000A6D BF00000000              	mov edi , 0			
   543 00000A72 83FF08                  	cmp edi , 8		
   544 00000A75 0F8D12F6FFFF            	jge vV_bound_error		
   545 00000A7B 01F8                    	add eax , edi			
   546 00000A7D C1E003                  	shl eax , 3	
   547                                  	vV_pop edi		
   547                              <1> 
   547 00000A80 4983EF04            <1>  sub vV_sp , 4
   547 00000A84 418B3F              <1>  mov %1 , [vV_sp]
   547                              <1> 
   548 00000A87 83FF08                  	cmp edi , 8		
   549 00000A8A 0F8DFDF5FFFF            	jge vV_bound_error		
   550 00000A90 01F8                    	add eax , edi			
   551 00000A92 C1E002                  	shl eax , 2	
   552 00000A95 89C6                    	mov esi , eax		
   553 00000A97 BF[8E020000]            	mov edi , u_global.board
   554 00000A9C 678B0437                mov eax , [edi + esi]
   555                                  vV_push eax
   555                              <1> 
   555 00000AA0 418907              <1>  mov DWORD[vV_sp] , %1
   555 00000AA3 4983C704            <1>  add vV_sp , 4
   555                              <1> 
   556                                  
   557                                   ;OpADR: [52]  ; OUT opcode (4)			
   558                                  
   559 00000AA7 41BA[C0040000]          	mov r10d , vV_FORMAT_BIN		
   560 00000AAD E821F7FFFF              	call vV_io_out				
   561                                  						
   562                                  
   563                                   ;OpADR: [53]  ; PUSH opcode 
   564                                  
   565                                  	vV_push 1 
   565                              <1> 
   565 00000AB2 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   565 00000AB9 4983C704            <1>  add vV_sp , 4
   565                              <1> 
   566                                  
   567                                  
   568                                   ;OpADR: [54]  ; ADD opcode 					
   569                                  
   570 00000ABD 418B47F8                	mov eax , vV_2nd			
   571 00000AC1 410347FC                	add eax , vV_top			
   572 00000AC5 418947F8                	mov vV_2nd , eax			
   573                                  
   574                                  	vV_dec_sp 1		
   574                              <1> 
   574 00000AC9 4983EF04            <1>  sub vV_sp , cell(%1)
   574                              <1> 
   575                                  
   576                                   ;OpADR: [55]  ; DUP opcode (1)			
   577                                  
   578                                  	vV_dup 1			
   578                              <1> 
   578 00000ACD B901000000          <1>  mov ecx , %1
   578 00000AD2 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   578 00000AD6 4C89FF              <1>  mov rdi , vV_sp
   578                              <1> 
   578 00000AD9 F3A5                <1>  rep movsd
   578                              <1> 
   578 00000ADB 4983C704            <1>  add vV_sp , cell(%1)
   578                              <1> 
   579                                  
   580                                  
   581                                   ;OpADR: [56]  ; Var invocation					
   582                                  
   583 00000ADF 8B0425[2C010000]        mov eax , [i_global.c]
   584                                  vV_push eax
   584                              <1> 
   584 00000AE6 418907              <1>  mov DWORD[vV_sp] , %1
   584 00000AE9 4983C704            <1>  add vV_sp , 4
   584                              <1> 
   585                                  
   586                                   ;OpADR: [57]  ; MORE opcode					
   587                                  
   588 00000AED 418B47FC                	mov eax , vV_top			
   589 00000AF1 413947F8                	cmp DWORD vV_2nd , eax			
   590                                  
   591 00000AF5 76(0B)                  	jbe short 0xb				
   592                                  
   593 00000AF7 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   594                                  
   595 00000AFF EB(09)                  	jmp short 0x9				
   596                                  
   597 00000B01 41C747F800000000        			mov DWORD vV_2nd , 0	
   598                                  
   599                                  	vV_dec_sp 1				
   599                              <1> 
   599 00000B09 4983EF04            <1>  sub vV_sp , cell(%1)
   599                              <1> 
   600                                  
   601                                   ;OpADR: [58]  ; NOT opcode 					
   602                                  
   603 00000B0D 41F757FC                	not DWORD vV_top			
   604                                  
   605                                   ;OpADR: [59]  ; WHILE opcode					
   606                                  
   607                                  	vV_dec_sp 1				
   607                              <1> 
   607 00000B11 4983EF04            <1>  sub vV_sp , cell(%1)
   607                              <1> 
   608 00000B15 41830F00                	or DWORD[vV_sp] , 0			
   609 00000B19 0F853AFFFFFF            	jne wblock_1		
   610                                  		
   611 00000B1F C3                      		ret
   612                                  
   613                                  ;Transpiled from vV with vVc version 0.0.4
   614                                  		
   615                                  		
