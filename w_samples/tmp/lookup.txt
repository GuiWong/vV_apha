     1                                  %include "vVc/assembly/w_runtime/vV_defines.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> ;------------------Variables From Project-------------
     5                              <1> 
     6                              <1> 	;------------------Should come from io module(need refactoring)
     7                              <1> 
     8                              <1> 
     9                              <1> 	%define vV_input_buffer_size 255
    10                              <1> 	%define vV_output_buffer_size 255
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;------------------Implementation Relative-------------
    15                              <1> 
    16                              <1> %deftok vV_sp 'r15'
    17                              <1> 
    18                              <1> %deftok vV_spS 'r14'
    19                              <1> 
    20                              <1> %deftok vV_sdir '-'
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24                              <1> 
    25                              <1> ;------------------Stack Shortcuts--------------------
    26                              <1> 
    27                              <1> %define cell(a) (a*4)
    28                              <1> 
    29                              <1> 
    30                              <1> %define vV_top [vV_sp vV_sdir %+ cell(1)]
    31                              <1> %define vV_2nd [vV_sp vV_sdir %+ cell(2)]
    32                              <1> 
    33                              <1> %define vV_stack_v(a) ([vV_sp vV_sdir %+ cell(a)])
    34                              <1> 
    35                              <1> 
    36                              <1> ;-------------------Out_Format Pointer------------------
    37                              <1> 
    38                              <1> %deftok vV_FORMAT_BIN "vV_ascii_int_to_bin"
    39                              <1> %deftok vV_FORMAT_DEC "vV_ascii_int_to_dec"
    40                              <1> %deftok vV_FORMAT_HEX "vV_ascii_int_to_hex"
    41                              <1> 
    42                              <1> 
    43                              <1> 
    44                              <1> ;--------------------Op Macros--------------------------
    45                              <1> 
    46                              <1> %macro vV_push 1
    47                              <1> 
    48                              <1> 	mov DWORD[vV_sp] , %1
    49                              <1> 	add vV_sp , 4
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro vV_pop 1
    54                              <1> 
    55                              <1> 	sub vV_sp , 4
    56                              <1> 	mov %1 , [vV_sp]
    57                              <1> 	
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro vV_swap 0
    61                              <1> 
    62                              <1> 	mov edx , [vV_sp-4]
    63                              <1> 	mov eax , [vV_sp-8]
    64                              <1> 	mov [vV_sp-8] , edx 
    65                              <1> 	mov [vV_sp-4] , eax 
    66                              <1> 	
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro vV_dup 1
    70                              <1> 
    71                              <1> 	mov ecx , %1
    72                              <1> 	lea rsi , [vV_sp-cell(%1)]
    73                              <1> 	mov rdi , vV_sp
    74                              <1> 		
    75                              <1> 	rep movsd
    76                              <1> 	
    77                              <1> 	add vV_sp , cell(%1)
    78                              <1> 	
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> 
    82                              <1> %macro vV_dec_sp 1
    83                              <1> 
    84                              <1> 	sub vV_sp , cell(%1)
    85                              <1> 	
    86                              <1> %endmacro
    87                              <1> 	
     2                                  %include "vVc/assembly/w_runtime/vV_error_code.asm"		
     1                              <1> 
     2                              <1> %define vV_ERR_IO_I_OVERFLOW 1
     3                              <1> %define vV_ERR_IO_O_OVERFLOW 2
     4                              <1> %define vV_ERR_IO_I_UNVALID 3
     5                              <1> %define vV_ERR_IO_O_UNVALID 4
     6                              <1> %define vV_ERR_IO_I_VALUE_OVERFLOW 5
     7                              <1> 
     8                              <1> 
     9                              <1> %define vV_ERR_VALUE_OVERFLOW 8
    10                              <1> 
    11                              <1> 
    12                              <1> %define vV_ERR_MEMORY_BUFFER_LIMIT 16
    13                              <1> %define vV_ERR_MEMORY_OUT_OF_BOUND 17
     3                                  %include "vVc/assembly/w_runtime/vV_runtime.asm"		
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> 
     4                              <1> ;%include "vVc/assembly/w_runtime/vV_errors.asm"
     5                              <1> ;%include "vVc/assembly/w_runtime/vV_system00.asm"
     6                              <1> ;%include "vVc/assembly/w_runtime/vV_system10.asm"
     7                              <1> ;%include "vVc/assembly/w_runtime/vV_system90.asm"
     8                              <1> 
     9                              <1> 
    10                              <1> global _start
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;extern vV_entry_point			;Defined by main program
    15                              <1> 
    16                              <1> 
    17                              <1> 
    18                              <1> 	
    19                              <1> segment .data 
    20                              <1> 
    21                              <1> 
    22                              <1> 	
    23                              <1> 
    24                              <1> segment .text 
    25                              <1> 
    26                              <1> 
    27                              <1> 	vV_forced_exit:				;rax hold exit code
    28                              <1> 							;Removed default error printing
    29                              <1> 							;This will now happens in errors module
    30                              <1> 
    31 00000000 4889C7              <1> 		mov rdi, rax
    32 00000003 B83C000000          <1> 		mov rax, SYS_EXIT
    33 00000008 0F05                <1> 		syscall
    34                              <1> 		
    35                              <1> 		
    36                              <1> 
    37                              <1> 
    38                              <1> 	save_regs:			;In case called from other process
    39                              <1> 	
    40 0000000A 58                  <1> 		pop rax
    41                              <1> 	
    42 0000000B 53                  <1> 		push rbx
    43 0000000C 4154                <1> 		push r12
    44 0000000E 4155                <1> 		push r13
    45 00000010 4156                <1> 		push r14
    46 00000012 4157                <1> 		push r15
    47                              <1> 		
    48 00000014 50                  <1> 		push rax
    49                              <1> 		
    50 00000015 C3                  <1> 		ret
    51                              <1> 		
    52                              <1> 	restore_regs:
    53                              <1> 	
    54 00000016 58                  <1> 		pop rax
    55                              <1> 	
    56 00000017 415F                <1> 		pop r15
    57 00000019 415E                <1> 		pop r14
    58 0000001B 415D                <1> 		pop r13
    59 0000001D 415C                <1> 		pop r12
    60 0000001F 5B                  <1> 		pop rbx
    61                              <1> 		
    62 00000020 50                  <1> 		push rax
    63                              <1> 		
    64 00000021 C3                  <1> 		ret
    65                              <1> 		
    66                              <1> 	setup_memory:
    67                              <1> 	
    68 00000022 C70425[80000000]00- <1> 		mov DWORD [vV_input_buffer_content] , 0
    68 0000002A 000000              <1>
    69 0000002D C70425[83010000]00- <1> 		mov DWORD [vV_output_buffer_content] , 0
    69 00000035 000000              <1>
    70                              <1> 		
    71                              <1> 		;mov DWORD [endofline] , 0xa
    72                              <1> 		
    73 00000038 C70425[28010000]-   <1> 		mov DWORD[vV_sys_format_mode] , vV_ascii_int_to_dec
    73 0000003F [6E040000]          <1>
    74                              <1> 		
    75 00000043 C3                  <1> 		ret
    76                              <1> 		
    77                              <1> 		
    78                              <1> 	
    79                              <1> 		
    80                              <1> _start:				;Entry point of Every Program
    81                              <1> 	
    82                              <1> 		
    83                              <1> 
    84 00000044 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
    85                              <1> 	
    86 00000047 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
    86 00000049 [8A06040000000000]  <1>
    87                              <1> 	
    88 00000051 E8B4FFFFFF          <1> 	call save_regs				;just in case
    89                              <1> 	
    90                              <1> 	
    91 00000056 E8C7FFFFFF          <1> 	call setup_memory			;all memory setup at start
    92                              <1> 	
    93                              <1> 	
    94                              <1> 	
    95 0000005B E800080000          <1> 	call vV_entry_point			;Start the program 
    96                              <1> 	
    97                              <1> 	
    98 00000060 E8B1FFFFFF          <1> 	call restore_regs
    99                              <1> 	
   100                              <1> 
   101                              <1> ;------------------------------------------------------------------------------
   102                              <1> 
   103 00000065 B83C000000          <1> 	mov rax, SYS_EXIT
   104 0000006A BF00000000          <1> 	mov rdi, 0		;Normal exit procedure (no code returned from main)
   105 0000006F 0F05                <1> 	syscall
   106                              <1> 	
   107                              <1> 	
   108                              <1> 	
   109                              <1> 	
   110                              <1> 	
     4                                  %include "vVc/assembly/w_runtime/vV_system00.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5 00000000 <res 00000040>      <1> 	vV_sys_start:	resd 16		;not used now
     6                              <1> 
     7                              <1> 	
     8                              <1> 	
     9                              <1> segment .data
    10                              <1> 
    11                              <1> 
    12                              <1> ;--Start of Memory----------------------------------------------------------
    13                              <1> 
    14                              <1> 	ALIGN 8
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;---------------------Error Managment----------
    18                              <1> 
    19                              <1> 
    20                              <1> ;error vectors	
    21                              <1> 	
    22                              <1> 	vV_error_vectors:
    23 00000000 [FA00000000000000]- <1> 	times 17 dq vV_error_unhandeled
    23 00000000 <rept>              <1>
    24 00000088 [9D00000000000000]  <1> 	dq vV_error_invalid_index
    25 00000090 [FA00000000000000]- <1> 	times 14 dq vV_error_unhandeled
    25 00000090 <rept>              <1>
    26                              <1> 
    27                              <1> 	
    28                              <1> 	
    29                              <1> segment .text
    30                              <1> 
    31                              <1> 
    32                              <1> vV_error:
    33                              <1> 
    34 00000071 52                  <1> 	push rdx
    35                              <1> 	
    36 00000072 4831D2              <1> 	xor rdx , rdx
    37                              <1> 	
    38 00000075 88E2                <1> 	mov dl , ah
    39                              <1> 	
    40 00000077 C0E203              <1> 	shl dl , 3
    41                              <1> 	
    42 0000007A 67FF92[00000000]    <1> 	call [vV_error_vectors + edx]
    43                              <1> 	
    44                              <1> 	
    45 00000081 5A                  <1> 	pop rdx
    46                              <1> 	
    47 00000082 C3                  <1> 	ret
    48                              <1> 	
    49                              <1> 	
    50                              <1> vV_error_fatal:
    51                              <1> 
    52                              <1> 	
    53 00000083 88D0                <1> 	mov al , dl
    54                              <1> 	
    55 00000085 C0E803              <1> 	shr al , 3
    56                              <1> 
    57 00000088 E873FFFFFF          <1> 	call vV_forced_exit
    58                              <1> 	
    59                              <1> vV_bound_error:
    60                              <1> 
    61 0000008D 89FB                <1> 	mov ebx , edi
    62 0000008F B411                <1> 	mov ah , vV_ERR_MEMORY_OUT_OF_BOUND
    63 00000091 E8DBFFFFFF          <1> 	call vV_error	
    64                              <1> 	
    65 00000096 B011                <1> 	mov al , vV_ERR_MEMORY_OUT_OF_BOUND
    66 00000098 E863FFFFFF          <1> 	call vV_forced_exit
    67                              <1> 	
    68                              <1> 	
    69                              <1> 	
    70                              <1> 	
    71                              <1> 	
    72                              <1> 	
    73                              <1> 
    74                              <1> 	
     5                                  %include "vVc/assembly/w_runtime/vV_errors.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> segment .bss
     5                              <1> 
     6                              <1> 
     7                              <1> 	ALIGNB 4
     8                              <1> 		
     9                              <1> 	vV_error_buffer:
    10 00000040 <res 00000040>      <1> 	resb 64
    11                              <1> 	vV_end_err_buff:
    12                              <1> 	vV_error_buffer_size equ vV_end_err_buff-vV_error_buffer
    13                              <1> 
    14                              <1> 
    15                              <1> 
    16                              <1> 
    17                              <1> segment .data
    18                              <1> 
    19                              <1> ;Error String	
    20                              <1> 
    21                              <1> 	
    22                              <1> 	vV_error_msg:
    23 00000100 556E68616E64656C65- <1> 	.default: db "Unhandeled Error "
    23 00000109 64204572726F7220    <1>
    24                              <1> 	default_size equ $-.default
    25 00000111 496E76616C69642049- <1> 	.invalid_index: db "Invalid Index Error : "
    25 0000011A 6E646578204572726F- <1>
    25 00000123 72203A20            <1>
    26                              <1> 	inv_indx_size equ $-.invalid_index
    27                              <1> 
    28                              <1> 
    29                              <1> 
    30                              <1> segment .text
    31                              <1> 
    32                              <1> 
    33                              <1> vV_error_invalid_index:
    34                              <1> 
    35                              <1> 
    36 0000009D 56                  <1> 	push rsi
    37 0000009E 57                  <1> 	push rdi	;Save reg used by syscall
    38 0000009F 4151                <1> 	push r9	;and by conversion func
    39 000000A1 53                  <1> 	push rbx	;Save Arg
    40                              <1> 	
    41 000000A2 BA16000000          <1> 	mov edx , inv_indx_size				;string lenght
    42 000000A7 48BE-               <1> 	mov rsi , vV_error_msg.invalid_index			;strng ptr
    42 000000A9 [1101000000000000]  <1>
    43 000000B1 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    44 000000B6 B801000000          <1> 	mov rax , 1				; Write sysCall
    45 000000BB 0F05                <1> 	syscall	
    46                              <1> 	
    47                              <1> 	
    48 000000BD 58                  <1> 	pop rax
    49                              <1> 	
    50 000000BE BF[40000000]        <1> 	mov edi , vV_error_buffer
    51 000000C3 41B940000000        <1> 	mov r9d , vV_error_buffer_size
    52 000000C9 E8A0030000          <1> 	call vV_ascii_int_to_dec	
    53                              <1> 
    54 000000CE 67C680[40000000]0A  <1> 	mov BYTE[vV_error_buffer + eax] , 0xa
    55                              <1> 	
    56 000000D6 FFC0                <1> 	inc eax
    57                              <1> 	
    58 000000D8 89C2                <1> 	mov edx , eax				;string lenght
    59 000000DA 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
    59 000000DC [4000000000000000]  <1>
    60 000000E4 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    61 000000E9 B801000000          <1> 	mov rax , 1				; Write sysCall
    62 000000EE 0F05                <1> 	syscall
    63                              <1> 	
    64 000000F0 4159                <1> 	pop r9
    65 000000F2 5F                  <1> 	pop rdi
    66 000000F3 5E                  <1> 	pop rsi
    67                              <1> 	
    68 000000F4 E88AFFFFFF          <1> 	call vV_error_fatal
    69                              <1> 	
    70 000000F9 C3                  <1> 	ret
    71                              <1> 	
    72                              <1> 	
    73                              <1> 	
    74                              <1> 
    75                              <1> 	
    76                              <1> vV_error_unhandeled:
    77                              <1> 
    78                              <1> 
    79 000000FA 56                  <1> 	push rsi
    80 000000FB 57                  <1> 	push rdi	;Save reg used by syscall
    81 000000FC 4151                <1> 	push r9	;and by conversion func
    82                              <1> 	
    83                              <1> 	
    84                              <1> ;push rax	;Save flags ( and value)
    85                              <1> 
    86 000000FE 53                  <1> 	push rbx	;Save Arg
    87 000000FF 52                  <1> push rdx		;Save error code
    88                              <1> 	
    89                              <1> 	
    90 00000100 BA11000000          <1> 	mov edx , default_size				;string lenght
    91 00000105 48BE-               <1> 	mov rsi , vV_error_msg.default			;strng ptr
    91 00000107 [0001000000000000]  <1>
    92 0000010F BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    93 00000114 B801000000          <1> 	mov rax , 1				; Write sysCall
    94 00000119 0F05                <1> 	syscall	
    95                              <1> 	
    96                              <1> 	
    97 0000011B 58                  <1> pop rax	;error code
    98                              <1> 
    99                              <1> 
   100 0000011C C0E803              <1> 	shr al , 3
   101                              <1> 	
   102                              <1> 	
   103 0000011F BF[40000000]        <1> 	mov edi , vV_error_buffer
   104 00000124 41B940000000        <1> 	mov r9d , vV_error_buffer_size
   105                              <1> 	
   106                              <1> 
   107 0000012A E83F030000          <1> 	call vV_ascii_int_to_dec	
   108                              <1> 	
   109                              <1> 		
   110                              <1> 	
   111 0000012F 67C680[40000000]20  <1> 	mov BYTE[vV_error_buffer + eax] , ' '
   112                              <1> 	
   113                              <1> 	
   114                              <1> 	
   115                              <1> 	
   116 00000137 67488DB8[41000000]  <1> 	lea rdi , [vV_error_buffer + eax + 1]
   117 0000013F 4129F9              <1> 	sub r9d , edi
   118                              <1> 	
   119 00000142 58                  <1> 	pop rax
   120                              <1> 	
   121 00000143 E826030000          <1> 	call vV_ascii_int_to_dec
   122                              <1> 	
   123 00000148 674C8D0C07          <1> 	lea r9 , [edi + eax]
   124                              <1> 	
   125 0000014D 41C6010A            <1> 	mov BYTE[r9] , 0xa
   126                              <1> 	
   127 00000151 49FFC1              <1> 	inc r9
   128                              <1> 	
   129 00000154 4981E9[40000000]    <1> 	sub r9 , vV_error_buffer
   130                              <1> 	
   131 0000015B 4489CA              <1> 	mov edx , r9d				;string lenght
   132 0000015E 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
   132 00000160 [4000000000000000]  <1>
   133 00000168 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
   134 0000016D B801000000          <1> 	mov rax , 1				; Write sysCall
   135 00000172 0F05                <1> 	syscall
   136                              <1> 	
   137 00000174 4159                <1> 	pop r9
   138 00000176 5F                  <1> 	pop rdi
   139 00000177 5E                  <1> 	pop rsi
   140                              <1> 	
   141                              <1> 	
   142                              <1> 	
   143                              <1> 	
   144 00000178 C3                  <1> 	ret
   145                              <1> 	
   146                              <1> 	
   147                              <1> 	
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151                              <1> 		
   152                              <1> 		
   153                              <1> 		
   154                              <1> 		
   155                              <1> 		
   156                              <1> 		
   157                              <1> 		
   158                              <1> 		
   159                              <1> 		
   160                              <1> 		
   161                              <1> 		
   162                              <1> 		
   163                              <1> 		
   164                              <1> 		
   165                              <1> 		
   166                              <1> 		
   167                              <1> 
     6                                  %include "vVc/assembly/w_runtime/vV_system10.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5                              <1> 	
     6                              <1> 	
     7                              <1> 	;------------Input Buffer
     8                              <1> 
     9                              <1> 
    10                              <1> 	
    11 00000080 <res 00000004>      <1> 	vV_input_buffer_content: resb 4			;Input Buffer current content
    12 00000084 <res 000000FF>      <1> 	vV_input_buffer: resb vV_input_buffer_size		;Input Buffer of 256 char
    13                              <1> 	
    14                              <1> 	
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;------------Output Buffer
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22 00000183 <res 00000004>      <1> 	vV_output_buffer_content: resb 4			;Output Buffer current content
    23 00000187 <res 000000FF>      <1> 	vV_output_buffer: resb vV_output_buffer_size		;Output Buffer of 256 char
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> 	
    28                              <1> ;------------Number Buffer
    29                              <1> 
    30                              <1> 
    31                              <1> 	
    32                              <1> 	
    33                              <1> 	;w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34                              <1> 	;endofline: resb 1					;Maybe Not Needed
    35                              <1> 	
    36                              <1> 
    37                              <1> 
    38                              <1> segment .data
    39 00000127 90                  <1> 	ALIGN 4
    40 00000128 [6E040000]          <1> 	vV_sys_format_mode: dd vV_ascii_int_to_dec
     7                                  %include "vVc/assembly/w_runtime/vV_io.asm"			
     1                              <1> 
     2                              <1> 
     3                              <1> ;%include "vVc/assembly/w_runtime/vV_ascii.asm"
     4                              <1> 
     5                              <1> 
     6                              <1> ;Group all read/wrie syscalls
     7                              <1> 
     8                              <1> ;global convert_to_string
     9                              <1> ;global convert_to_int
    10                              <1> 
    11                              <1> ;extern vV_input_buffer
    12                              <1> ;extern vV_output_buffer
    13                              <1> ;extern w_number_buffer
    14                              <1> 
    15                              <1> global wio_out
    16                              <1> global wio_get
    17                              <1> global wio_get_str_raw
    18                              <1> global wio_get_str_null
    19                              <1> global wio_get_str_nline
    20                              <1> global wio_move_in_to_out
    21                              <1> 
    22                              <1> 
    23                              <1> segment .text 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> 
    28                              <1> 
    29                              <1> vV_io_flush:
    30                              <1> 	
    31                              <1> 	
    32                              <1> 	
    33 00000179 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    34                              <1> 	
    35 00000180 C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    35 00000188 000000              <1>
    36                              <1> 	
    37 0000018B 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    37 0000018D [8701000000000000]  <1>
    38                              <1> 		
    39 00000195 67C682[87010000]0A  <1> 	mov BYTE[vV_output_buffer + edx] , 0xa
    40 0000019D FFC2                <1> 	inc edx
    41                              <1> 		
    42 0000019F BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    43 000001A4 B801000000          <1> 	mov rax , 1					; Write sysCall
    44 000001A9 0F05                <1> 	syscall
    45                              <1> 	
    46                              <1> 	
    47                              <1> 	
    48 000001AB C3                  <1> 	ret
    49                              <1> 	
    50                              <1> 		
    51                              <1> ;-------------------------------------------------------------------------------
    52                              <1> ;-------------------------------------------------------------------------------
    53                              <1> 	
    54                              <1> vV_io_out_buffer_default:
    55                              <1> 
    56 000001AC 448B1425[28010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    57 000001B4 E80F000000          <1> 	call vV_io_out_buffer
    58 000001B9 C3                  <1> 	ret
    59                              <1> 	
    60                              <1> vV_io_out_default:
    61                              <1> 
    62 000001BA 448B1425[28010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    63 000001C2 E80C000000          <1> 	call vV_io_out
    64 000001C7 C3                  <1> 	ret
    65                              <1> 
    66                              <1> ;-------------------------------------------------------------------------------
    67                              <1> ;-------------------------------------------------------------------------------
    68                              <1> 	
    69                              <1> vV_io_out_buffer:				;print str repr of Top Of Stack element
    70                              <1> 						
    71                              <1> 						
    72 000001C8 E811000000          <1> 	call vV_io_out01			
    73 000001CD E84A000000          <1> 	call vV_io_out_buffer_end
    74 000001D2 C3                  <1> 	ret
    75                              <1> 
    76                              <1> ;-------------------------------------------------------------------------------
    77                              <1> 		
    78                              <1> vV_io_out:					;print str repr of Top Of Stack element
    79                              <1> 
    80                              <1> 
    81 000001D3 E806000000          <1> 	call vV_io_out01					
    82 000001D8 E826000000          <1> 	call vV_io_out_direct_end
    83 000001DD C3                  <1> 	ret
    84                              <1> 
    85                              <1> ;-------------------------------------------------------------------------------	
    86                              <1> ;-------------------------------------------------------------------------------	
    87                              <1> 
    88                              <1> vV_io_out01:					;print str repr of Top Of Stack element
    89                              <1> 
    90                              <1> 
    91                              <1> 	vV_pop eax				;get value in eax
    91                              <2> 
    91 000001DE 4983EF04            <2>  sub vV_sp , 4
    91 000001E2 418B07              <2>  mov %1 , [vV_sp]
    91                              <2> 
    92                              <1> 	
    93 000001E5 BF[87010000]        <1> 	mov edi , vV_output_buffer		;set dest as O_buff
    94 000001EA 033C25[83010000]    <1> 	add edi ,DWORD[vV_output_buffer_content]		;set offset to start of freespace
    95                              <1> 	
    96 000001F1 57                  <1> push rdi					;Save buffer origin
    97                              <1> 	
    98 000001F2 41B9FF000000        <1> 	mov r9 , 255				;set Max buffer available	
    99 000001F8 4129F9              <1> 	sub r9d , edi				;#TODO: Stop HardCoding VALUES!!!!
   100 000001FB 41FFD2              <1> 		call r10			;call current conversion format function
   101 000001FE 4831FF              <1> 	xor rdi , rdi
   102                              <1> 	
   103 00000201 5F                  <1> pop rdi						;recover Buffer origin
   104                              <1> 	
   105 00000202 C3                  <1> 	ret
   106                              <1> 
   107                              <1> ;-------------------------------------------------------------------------------	
   108                              <1> 	
   109                              <1> vV_io_out_direct_end:
   110                              <1> 
   111                              <1> 
   112                              <1> 
   113 00000203 67C604070A          <1> 	mov BYTE[edi + eax] , 0xa		;add new_line
   114                              <1> 		
   115 00000208 FFC0                <1> 		inc eax
   116                              <1> 		
   117 0000020A 89C2                <1> 		mov edx , eax				;string lenght		
   118 0000020C 4889FE              <1> 		mov rsi , rdi				;strng ptr
   119 0000020F BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   120 00000214 B801000000          <1> 		mov rax , 1				; Write sysCall
   121 00000219 0F05                <1> 		syscall
   122                              <1> 	
   123 0000021B C3                  <1> 		ret
   124                              <1> 
   125                              <1> ;-------------------------------------------------------------------------------		
   126                              <1> 		
   127                              <1> vV_io_out_buffer_end:
   128                              <1> 
   129 0000021C 010425[83010000]    <1> 	add [vV_output_buffer_content] , eax
   130                              <1> 
   131 00000223 C3                  <1> 	ret
   132                              <1> 
   133                              <1> ;-------------------------------------------------------------------------------
   134                              <1> 
   135                              <1> vV_io_out_char:
   136                              <1> 
   137                              <1> 	
   138 00000224 E827000000          <1> 	call vV_io_read_char
   139 00000229 E8D5FFFFFF          <1> 	call vV_io_out_direct_end
   140                              <1> 	
   141 0000022E C3                  <1> 	ret
   142                              <1> 	
   143                              <1> vV_io_out_packed_char:
   144                              <1> 
   145                              <1> 	
   146 0000022F E842000000          <1> 	call vV_io_read_packed_char
   147                              <1> 	
   148 00000234 E8CAFFFFFF          <1> 	call vV_io_out_direct_end
   149                              <1> 	
   150 00000239 C3                  <1> 	ret
   151                              <1> 	
   152                              <1> vV_io_out_char_buffer:
   153                              <1> 
   154 0000023A E811000000          <1> 	call vV_io_read_char
   155                              <1> 	
   156 0000023F E8D8FFFFFF          <1> 	call vV_io_out_buffer_end
   157                              <1> 	
   158 00000244 C3                  <1> 	ret
   159                              <1> 	
   160                              <1> vV_io_out_packed_char_buffer:
   161                              <1> 
   162 00000245 E82C000000          <1> 	call vV_io_read_packed_char
   163                              <1> 	
   164 0000024A E8CDFFFFFF          <1> 	call vV_io_out_buffer_end
   165                              <1> 	
   166 0000024F C3                  <1> 	ret
   167                              <1> 	
   168                              <1> vV_io_read_char:
   169                              <1> 
   170                              <1> 	vV_pop eax
   170                              <2> 
   170 00000250 4983EF04            <2>  sub vV_sp , 4
   170 00000254 418B07              <2>  mov %1 , [vV_sp]
   170                              <2> 
   171                              <1> 	
   172 00000257 48BF-               <1> 	mov rdi , vV_output_buffer
   172 00000259 [8701000000000000]  <1>
   173 00000261 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   174                              <1> 	
   175 00000268 678807              <1> 	mov [edi] , al
   176                              <1> 	
   177 0000026B BF[87010000]        <1> 	mov edi , vV_output_buffer
   178 00000270 B801000000          <1> 	mov eax , 1
   179                              <1> 	
   180 00000275 C3                  <1> 	ret	
   181                              <1> 	
   182                              <1> vV_io_read_packed_char:
   183                              <1> 
   184                              <1> 	vV_pop eax
   184                              <2> 
   184 00000276 4983EF04            <2>  sub vV_sp , 4
   184 0000027A 418B07              <2>  mov %1 , [vV_sp]
   184                              <2> 
   185                              <1> 	
   186 0000027D 48BF-               <1> 	mov rdi , vV_output_buffer
   186 0000027F [8701000000000000]  <1>
   187 00000287 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   188                              <1> 	
   189 0000028E 678907              <1> 	mov [edi] , eax
   190                              <1> 	
   191 00000291 BF[87010000]        <1> 	mov edi , vV_output_buffer
   192 00000296 B804000000          <1> 	mov eax , 4	
   193                              <1> 	
   194 0000029B C3                  <1> 	ret
   195                              <1> 		
   196                              <1> ;-------------------------------------------------------------------------------
   197                              <1> ;-------------------------------------------------------------------------------
   198                              <1> ;-------------------------------------------------------------------------------
   199                              <1> ;-------------------------------------------------------------------------------
   200                              <1> ;-------------------------------------------------------------------------------
   201                              <1> ;-------------------------------------------------------------------------------
   202                              <1> ;-------------------------------------------------------------------------------
   203                              <1> 	
   204                              <1> vV_io_read:
   205                              <1> 
   206                              <1> 								
   207 0000029C 48BE-               <1> 		mov rsi , vV_input_buffer		;ptr to string destination	
   207 0000029E [8400000000000000]  <1>
   208 000002A6 BAFF000000          <1> 		mov edx , vV_input_buffer_size				;string lenght	
   209 000002AB BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   210 000002B0 B800000000          <1> 		mov rax , 0				; read sysCall
   211                              <1> 		
   212 000002B5 0F05                <1> 		syscall
   213                              <1> 	
   214                              <1> ;-------------Buffer_Overflow_Execption  
   215                              <1> 
   216                              <1> 
   217                              <1> 
   218 000002B7 3DFF000000          <1> 		cmp eax , 255				;Check if Buffer Is Full
   219                              <1> 		
   220 000002BC 721F                <1> 			jb .no_overflow
   221                              <1> 			
   222 000002BE 803C25[82010000]0A  <1> 		cmp BYTE[vV_input_buffer + vV_input_buffer_size-1] , 0xa	;Check if Buffer end with "\n"
   223                              <1> 		
   224 000002C6 7415                <1> 			je .no_overflow
   225                              <1> 		
   226                              <1> 		
   227 000002C8 50                  <1> 			push rax
   228 000002C9 53                  <1> 			push rbx
   229                              <1> 		
   230 000002CA B401                <1> 			mov ah , vV_ERR_IO_I_OVERFLOW
   231 000002CC 6683C800            <1> 			or ax , 0
   232 000002D0 4831DB              <1> 			xor rbx , rbx
   233 000002D3 4889F3              <1> 			mov rbx , rsi
   234                              <1> 		
   235 000002D6 E896FDFFFF          <1> 			call vV_error
   236                              <1> 		
   237 000002DB 5B                  <1> 			pop rbx
   238 000002DC 58                  <1> 			pop rax
   239                              <1> 		
   240                              <1> 			;ret
   241                              <1> 		
   242                              <1> 		.no_overflow:
   243                              <1> 		
   244 000002DD C3                  <1> 			ret
   245                              <1> 		
   246                              <1> 		
   247                              <1> 	
   248                              <1> 	
   249                              <1> vV_io_get_default:
   250                              <1> 
   251 000002DE 41BA[7E030000]      <1> 	mov r10d , vV_ascii_as_dec			;TODO: default settings
   252 000002E4 E801000000          <1> 	call vV_io_get
   253 000002E9 C3                  <1> 	ret
   254                              <1> 	
   255                              <1> 	
   256                              <1> vV_io_get:						;convert inputed value to 
   257                              <1> 							;32bit int, push it on
   258                              <1> 							;the stack
   259 000002EA E8ADFFFFFF          <1> 	call vV_io_read
   260                              <1> 		
   261                              <1> ;----------------------------------------------	
   262                              <1> 
   263 000002EF 53                  <1> 	push rbx				;Save rbx (conversion uses it) 
   264                              <1> 
   265 000002F0 89C3                <1> 		mov ebx , eax 			;send char count by ebx
   266 000002F2 31FF                <1> 		xor edi , edi 			;zero out counter
   267 000002F4 BE[84000000]        <1> 		mov esi , vV_input_buffer	;Set source to I_buffer
   268                              <1> 		
   269                              <1> 
   270 000002F9 41FFD2              <1> 		call r10
   271                              <1> 		
   272 000002FC 5B                  <1> 	pop rbx
   273                              <1> 	
   274                              <1> 		vV_push eax
   274                              <2> 
   274 000002FD 418907              <2>  mov DWORD[vV_sp] , %1
   274 00000300 4983C704            <2>  add vV_sp , 4
   274                              <2> 
   275                              <1> 		
   276 00000304 C3                  <1> 		ret
   277                              <1> 
   278                              <1> 
   279                              <1> ;-------------------------------------------------------------------------------
   280                              <1> ;-------------------------------------------------------------------------------
   281                              <1> 
   282                              <1> 
   283                              <1> vV_io_get_char:
   284                              <1> 
   285                              <1> 
   286 00000305 E892FFFFFF          <1> 	call vV_io_read
   287                              <1> 	
   288 0000030A 31D2                <1> 	xor edx , edx
   289                              <1> 	
   290 0000030C 8A1425[84000000]    <1> 	mov dl , [vV_input_buffer]
   291                              <1> 	
   292                              <1> 	vV_push edx
   292                              <2> 
   292 00000313 418917              <2>  mov DWORD[vV_sp] , %1
   292 00000316 4983C704            <2>  add vV_sp , 4
   292                              <2> 
   293                              <1> 	
   294 0000031A C3                  <1> 	ret
   295                              <1> 	
   296                              <1> vV_io_get_packed_char:
   297                              <1> 
   298 0000031B C70425[84000000]00- <1> 	mov DWORD [vV_input_buffer] , 0
   298 00000323 000000              <1>
   299                              <1> 
   300 00000326 E871FFFFFF          <1> 	call vV_io_read
   301                              <1> 	
   302 0000032B 31D2                <1> 	xor edx , edx
   303                              <1> 	
   304 0000032D 8B1425[84000000]    <1> 	mov edx, [vV_input_buffer]
   305                              <1> 	
   306                              <1> 	vV_push edx
   306                              <2> 
   306 00000334 418917              <2>  mov DWORD[vV_sp] , %1
   306 00000337 4983C704            <2>  add vV_sp , 4
   306                              <2> 
   307                              <1> 	
   308 0000033B C3                  <1> 	ret
   309                              <1> 	
   310                              <1> 		
   311                              <1> 		
   312                              <1> 
   313                              <1> 
   314                              <1> 
     8                                  %include "vVc/assembly/w_runtime/vV_ascii.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> segment .text 
     4                              <1> 
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> vV_ascii_as_hex2:						;Jumped to from parse_num OR called
     9                              <1> 								;use edi as counter/offset in string !Set if direct call
    10                              <1> 								;use esi as source string
    11                              <1> 								;concatenate result in eax
    12                              <1> 								;parse digit in cl
    13                              <1> 								
    14                              <1> 								;use r8 for base
    15                              <1> 								;use r9 for max_value
    16                              <1> 								
    17                              <1> 							
    18                              <1> 	;mov r8 , 16	
    19                              <1> 	
    20                              <1> 	.start_loop:
    21                              <1> 	
    22 0000033C 678A0C3E            <1> 		mov cl , [esi + edi]
    23                              <1> 	
    24                              <1> 		
    25 00000340 80F930              <1> 		cmp cl , 48
    26                              <1> 		
    27 00000343 7265                <1> 			jb vV_ascii_unvalid
    28                              <1> 			
    29 00000345 80F93A              <1> 		cmp cl , 58
    30                              <1> 		
    31 00000348 720D                <1> 			jb .pass_int
    32                              <1> 			
    33 0000034A 80F966              <1> 			cmp cl , 'f'
    34                              <1> 			
    35 0000034D 775B                <1> 				ja vV_ascii_unvalid
    36                              <1> 			
    37 0000034F 80F961              <1> 			cmp cl , 'a'
    38                              <1> 			
    39 00000352 7256                <1> 				jb vV_ascii_unvalid
    40                              <1> 				
    41 00000354 80E927              <1> 			sub cl , 39
    42                              <1> 				
    43                              <1> 			
    44                              <1> 		.pass_int:	
    45                              <1> 			
    46 00000357 80E930              <1> 		sub cl , '0'
    47                              <1> 		
    48                              <1> 		
    49                              <1> 		
    50 0000035A 31D2                <1> 		xor edx , edx
    51                              <1> 		
    52 0000035C F8                  <1> 		clc
    53                              <1> 		
    54 0000035D 41F7E0              <1> 		mul r8d
    55                              <1> 		
    56 00000360 725D                <1> 		jc vV_ascii_overflow
    57                              <1> 		
    58 00000362 01C8                <1> 		add eax , ecx
    59                              <1> 		
    60                              <1> 		.pass02:
    61                              <1> 		
    62 00000364 FFC7                <1> 		inc edi
    63                              <1> 		
    64 00000366 39DF                <1> 		cmp edi , ebx
    65                              <1> 		
    66 00000368 72D2                <1> 		jb .start_loop
    67                              <1> 
    68                              <1> 		
    69 0000036A C3                  <1> 		ret	
    70                              <1> 		
    71                              <1> 		
    72                              <1> ;
    73                              <1> ;				ebx		esi
    74                              <1> ;	ascii_to_format( buffer_size , buffer_adress ) 
    75                              <1> ;		
    76                              <1> ;
    77                              <1> ;	set:	rcx,rdx (rax) to 0
    78                              <1> ;		r8,r9
    79                              <1> ;		
    80                              <1> ;	call: specialized dexodefunction
    81                              <1> 		
    82                              <1> vV_ascii_as_hex:
    83                              <1> 	
    84 0000036B FFCB                <1> 	dec ebx
    85 0000036D 41B810000000        <1> 	mov r8 , 16	
    86 00000373 4831C0              <1> 	xor rax , rax 		;(just in case not switching from dec mode)			
    87 00000376 4831C9              <1> 	xor rcx , rcx
    88 00000379 4831D2              <1> 	xor rdx , rdx
    89 0000037C EBBE                <1> 	jmp vV_ascii_as_hex2
    90                              <1> 
    91                              <1> vV_ascii_as_dec:
    92                              <1> 
    93 0000037E FFCB                <1> 	dec ebx
    94 00000380 41B80A000000        <1> 	mov r8 , 10			
    95 00000386 41B93A000000        <1> 	mov r9 , 58
    96 0000038C 4831C9              <1> 	xor rcx , rcx
    97 0000038F 4831D2              <1> 	xor rdx , rdx
    98 00000392 EB5E                <1> 	jmp vV_ascii_as_decbin
    99                              <1> 
   100                              <1> vV_ascii_as_bin:
   101                              <1> 
   102 00000394 FFCB                <1> 	dec ebx
   103 00000396 41B802000000        <1> 	mov r8 , 2			
   104 0000039C 41B932000000        <1> 	mov r9 , 50
   105 000003A2 4831C9              <1> 	xor rcx , rcx
   106 000003A5 4831D2              <1> 	xor rdx , rdx
   107                              <1> 	
   108 000003A8 EB48                <1> 	jmp vV_ascii_as_decbin
   109                              <1> 	
   110                              <1> vV_ascii_unvalid:
   111                              <1> 	
   112                              <1> 		;mov rax , 24;	#TODO: Defined Errors code/ data in file
   113                              <1> 		;xor rdx , rdx
   114                              <1> 		;mov dl , cl
   115                              <1> 		
   116                              <1> 		;call w_forced_exit
   117                              <1> 		
   118 000003AA 50                  <1> 		push rax
   119 000003AB 53                  <1> 		push rbx
   120                              <1> 		
   121 000003AC B403                <1> 		mov ah , vV_ERR_IO_I_UNVALID
   122 000003AE 6683C800            <1> 		or ax , 0
   123 000003B2 4831DB              <1> 		xor rbx , rbx
   124 000003B5 88CB                <1> 		mov bl , cl
   125                              <1> 		
   126 000003B7 E8B5FCFFFF          <1> 		call vV_error
   127                              <1> 		
   128 000003BC 5B                  <1> 		pop rbx
   129 000003BD 58                  <1> 		pop rax
   130                              <1> 		
   131 000003BE C3                  <1> 		ret
   132                              <1> 		
   133                              <1> 		
   134                              <1> 		
   135                              <1> 		
   136                              <1> vV_ascii_overflow:
   137                              <1> 	
   138 000003BF 50                  <1> 		push rax
   139 000003C0 53                  <1> 		push rbx
   140                              <1> 		
   141 000003C1 4831DB              <1> 		xor rbx , rbx
   142 000003C4 4889C3              <1> 		mov rbx , rax
   143                              <1> 		
   144                              <1> 		;or rbx , 0x00010000
   145                              <1> 		
   146 000003C7 B401                <1> 		mov ah , vV_ERR_IO_I_OVERFLOW
   147 000003C9 6683C800            <1> 		or ax , 0
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151 000003CD E89FFCFFFF          <1> 		call vV_error
   152                              <1> 		
   153 000003D2 5B                  <1> 		pop rbx
   154 000003D3 58                  <1> 		pop rax
   155                              <1> 		
   156                              <1> 		;TODO: Maybe use vV_error return value for decision making
   157                              <1> 		
   158 000003D4 B8FFFFFFFF          <1> 		mov eax , -1
   159                              <1> 		
   160 000003D9 C3                  <1> 		ret
   161                              <1> 		
   162                              <1> 		
   163                              <1> vV_ascii_change_to_hex:
   164                              <1> 		
   165 000003DA 83F800              <1> 		cmp eax , 0
   166                              <1> 			
   167 000003DD 75CB                <1> 			jne vV_ascii_unvalid
   168                              <1> 			
   169 000003DF 41B810000000        <1> 		mov r8 , 16
   170 000003E5 4831C9              <1> 		xor rcx , rcx
   171 000003E8 4831C0              <1> 		xor rax ,rax
   172                              <1> 				
   173 000003EB FFC7                <1> 		inc edi
   174 000003ED E94AFFFFFF          <1> 		jmp vV_ascii_as_hex2		
   175                              <1> 		
   176                              <1> 	
   177                              <1> 
   178                              <1> 
   179                              <1> vV_ascii_as_decbin:						;ebx: number of char to read
   180                              <1> 
   181                              <1> 	
   182                              <1> 
   183                              <1> 								;use edi as counter/offset in string
   184                              <1> 								;concatenate result in eax
   185                              <1> 								;parse digit in cl
   186                              <1> 								
   187                              <1> 								;use r8 for base
   188                              <1> 								;use r9 for max_value					
   189                              <1> 								;itou
   190                              <1> 	;xor edi, edi			;should be set by caller
   191 000003F2 4831C0              <1> 	xor rax , rax
   192                              <1> 	
   193 000003F5 4831C9              <1> 	xor rcx , rcx
   194                              <1> 	
   195 000003F8 4831D2              <1> 	xor rdx , rdx
   196                              <1> 	
   197                              <1> 	
   198                              <1> 	.start_loop:
   199                              <1> 	
   200 000003FB 678A0C3E            <1> 		mov cl , [esi + edi]
   201                              <1> 		
   202                              <1> 		
   203 000003FF 80F962              <1> 		cmp cl , 'b'										
   204 00000402 7513                <1> 			jne .pass01
   205                              <1> 		
   206                              <1> 		.format_change:
   207                              <1> 			
   208 00000404 83F800              <1> 			cmp eax , 0
   209                              <1> 			
   210 00000407 75A1                <1> 				jne vV_ascii_unvalid
   211                              <1> 				
   212 00000409 41B802000000        <1> 			mov r8 , 2
   213                              <1> 			
   214 0000040F 41B932000000        <1> 			mov r9 , 50
   215                              <1> 	
   216 00000415 EB26                <1> 			jmp .pass02
   217                              <1> 		
   218                              <1> 		
   219                              <1> 	
   220                              <1> 		.pass01:
   221                              <1> 		
   222 00000417 80F968              <1> 		cmp cl , 'h'											
   223 0000041A 74BE                <1> 			je vV_ascii_change_to_hex
   224 0000041C 80F978              <1> 		cmp cl , 'x'											
   225 0000041F 74B9                <1> 			je vV_ascii_change_to_hex
   226                              <1> 			
   227                              <1> 			
   228 00000421 4438C9              <1> 		cmp cl , r9b
   229                              <1> 		
   230 00000424 7384                <1> 			jae vV_ascii_unvalid
   231                              <1> 		
   232 00000426 80F930              <1> 		cmp cl , 48
   233                              <1> 		
   234 00000429 0F827BFFFFFF        <1> 			jb vV_ascii_unvalid
   235                              <1> 			
   236                              <1> 		
   237                              <1> 			
   238 0000042F 80E930              <1> 		sub cl , 48
   239                              <1> 		
   240 00000432 4831D2              <1> 		xor rdx , rdx
   241 00000435 F8                  <1> 		clc
   242                              <1> 		
   243 00000436 41F7E0              <1> 		mul r8d
   244                              <1> 		
   245 00000439 7284                <1> 		jc vV_ascii_overflow
   246                              <1> 		
   247 0000043B 01C8                <1> 		add eax , ecx
   248                              <1> 		
   249                              <1> 		.pass02:
   250                              <1> 		
   251 0000043D FFC7                <1> 		inc edi
   252                              <1> 		
   253 0000043F 39DF                <1> 		cmp edi , ebx
   254                              <1> 		
   255 00000441 72B8                <1> 		jb .start_loop
   256                              <1> 		
   257                              <1> 		
   258 00000443 C3                  <1> 		ret			; result should be in eax
   259                              <1> 		
   260                              <1> 
   261                              <1> 	
   262                              <1> ;------------------------------------------------------------------------------------------
   263                              <1> ;------------------------------------------------------------------------------------------
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> vV_ascii_int_to_hex:					;value in eax
   268                              <1> 						;dest in rdi
   269                              <1> 
   270                              <1> 
   271                              <1> 
   272 00000444 31C9                <1> 	xor ecx , ecx	
   273                              <1> 	
   274 00000446 BE10000000          <1> 	mov esi , 16
   275                              <1> 
   276                              <1> 	
   277                              <1> 	.loop01:
   278                              <1> 	
   279 0000044B 4831D2              <1> 		xor rdx , rdx
   280                              <1> 		
   281 0000044E F7F6                <1> 		div esi
   282                              <1> 		
   283                              <1> 		
   284 00000450 80FA0A              <1> 		cmp dl , 10
   285                              <1> 		
   286 00000453 7203                <1> 		jb .dec
   287                              <1> 		
   288 00000455 80C207              <1> 			add dl , 7
   289                              <1> 		
   290                              <1> 		.dec:
   291                              <1> 		
   292 00000458 80C230              <1> 			add dl , '0'
   293                              <1> 		
   294                              <1> 		
   295 0000045B 52                  <1> 		push rdx
   296                              <1> 		
   297 0000045C FFC1                <1> 		inc ecx
   298                              <1> 		
   299 0000045E 39F0                <1> 		cmp eax , esi
   300                              <1> 		
   301 00000460 73E9                <1> 		jae .loop01
   302                              <1> 	
   303                              <1> 	
   304 00000462 3C0A                <1> 	cmp al , 10
   305                              <1> 		
   306 00000464 7202                <1> 		jb .dec2
   307                              <1> 		
   308 00000466 0407                <1> 			add al , 7
   309                              <1> 		
   310                              <1> 		.dec2:
   311                              <1> 		
   312 00000468 0430                <1> 			add al , '0'	
   313 0000046A 8807                <1> 	mov [rdi] , al
   314                              <1> 	
   315 0000046C EB1B                <1> 	jmp vV_ascii_pop_digits
   316                              <1> 		
   317                              <1> 	
   318                              <1> 	
   319                              <1> 	
   320                              <1> vV_ascii_int_to_dec:					;value in eax
   321                              <1> 						;dest in rdi
   322                              <1> 						;max_dest_size in r9d
   323                              <1> 
   324                              <1> 
   325                              <1> 
   326 0000046E 31C9                <1> 	xor ecx , ecx	
   327                              <1> 	
   328 00000470 BE0A000000          <1> 	mov esi , 10
   329                              <1> 	
   330                              <1> 
   331                              <1> 
   332                              <1> 	
   333                              <1> 	.loop01:
   334                              <1> 	
   335 00000475 4831D2              <1> 		xor rdx , rdx
   336                              <1> 		
   337 00000478 F7F6                <1> 		div esi
   338                              <1> 		
   339                              <1> 		
   340 0000047A 80C230              <1> 		add dl , '0'
   341 0000047D 52                  <1> 		push rdx
   342                              <1> 		
   343 0000047E FFC1                <1> 		inc ecx
   344                              <1> 		
   345 00000480 83F80A              <1> 		cmp eax , 10
   346                              <1> 		
   347 00000483 73F0                <1> 		jae .loop01
   348                              <1> 	
   349 00000485 0430                <1> 	add al , '0'	
   350 00000487 8807                <1> 	mov [rdi] , al
   351                              <1> 		
   352                              <1> 	
   353                              <1> 		
   354                              <1> vV_ascii_pop_digits:			; Need nb of digits currently on stack(ecx)
   355                              <1> 						;dest in rdi
   356 00000489 41B801000000        <1> 		mov r8d , 1
   357 0000048F FFC1                <1> 		inc ecx
   358                              <1> 		
   359 00000491 4439C9              <1> 		cmp ecx , r9d
   360                              <1> 		
   361 00000494 7219                <1> 		jb .loopstart
   362                              <1> 		
   363                              <1> 	
   364 00000496 50                  <1> 			push rax
   365 00000497 53                  <1> 			push rbx
   366                              <1> 		
   367 00000498 B410                <1> 			mov ah , vV_ERR_MEMORY_BUFFER_LIMIT
   368 0000049A 6683C800            <1> 			or ax , 0
   369 0000049E 4831DB              <1> 			xor rbx , rbx
   370 000004A1 89FB                <1> 			mov ebx , edi
   371                              <1> 		
   372 000004A3 E8C9FBFFFF          <1> 			call vV_error
   373                              <1> 		
   374 000004A8 5B                  <1> 			pop rbx
   375 000004A9 58                  <1> 			pop rax
   376                              <1> 			
   377 000004AA 4489C9              <1> 			mov ecx , r9d		;Should protect memory..
   378 000004AD FFC9                <1> 			dec ecx		;will need testing
   379                              <1> 		
   380                              <1> 						
   381                              <1> 		.loopstart:
   382                              <1> 		
   383 000004AF 5A                  <1> 			pop rdx
   384 000004B0 6742881407          <1> 			mov BYTE[edi + r8d] , dl
   385 000004B5 41FFC0              <1> 			inc r8d
   386                              <1> 			
   387 000004B8 4139C8              <1> 			cmp r8d , ecx
   388                              <1> 		
   389 000004BB 72F2                <1> 		jb .loopstart
   390                              <1> 	
   391                              <1> 	
   392 000004BD 89C8                <1> 		mov eax , ecx
   393                              <1> 		
   394 000004BF C3                  <1> 		ret	
   395                              <1> 	
   396                              <1> 	
   397                              <1> vV_ascii_int_to_bin:					;value in eax, 
   398                              <1> 							
   399                              <1> 
   400                              <1> 
   401 000004C0 31C9                <1> 	xor ecx , ecx
   402                              <1> 	
   403                              <1> 	
   404                              <1> 	.loop01:
   405                              <1> 	
   406                              <1> 		
   407 000004C2 D1E8                <1> 		shr eax , 1
   408                              <1> 		
   409 000004C4 7205                <1> 		jc .one
   410                              <1> 		
   411 000004C6 B230                <1> 			mov dl , '0'
   412 000004C8 52                  <1> 			push rdx
   413                              <1> 			
   414 000004C9 EB03                <1> 		jmp .next
   415                              <1> 		.one:
   416                              <1> 			
   417 000004CB B231                <1> 			mov dl , '1'
   418 000004CD 52                  <1> 			push rdx
   419                              <1> 		
   420                              <1> 		.next:
   421                              <1> 		
   422 000004CE FFC1                <1> 		inc ecx
   423                              <1> 		
   424 000004D0 83F801              <1> 		cmp eax , 1
   425                              <1> 		
   426 000004D3 77ED                <1> 		ja .loop01
   427                              <1> 	
   428 000004D5 0430                <1> 	add al , '0'	
   429 000004D7 8807                <1> 	mov [rdi] , al
   430                              <1> 	
   431 000004D9 EBAE                <1> 	jmp vV_ascii_pop_digits
   432                              <1> 	
   433                              <1> 	
   434                              <1> ;Will need a special version for String stack
   435                              <1> 
   436                              <1> 
   437                              <1> 
   438                              <1> 
   439                              <1> 
   440                              <1> 
   441                              <1> 
     9                                  %include "w_samples/assembly/rule110_vars.was"	
     1                              <1>  segment .data 
     2                              <1> 
     3                              <1>  i_global:
     4 0000012C 0000000000000000    <1> .currentIter: dq 0
     5 00000134 0A08000000000000    <1> .max: dq 2058
     6 0000013C 0000000000000000    <1> .boardPad: dq 0
     7 00000144 FE00000000000000    <1> .size: dq 254
     8                              <1>  segment .bss 
     9                              <1> 
    10                              <1> 	u_global:
    11 00000286 <res 00000004>      <1> .index: resb 4 
    12 0000028A <res 000003FC>      <1> .board: resb 1020 
    13 00000686 <res 00000004>      <1> .saved: resb 4 
    10                                  %include "vVc/assembly/w_runtime/vV_system90.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	
     5                              <1> 	
     6                              <1> 	stacks: 
     7                              <1> 
     8                              <1> 
     9 0000068A <res 00040000>      <1> 	string_stack_start: resb 262144
    10                              <1> 
    11                              <1> 
    12                              <1> 	
    13                              <1> 	
    14                              <1> 						
    15 0004068A <res 00020000>      <1> 	fake_stack_start: resb 131072
    11                                  
    12                                  
    13                                  
    14                                  global w_entry_point
    15                                  
    16                                  
    17                                  
    18                                  segment .text 
    19                                  
    20                                  
    21                                  set_next:		
    22 000004DB 55                      	push rbp	
    23 000004DC 4889E5                  	mov rbp , rsp	
    24                                  
    25                                  ;------Setup Phase
    26                                  
    27                                  ;------Init Phase
    28                                  
    29                                  .tailcall:		;Body Section	
    30                                  
    31                                   ;OpADR: [0]  ; ADD opcode 					
    32                                  
    33 000004DF 418B47F8                	mov eax , vV_2nd			
    34 000004E3 410347FC                	add eax , vV_top			
    35 000004E7 418947F8                	mov vV_2nd , eax			
    36                                  
    37                                  	vV_dec_sp 1		
    37                              <1> 
    37 000004EB 4983EF04            <1>  sub vV_sp , cell(%1)
    37                              <1> 
    38                                  
    39                                   ;OpADR: [1]  ; DUP opcode (1)			
    40                                  
    41                                  	vV_dup 1			
    41                              <1> 
    41 000004EF B901000000          <1>  mov ecx , %1
    41 000004F4 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
    41 000004F8 4C89FF              <1>  mov rdi , vV_sp
    41                              <1> 
    41 000004FB F3A5                <1>  rep movsd
    41                              <1> 
    41 000004FD 4983C704            <1>  add vV_sp , cell(%1)
    41                              <1> 
    42                                  
    43                                  
    44                                   ;OpADR: [2]  ; PUSH opcode 
    45                                  
    46                                  	vV_push 0 
    46                              <1> 
    46 00000501 41C70700000000      <1>  mov DWORD[vV_sp] , %1
    46 00000508 4983C704            <1>  add vV_sp , 4
    46                              <1> 
    47                                  
    48                                  
    49                                   ;OpADR: [3]  ; EQUAL opcode					
    50                                  
    51 0000050C 418B47FC                	mov eax , vV_top			
    52 00000510 413947F8                	cmp DWORD vV_2nd , eax			
    53                                  
    54 00000514 75(0B)                  	jnz short 0xb				
    55                                  
    56 00000516 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
    57                                  
    58 0000051E EB(09)                  	jmp short 0x9				
    59                                  
    60 00000520 41C747F800000000        			mov DWORD vV_2nd , 0	
    61                                  
    62                                  	vV_dec_sp 1				
    62                              <1> 
    62 00000528 4983EF04            <1>  sub vV_sp , cell(%1)
    62                              <1> 
    63                                  
    64                                   ;OpADR: [4]  ; IF opcode					
    65                                  
    66                                  	vV_dec_sp 1			
    66                              <1> 
    66 0000052C 4983EF04            <1>  sub vV_sp , cell(%1)
    66                              <1> 
    67 00000530 41830F00                	or DWORD[vV_sp] , 0			
    68 00000534 7418                    	je wblock_5	
    69                                  
    70                                   ;OpADR: [5]  ; DROP opcode 
    71                                  
    72 00000536 4983EF04                	sub vV_sp , 4	
    73                                  
    74                                   ;OpADR: [6]  ; DROP opcode 
    75                                  
    76 0000053A 4983EF04                	sub vV_sp , 4	
    77                                  
    78                                   ;OpADR: [7]  ; PUSH opcode 
    79                                  
    80                                  	vV_push 0 
    80                              <1> 
    80 0000053E 41C70700000000      <1>  mov DWORD[vV_sp] , %1
    80 00000545 4983C704            <1>  add vV_sp , 4
    80                              <1> 
    81                                  
    82                                  
    83                                   ;OpADR: [8]  ; ELIF opcode					
    84                                  
    85 00000549 E9AD000000              	jmp wblock_4	
    86                                  
    87                                  
    88                                  	wblock_5:		
    89                                  
    90                                  ;------------------------------------------------------
    91                                  
    92                                  
    93                                   ;OpADR: [9]  ; DUP opcode (1)			
    94                                  
    95                                  	vV_dup 1			
    95                              <1> 
    95 0000054E B901000000          <1>  mov ecx , %1
    95 00000553 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
    95 00000557 4C89FF              <1>  mov rdi , vV_sp
    95                              <1> 
    95 0000055A F3A5                <1>  rep movsd
    95                              <1> 
    95 0000055C 4983C704            <1>  add vV_sp , cell(%1)
    95                              <1> 
    96                                  
    97                                  
    98                                   ;OpADR: [10]  ; PUSH opcode 
    99                                  
   100                                  	vV_push 2 
   100                              <1> 
   100 00000560 41C70702000000      <1>  mov DWORD[vV_sp] , %1
   100 00000567 4983C704            <1>  add vV_sp , 4
   100                              <1> 
   101                                  
   102                                  
   103                                   ;OpADR: [11]  ; EQUAL opcode					
   104                                  
   105 0000056B 418B47FC                	mov eax , vV_top			
   106 0000056F 413947F8                	cmp DWORD vV_2nd , eax			
   107                                  
   108 00000573 75(0B)                  	jnz short 0xb				
   109                                  
   110 00000575 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   111                                  
   112 0000057D EB(09)                  	jmp short 0x9				
   113                                  
   114 0000057F 41C747F800000000        			mov DWORD vV_2nd , 0	
   115                                  
   116                                  	vV_dec_sp 1				
   116                              <1> 
   116 00000587 4983EF04            <1>  sub vV_sp , cell(%1)
   116                              <1> 
   117                                  
   118                                   ;OpADR: [12]  ; IF opcode					
   119                                  
   120                                  	vV_dec_sp 1			
   120                              <1> 
   120 0000058B 4983EF04            <1>  sub vV_sp , cell(%1)
   120                              <1> 
   121 0000058F 41830F00                	or DWORD[vV_sp] , 0			
   122 00000593 7453                    	je wblock_3	
   123                                  
   124                                   ;OpADR: [13]  ; DROP opcode 
   125                                  
   126 00000595 4983EF04                	sub vV_sp , 4	
   127                                  
   128                                   ;OpADR: [14]  ; PUSH opcode 
   129                                  
   130                                  	vV_push 0 
   130                              <1> 
   130 00000599 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   130 000005A0 4983C704            <1>  add vV_sp , 4
   130                              <1> 
   131                                  
   132                                  
   133                                   ;OpADR: [15]  ; EQUAL opcode					
   134                                  
   135 000005A4 418B47FC                	mov eax , vV_top			
   136 000005A8 413947F8                	cmp DWORD vV_2nd , eax			
   137                                  
   138 000005AC 75(0B)                  	jnz short 0xb				
   139                                  
   140 000005AE 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   141                                  
   142 000005B6 EB(09)                  	jmp short 0x9				
   143                                  
   144 000005B8 41C747F800000000        			mov DWORD vV_2nd , 0	
   145                                  
   146                                  	vV_dec_sp 1				
   146                              <1> 
   146 000005C0 4983EF04            <1>  sub vV_sp , cell(%1)
   146                              <1> 
   147                                  
   148                                   ;OpADR: [16]  ; IF opcode					
   149                                  
   150                                  	vV_dec_sp 1			
   150                              <1> 
   150 000005C4 4983EF04            <1>  sub vV_sp , cell(%1)
   150                              <1> 
   151 000005C8 41830F00                	or DWORD[vV_sp] , 0			
   152 000005CC 740D                    	je wblock_1	
   153                                  
   154                                   ;OpADR: [17]  ; PUSH opcode 
   155                                  
   156                                  	vV_push 1 
   156                              <1> 
   156 000005CE 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   156 000005D5 4983C704            <1>  add vV_sp , 4
   156                              <1> 
   157                                  
   158                                  
   159                                   ;OpADR: [18]  ; ELIF opcode					
   160                                  
   161 000005D9 EB0B                    	jmp wblock_0	
   162                                  
   163                                  
   164                                  	wblock_1:		
   165                                  
   166                                  ;------------------------------------------------------
   167                                  
   168                                  
   169                                   ;OpADR: [19]  ; PUSH opcode 
   170                                  
   171                                  	vV_push 0 
   171                              <1> 
   171 000005DB 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   171 000005E2 4983C704            <1>  add vV_sp , 4
   171                              <1> 
   172                                  
   173                                  
   174                                  
   175                                  	wblock_0:		
   176                                  
   177                                  ;------------------------------------------------------
   178                                  
   179                                  
   180                                   ;OpADR: [20]  ; ELIF opcode					
   181                                  
   182 000005E6 EB13                    	jmp wblock_4	
   183                                  
   184                                  
   185                                  	wblock_3:		
   186                                  
   187                                  ;------------------------------------------------------
   188                                  
   189                                  
   190                                   ;OpADR: [21]  ; DROP opcode 
   191                                  
   192 000005E8 4983EF04                	sub vV_sp , 4	
   193                                  
   194                                   ;OpADR: [22]  ; DROP opcode 
   195                                  
   196 000005EC 4983EF04                	sub vV_sp , 4	
   197                                  
   198                                   ;OpADR: [23]  ; PUSH opcode 
   199                                  
   200                                  	vV_push 1 
   200                              <1> 
   200 000005F0 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   200 000005F7 4983C704            <1>  add vV_sp , 4
   200                              <1> 
   201                                  
   202                                  
   203                                  
   204                                  	wblock_4:		
   205                                  
   206                                  ;------------------------------------------------------
   207                                  
   208                                  
   209                                   ;OpADR: [24]  ; End of func opcode					
   210                                  
   211                                  
   212                                  ;------Cleanup Phase
   213                                  
   214                                  ;------frame restore Phase
   215 000005FB 4889EC                  	mov rsp , rbp	
   216 000005FE 5D                      	pop rbp	
   217 000005FF C3                      	ret	
   218                                  popup:		
   219 00000600 55                      	push rbp	
   220 00000601 4889E5                  	mov rbp , rsp	
   221                                  
   222                                  ;------Setup Phase
   223                                  
   224                                  ;------Init Phase
   225                                  
   226                                  .tailcall:		;Body Section	
   227                                  
   228                                   ;OpADR: [25]  ; PUSH opcode 
   229                                  
   230                                  	vV_push 540680240 
   230                              <1> 
   230 00000604 41C70730203A20      <1>  mov DWORD[vV_sp] , %1
   230 0000060B 4983C704            <1>  add vV_sp , 4
   230                              <1> 
   231                                  
   232                                  
   233                                   ;OpADR: [26]  ; PUSH opcode 
   234                                  
   235                                  	vV_push 825303141 
   235                              <1> 
   235 0000060F 41C70765203131      <1>  mov DWORD[vV_sp] , %1
   235 00000616 4983C704            <1>  add vV_sp , 4
   235                              <1> 
   236                                  
   237                                  
   238                                   ;OpADR: [27]  ; PUSH opcode 
   239                                  
   240                                  	vV_push 1819636256 
   240                              <1> 
   240 0000061A 41C7072072756C      <1>  mov DWORD[vV_sp] , %1
   240 00000621 4983C704            <1>  add vV_sp , 4
   240                              <1> 
   241                                  
   242                                  
   243                                   ;OpADR: [28]  ; PUSH opcode 
   244                                  
   245                                  	vV_push 1919903264 
   245                              <1> 
   245 00000625 41C70720666F72      <1>  mov DWORD[vV_sp] , %1
   245 0000062C 4983C704            <1>  add vV_sp , 4
   245                              <1> 
   246                                  
   247                                  
   248                                   ;OpADR: [29]  ; PUSH opcode 
   249                                  
   250                                  	vV_push 1684366707 
   250                              <1> 
   250 00000630 41C70773656564      <1>  mov DWORD[vV_sp] , %1
   250 00000637 4983C704            <1>  add vV_sp , 4
   250                              <1> 
   251                                  
   252                                  
   253                                   ;OpADR: [30]  ; PUSH opcode 
   254                                  
   255                                  	vV_push 543236210 
   255                              <1> 
   255 0000063B 41C70772206120      <1>  mov DWORD[vV_sp] , %1
   255 00000642 4983C704            <1>  add vV_sp , 4
   255                              <1> 
   256                                  
   257                                  
   258                                   ;OpADR: [31]  ; PUSH opcode 
   259                                  
   260                                  	vV_push 1702129221 
   260                              <1> 
   260 00000646 41C707456E7465      <1>  mov DWORD[vV_sp] , %1
   260 0000064D 4983C704            <1>  add vV_sp , 4
   260                              <1> 
   261                                  
   262                                  
   263                                   ;OpADR: [32]  ; BUFF_OUT opcode (9)			
   264                                  
   265                                  
   266 00000651 E8EFFBFFFF              	call vV_io_out_packed_char_buffer				
   267                                  						
   268                                  
   269                                   ;OpADR: [33]  ; BUFF_OUT opcode (9)			
   270                                  
   271                                  
   272 00000656 E8EAFBFFFF              	call vV_io_out_packed_char_buffer				
   273                                  						
   274                                  
   275                                   ;OpADR: [34]  ; BUFF_OUT opcode (9)			
   276                                  
   277                                  
   278 0000065B E8E5FBFFFF              	call vV_io_out_packed_char_buffer				
   279                                  						
   280                                  
   281                                   ;OpADR: [35]  ; BUFF_OUT opcode (9)			
   282                                  
   283                                  
   284 00000660 E8E0FBFFFF              	call vV_io_out_packed_char_buffer				
   285                                  						
   286                                  
   287                                   ;OpADR: [36]  ; BUFF_OUT opcode (9)			
   288                                  
   289                                  
   290 00000665 E8DBFBFFFF              	call vV_io_out_packed_char_buffer				
   291                                  						
   292                                  
   293                                   ;OpADR: [37]  ; BUFF_OUT opcode (9)			
   294                                  
   295                                  
   296 0000066A E8D6FBFFFF              	call vV_io_out_packed_char_buffer				
   297                                  						
   298                                  
   299                                   ;OpADR: [38]  ; BUFF_OUT opcode (9)			
   300                                  
   301                                  
   302 0000066F E8D1FBFFFF              	call vV_io_out_packed_char_buffer				
   303                                  						
   304                                  
   305                                   ;OpADR: [39]  ; FLUSH opcode					
   306                                  
   307 00000674 E800FBFFFF              		call vV_io_flush	
   308                                  
   309                                   ;OpADR: [40]  ; GET opcode (0)			
   310                                  
   311 00000679 E860FCFFFF              	call vV_io_get_default			
   312                                  						
   313                                  
   314                                   ;OpADR: [41]  ; End of func opcode					
   315                                  
   316                                  
   317                                  ;------Cleanup Phase
   318                                  
   319                                  ;------frame restore Phase
   320 0000067E 4889EC                  	mov rsp , rbp	
   321 00000681 5D                      	pop rbp	
   322 00000682 C3                      	ret	
   323                                  print:		
   324 00000683 55                      	push rbp	
   325 00000684 4889E5                  	mov rbp , rsp	
   326                                  
   327                                  ;------Setup Phase
   328                                  
   329                                  ;------Init Phase
   330                                  
   331                                  .tailcall:		;Body Section	
   332                                  
   333                                   ;OpADR: [42]  ; PUSH opcode 
   334                                  
   335                                  	vV_push 0 
   335                              <1> 
   335 00000687 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   335 0000068E 4983C704            <1>  add vV_sp , 4
   335                              <1> 
   336                                  
   337                                  
   338                                   ;OpADR: [43]  ; EQUAL opcode					
   339                                  
   340 00000692 418B47FC                	mov eax , vV_top			
   341 00000696 413947F8                	cmp DWORD vV_2nd , eax			
   342                                  
   343 0000069A 75(0B)                  	jnz short 0xb				
   344                                  
   345 0000069C 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   346                                  
   347 000006A4 EB(09)                  	jmp short 0x9				
   348                                  
   349 000006A6 41C747F800000000        			mov DWORD vV_2nd , 0	
   350                                  
   351                                  	vV_dec_sp 1				
   351                              <1> 
   351 000006AE 4983EF04            <1>  sub vV_sp , cell(%1)
   351                              <1> 
   352                                  
   353                                   ;OpADR: [44]  ; IF opcode					
   354                                  
   355                                  	vV_dec_sp 1			
   355                              <1> 
   355 000006B2 4983EF04            <1>  sub vV_sp , cell(%1)
   355                              <1> 
   356 000006B6 41830F00                	or DWORD[vV_sp] , 0			
   357 000006BA 7412                    	je wblock_7	
   358                                  
   359                                   ;OpADR: [45]  ; PUSH opcode 
   360                                  
   361                                  	vV_push 32 
   361                              <1> 
   361 000006BC 41C70720000000      <1>  mov DWORD[vV_sp] , %1
   361 000006C3 4983C704            <1>  add vV_sp , 4
   361                              <1> 
   362                                  
   363                                  
   364                                   ;OpADR: [46]  ; BUFF_OUT opcode (8)			
   365                                  
   366                                  
   367 000006C7 E86EFBFFFF              	call vV_io_out_char_buffer			
   368                                  						
   369                                  
   370                                   ;OpADR: [47]  ; ELIF opcode					
   371                                  
   372 000006CC EB10                    	jmp wblock_6	
   373                                  
   374                                  
   375                                  	wblock_7:		
   376                                  
   377                                  ;------------------------------------------------------
   378                                  
   379                                  
   380                                   ;OpADR: [48]  ; PUSH opcode 
   381                                  
   382                                  	vV_push 42 
   382                              <1> 
   382 000006CE 41C7072A000000      <1>  mov DWORD[vV_sp] , %1
   382 000006D5 4983C704            <1>  add vV_sp , 4
   382                              <1> 
   383                                  
   384                                  
   385                                   ;OpADR: [49]  ; BUFF_OUT opcode (8)			
   386                                  
   387                                  
   388 000006D9 E85CFBFFFF              	call vV_io_out_char_buffer			
   389                                  						
   390                                  
   391                                  
   392                                  	wblock_6:		
   393                                  
   394                                  ;------------------------------------------------------
   395                                  
   396                                  
   397                                   ;OpADR: [50]  ; End of func opcode					
   398                                  
   399                                  
   400                                  ;------Cleanup Phase
   401                                  
   402                                  ;------frame restore Phase
   403 000006DE 4889EC                  	mov rsp , rbp	
   404 000006E1 5D                      	pop rbp	
   405 000006E2 C3                      	ret	
   406                                  set_seed:		
   407 000006E3 55                      	push rbp	
   408 000006E4 4889E5                  	mov rbp , rsp	
   409                                  
   410                                  ;------Setup Phase
   411 000006E7 4883EC18                	sub rsp , 24	;Space for local vars	
   412                                  
   413                                  ;------Init Phase
   414                                  
   415                                  .tailcall:		;Body Section	
   416                                  
   417                                   ;OpADR: [51]  ; DUP opcode (1)			
   418                                  
   419                                  	vV_dup 1			
   419                              <1> 
   419 000006EB B901000000          <1>  mov ecx , %1
   419 000006F0 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   419 000006F4 4C89FF              <1>  mov rdi , vV_sp
   419                              <1> 
   419 000006F7 F3A5                <1>  rep movsd
   419                              <1> 
   419 000006F9 4983C704            <1>  add vV_sp , cell(%1)
   419                              <1> 
   420                                  
   421                                  
   422                                   ;OpADR: [52]  ; Var assignement					
   423                                  
   424                                  vV_pop eax
   424                              <1> 
   424 000006FD 4983EF04            <1>  sub vV_sp , 4
   424 00000701 418B07              <1>  mov %1 , [vV_sp]
   424                              <1> 
   425 00000704 8945F8                  mov [rbp - 8] , eax
   426                                  
   427                                   ;OpADR: [53]  ; PUSH opcode 
   428                                  
   429                                  	vV_push 33 
   429                              <1> 
   429 00000707 41C70721000000      <1>  mov DWORD[vV_sp] , %1
   429 0000070E 4983C704            <1>  add vV_sp , 4
   429                              <1> 
   430                                  
   431                                  
   432                                   ;OpADR: [54]  ; ADD opcode 					
   433                                  
   434 00000712 418B47F8                	mov eax , vV_2nd			
   435 00000716 410347FC                	add eax , vV_top			
   436 0000071A 418947F8                	mov vV_2nd , eax			
   437                                  
   438                                  	vV_dec_sp 1		
   438                              <1> 
   438 0000071E 4983EF04            <1>  sub vV_sp , cell(%1)
   438                              <1> 
   439                                  
   440                                   ;OpADR: [55]  ; Var assignement					
   441                                  
   442                                  vV_pop eax
   442                              <1> 
   442 00000722 4983EF04            <1>  sub vV_sp , 4
   442 00000726 418B07              <1>  mov %1 , [vV_sp]
   442                              <1> 
   443 00000729 8945F0                  mov [rbp - 16] , eax
   444                                  
   445                                   ;OpADR: [56]  ; PUSH opcode 
   446                                  
   447                                  	vV_push 1 
   447                              <1> 
   447 0000072C 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   447 00000733 4983C704            <1>  add vV_sp , 4
   447                              <1> 
   448                                  
   449                                  
   450                                  
   451                                  	wblock_10:		
   452                                  
   453                                  ;------------------------------------------------------
   454                                  
   455                                  
   456                                   ;OpADR: [57]  ; DUP opcode (2)			
   457                                  
   458                                  	vV_dup 2			
   458                              <1> 
   458 00000737 B902000000          <1>  mov ecx , %1
   458 0000073C 498D77F8            <1>  lea rsi , [vV_sp-cell(%1)]
   458 00000740 4C89FF              <1>  mov rdi , vV_sp
   458                              <1> 
   458 00000743 F3A5                <1>  rep movsd
   458                              <1> 
   458 00000745 4983C708            <1>  add vV_sp , cell(%1)
   458                              <1> 
   459                                  
   460                                  
   461                                   ;OpADR: [58]  ; OR opcode					
   462                                  
   463 00000749 418B47FC                	mov eax , vV_top			
   464 0000074D 412147F8                	and DWORD vV_2nd , eax			
   465                                  
   466                                  	vV_dec_sp 1				
   466                              <1> 
   466 00000751 4983EF04            <1>  sub vV_sp , cell(%1)
   466                              <1> 
   467                                  
   468                                   ;OpADR: [59]  ; IF opcode					
   469                                  
   470                                  	vV_dec_sp 1			
   470                              <1> 
   470 00000755 4983EF04            <1>  sub vV_sp , cell(%1)
   470                              <1> 
   471 00000759 41830F00                	or DWORD[vV_sp] , 0			
   472 0000075D 740D                    	je wblock_9	
   473                                  
   474                                   ;OpADR: [60]  ; PUSH opcode 
   475                                  
   476                                  	vV_push 1 
   476                              <1> 
   476 0000075F 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   476 00000766 4983C704            <1>  add vV_sp , 4
   476                              <1> 
   477                                  
   478                                  
   479                                   ;OpADR: [61]  ; ELIF opcode					
   480                                  
   481 0000076A EB0B                    	jmp wblock_8	
   482                                  
   483                                  
   484                                  	wblock_9:		
   485                                  
   486                                  ;------------------------------------------------------
   487                                  
   488                                  
   489                                   ;OpADR: [62]  ; PUSH opcode 
   490                                  
   491                                  	vV_push 0 
   491                              <1> 
   491 0000076C 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   491 00000773 4983C704            <1>  add vV_sp , 4
   491                              <1> 
   492                                  
   493                                  
   494                                  
   495                                  	wblock_8:		
   496                                  
   497                                  ;------------------------------------------------------
   498                                  
   499                                  
   500                                   ;OpADR: [63]  ; Var invocation					
   501                                  
   502 00000777 8B0425[44010000]        mov eax , [i_global.size]
   503                                  vV_push eax
   503                              <1> 
   503 0000077E 418907              <1>  mov DWORD[vV_sp] , %1
   503 00000781 4983C704            <1>  add vV_sp , 4
   503                              <1> 
   504                                  
   505                                   ;OpADR: [64]  ; Var invocation					
   506                                  
   507 00000785 8B45F8                  mov eax , [rbp - 8]
   508                                  vV_push eax
   508                              <1> 
   508 00000788 418907              <1>  mov DWORD[vV_sp] , %1
   508 0000078B 4983C704            <1>  add vV_sp , 4
   508                              <1> 
   509                                  
   510                                   ;OpADR: [65]  ; SUB opcode 					
   511                                  
   512 0000078F 418B47F8                	mov eax , vV_2nd			
   513 00000793 412B47FC                	sub eax , vV_top			
   514 00000797 418947F8                	mov vV_2nd, eax			
   515                                  
   516                                  	vV_dec_sp 1		
   516                              <1> 
   516 0000079B 4983EF04            <1>  sub vV_sp , cell(%1)
   516                              <1> 
   517                                  
   518                                   ;OpADR: [66]  ; PUSH opcode 
   519                                  
   520                                  	vV_push 1 
   520                              <1> 
   520 0000079F 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   520 000007A6 4983C704            <1>  add vV_sp , 4
   520                              <1> 
   521                                  
   522                                  
   523                                   ;OpADR: [67]  ; SUB opcode 					
   524                                  
   525 000007AA 418B47F8                	mov eax , vV_2nd			
   526 000007AE 412B47FC                	sub eax , vV_top			
   527 000007B2 418947F8                	mov vV_2nd, eax			
   528                                  
   529                                  	vV_dec_sp 1		
   529                              <1> 
   529 000007B6 4983EF04            <1>  sub vV_sp , cell(%1)
   529                              <1> 
   530                                  
   531                                   ;OpADR: [68]  ; Var assignement					
   532                                  
   533 000007BA 31C0                    	xor eax , eax	
   534                                  	vV_pop edi		
   534                              <1> 
   534 000007BC 4983EF04            <1>  sub vV_sp , 4
   534 000007C0 418B3F              <1>  mov %1 , [vV_sp]
   534                              <1> 
   535 000007C3 81FFFF000000            	cmp edi , 255		
   536 000007C9 0F8DBEF8FFFF            	jge vV_bound_error		
   537 000007CF 01F8                    	add eax , edi			
   538 000007D1 C1E002                  	shl eax , 2	
   539 000007D4 89C6                    	mov esi , eax		
   540 000007D6 BF[8A020000]            	mov edi , u_global.board
   541                                  vV_pop eax
   541                              <1> 
   541 000007DB 4983EF04            <1>  sub vV_sp , 4
   541 000007DF 418B07              <1>  mov %1 , [vV_sp]
   541                              <1> 
   542 000007E2 67890437                mov [edi + esi] , eax
   543                                  
   544                                   ;OpADR: [69]  ; LSH opcode 					
   545                                  
   546 000007E6 41D167FC                	shl DWORD vV_top , 1			
   547                                  
   548                                   ;OpADR: [70]  ; Var invocation					
   549                                  
   550 000007EA 8B45F8                  mov eax , [rbp - 8]
   551                                  vV_push eax
   551                              <1> 
   551 000007ED 418907              <1>  mov DWORD[vV_sp] , %1
   551 000007F0 4983C704            <1>  add vV_sp , 4
   551                              <1> 
   552                                  
   553                                   ;OpADR: [71]  ; PUSH opcode 
   554                                  
   555                                  	vV_push 1 
   555                              <1> 
   555 000007F4 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   555 000007FB 4983C704            <1>  add vV_sp , 4
   555                              <1> 
   556                                  
   557                                  
   558                                   ;OpADR: [72]  ; ADD opcode 					
   559                                  
   560 000007FF 418B47F8                	mov eax , vV_2nd			
   561 00000803 410347FC                	add eax , vV_top			
   562 00000807 418947F8                	mov vV_2nd , eax			
   563                                  
   564                                  	vV_dec_sp 1		
   564                              <1> 
   564 0000080B 4983EF04            <1>  sub vV_sp , cell(%1)
   564                              <1> 
   565                                  
   566                                   ;OpADR: [73]  ; Var assignement					
   567                                  
   568                                  vV_pop eax
   568                              <1> 
   568 0000080F 4983EF04            <1>  sub vV_sp , 4
   568 00000813 418B07              <1>  mov %1 , [vV_sp]
   568                              <1> 
   569 00000816 8945F8                  mov [rbp - 8] , eax
   570                                  
   571                                   ;OpADR: [74]  ; Var invocation					
   572                                  
   573 00000819 8B45F8                  mov eax , [rbp - 8]
   574                                  vV_push eax
   574                              <1> 
   574 0000081C 418907              <1>  mov DWORD[vV_sp] , %1
   574 0000081F 4983C704            <1>  add vV_sp , 4
   574                              <1> 
   575                                  
   576                                   ;OpADR: [75]  ; Var invocation					
   577                                  
   578 00000823 8B45F0                  mov eax , [rbp - 16]
   579                                  vV_push eax
   579                              <1> 
   579 00000826 418907              <1>  mov DWORD[vV_sp] , %1
   579 00000829 4983C704            <1>  add vV_sp , 4
   579                              <1> 
   580                                  
   581                                   ;OpADR: [76]  ; LESS opcode					
   582                                  
   583 0000082D 418B47FC                	mov eax , vV_top			
   584 00000831 413947F8                	cmp DWORD vV_2nd , eax			
   585                                  
   586 00000835 73(0B)                  	jae short 0xb				
   587                                  
   588 00000837 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   589                                  
   590 0000083F EB(09)                  	jmp short 0x9				
   591                                  
   592 00000841 41C747F800000000        			mov DWORD vV_2nd , 0	
   593                                  
   594                                  	vV_dec_sp 1				
   594                              <1> 
   594 00000849 4983EF04            <1>  sub vV_sp , cell(%1)
   594                              <1> 
   595                                  
   596                                   ;OpADR: [77]  ; WHILE opcode					
   597                                  
   598                                  	vV_dec_sp 1				
   598                              <1> 
   598 0000084D 4983EF04            <1>  sub vV_sp , cell(%1)
   598                              <1> 
   599 00000851 41830F00                	or DWORD[vV_sp] , 0			
   600 00000855 0F85DCFEFFFF            	jne wblock_10		
   601                                  
   602                                   ;OpADR: [78]  ; End of func opcode					
   603                                  
   604                                  
   605                                  ;------Cleanup Phase
   606                                  
   607                                  ;------frame restore Phase
   608 0000085B 4889EC                  	mov rsp , rbp	
   609 0000085E 5D                      	pop rbp	
   610 0000085F C3                      	ret	
   611                                  
   612                                  		
   613                                  
   614                                  
   615                                  
   616                                  vV_entry_point:
   617                                  
   618                                  
   619 00000860 4889E5                  	mov rbp, rsp			;Setup Stack Frame
   620                                  	
   621                                  	
   622                                   ;OpADR: [0]  ; Function Call					
   623                                  
   624 00000863 E898FDFFFF              		call popup			
   625                                  
   626                                   ;OpADR: [1]  ; PUSH opcode 
   627                                  
   628                                  	vV_push 0 
   628                              <1> 
   628 00000868 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   628 0000086F 4983C704            <1>  add vV_sp , 4
   628                              <1> 
   629                                  
   630                                  
   631                                   ;OpADR: [2]  ; Function Call					
   632                                  
   633 00000873 E86BFEFFFF              		call set_seed			
   634                                  
   635                                  
   636                                  	wblock_12:		
   637                                  
   638                                  ;------------------------------------------------------
   639                                  
   640                                  
   641                                   ;OpADR: [3]  ; PUSH opcode 
   642                                  
   643                                  	vV_push 254 
   643                              <1> 
   643 00000878 41C707FE000000      <1>  mov DWORD[vV_sp] , %1
   643 0000087F 4983C704            <1>  add vV_sp , 4
   643                              <1> 
   644                                  
   645                                  
   646                                   ;OpADR: [4]  ; Var invocation					
   647                                  
   648 00000883 31C0                    	xor eax , eax	
   649                                  	vV_pop edi		
   649                              <1> 
   649 00000885 4983EF04            <1>  sub vV_sp , 4
   649 00000889 418B3F              <1>  mov %1 , [vV_sp]
   649                              <1> 
   650 0000088C 81FFFF000000            	cmp edi , 255		
   651 00000892 0F8DF5F7FFFF            	jge vV_bound_error		
   652 00000898 01F8                    	add eax , edi			
   653 0000089A C1E002                  	shl eax , 2	
   654 0000089D 89C6                    	mov esi , eax		
   655 0000089F BF[8A020000]            	mov edi , u_global.board
   656 000008A4 678B0437                mov eax , [edi + esi]
   657                                  vV_push eax
   657                              <1> 
   657 000008A8 418907              <1>  mov DWORD[vV_sp] , %1
   657 000008AB 4983C704            <1>  add vV_sp , 4
   657                              <1> 
   658                                  
   659                                   ;OpADR: [5]  ; Var assignement					
   660                                  
   661                                  vV_pop eax
   661                              <1> 
   661 000008AF 4983EF04            <1>  sub vV_sp , 4
   661 000008B3 418B07              <1>  mov %1 , [vV_sp]
   661                              <1> 
   662 000008B6 890425[86060000]        mov [u_global.saved] , eax
   663                                  
   664                                   ;OpADR: [6]  ; PUSH opcode 
   665                                  
   666                                  	vV_push 0 
   666                              <1> 
   666 000008BD 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   666 000008C4 4983C704            <1>  add vV_sp , 4
   666                              <1> 
   667                                  
   668                                  
   669                                   ;OpADR: [7]  ; Var assignement					
   670                                  
   671                                  vV_pop eax
   671                              <1> 
   671 000008C8 4983EF04            <1>  sub vV_sp , 4
   671 000008CC 418B07              <1>  mov %1 , [vV_sp]
   671                              <1> 
   672 000008CF 890425[86020000]        mov [u_global.index] , eax
   673                                  
   674                                   ;OpADR: [8]  ; PUSH opcode 
   675                                  
   676                                  	vV_push 0 
   676                              <1> 
   676 000008D6 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   676 000008DD 4983C704            <1>  add vV_sp , 4
   676                              <1> 
   677                                  
   678                                  
   679                                   ;OpADR: [9]  ; Var invocation					
   680                                  
   681 000008E1 31C0                    	xor eax , eax	
   682                                  	vV_pop edi		
   682                              <1> 
   682 000008E3 4983EF04            <1>  sub vV_sp , 4
   682 000008E7 418B3F              <1>  mov %1 , [vV_sp]
   682                              <1> 
   683 000008EA 81FFFF000000            	cmp edi , 255		
   684 000008F0 0F8D97F7FFFF            	jge vV_bound_error		
   685 000008F6 01F8                    	add eax , edi			
   686 000008F8 C1E002                  	shl eax , 2	
   687 000008FB 89C6                    	mov esi , eax		
   688 000008FD BF[8A020000]            	mov edi , u_global.board
   689 00000902 678B0437                mov eax , [edi + esi]
   690                                  vV_push eax
   690                              <1> 
   690 00000906 418907              <1>  mov DWORD[vV_sp] , %1
   690 00000909 4983C704            <1>  add vV_sp , 4
   690                              <1> 
   691                                  
   692                                   ;OpADR: [10]  ; PUSH opcode 
   693                                  
   694                                  	vV_push 254 
   694                              <1> 
   694 0000090D 41C707FE000000      <1>  mov DWORD[vV_sp] , %1
   694 00000914 4983C704            <1>  add vV_sp , 4
   694                              <1> 
   695                                  
   696                                  
   697                                   ;OpADR: [11]  ; Var assignement					
   698                                  
   699 00000918 31C0                    	xor eax , eax	
   700                                  	vV_pop edi		
   700                              <1> 
   700 0000091A 4983EF04            <1>  sub vV_sp , 4
   700 0000091E 418B3F              <1>  mov %1 , [vV_sp]
   700                              <1> 
   701 00000921 81FFFF000000            	cmp edi , 255		
   702 00000927 0F8D60F7FFFF            	jge vV_bound_error		
   703 0000092D 01F8                    	add eax , edi			
   704 0000092F C1E002                  	shl eax , 2	
   705 00000932 89C6                    	mov esi , eax		
   706 00000934 BF[8A020000]            	mov edi , u_global.board
   707                                  vV_pop eax
   707                              <1> 
   707 00000939 4983EF04            <1>  sub vV_sp , 4
   707 0000093D 418B07              <1>  mov %1 , [vV_sp]
   707                              <1> 
   708 00000940 67890437                mov [edi + esi] , eax
   709                                  
   710                                  
   711                                  	wblock_11:		
   712                                  
   713                                  ;------------------------------------------------------
   714                                  
   715                                  
   716                                   ;OpADR: [12]  ; Var invocation					
   717                                  
   718 00000944 8B0425[86060000]        mov eax , [u_global.saved]
   719                                  vV_push eax
   719                              <1> 
   719 0000094B 418907              <1>  mov DWORD[vV_sp] , %1
   719 0000094E 4983C704            <1>  add vV_sp , 4
   719                              <1> 
   720                                  
   721                                   ;OpADR: [13]  ; Var invocation					
   722                                  
   723 00000952 8B0425[86020000]        mov eax , [u_global.index]
   724                                  vV_push eax
   724                              <1> 
   724 00000959 418907              <1>  mov DWORD[vV_sp] , %1
   724 0000095C 4983C704            <1>  add vV_sp , 4
   724                              <1> 
   725                                  
   726                                   ;OpADR: [14]  ; Var invocation					
   727                                  
   728 00000960 31C0                    	xor eax , eax	
   729                                  	vV_pop edi		
   729                              <1> 
   729 00000962 4983EF04            <1>  sub vV_sp , 4
   729 00000966 418B3F              <1>  mov %1 , [vV_sp]
   729                              <1> 
   730 00000969 81FFFF000000            	cmp edi , 255		
   731 0000096F 0F8D18F7FFFF            	jge vV_bound_error		
   732 00000975 01F8                    	add eax , edi			
   733 00000977 C1E002                  	shl eax , 2	
   734 0000097A 89C6                    	mov esi , eax		
   735 0000097C BF[8A020000]            	mov edi , u_global.board
   736 00000981 678B0437                mov eax , [edi + esi]
   737                                  vV_push eax
   737                              <1> 
   737 00000985 418907              <1>  mov DWORD[vV_sp] , %1
   737 00000988 4983C704            <1>  add vV_sp , 4
   737                              <1> 
   738                                  
   739                                   ;OpADR: [15]  ; Var invocation					
   740                                  
   741 0000098C 8B0425[86020000]        mov eax , [u_global.index]
   742                                  vV_push eax
   742                              <1> 
   742 00000993 418907              <1>  mov DWORD[vV_sp] , %1
   742 00000996 4983C704            <1>  add vV_sp , 4
   742                              <1> 
   743                                  
   744                                   ;OpADR: [16]  ; PUSH opcode 
   745                                  
   746                                  	vV_push 1 
   746                              <1> 
   746 0000099A 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   746 000009A1 4983C704            <1>  add vV_sp , 4
   746                              <1> 
   747                                  
   748                                  
   749                                   ;OpADR: [17]  ; ADD opcode 					
   750                                  
   751 000009A5 418B47F8                	mov eax , vV_2nd			
   752 000009A9 410347FC                	add eax , vV_top			
   753 000009AD 418947F8                	mov vV_2nd , eax			
   754                                  
   755                                  	vV_dec_sp 1		
   755                              <1> 
   755 000009B1 4983EF04            <1>  sub vV_sp , cell(%1)
   755                              <1> 
   756                                  
   757                                   ;OpADR: [18]  ; Var invocation					
   758                                  
   759 000009B5 31C0                    	xor eax , eax	
   760                                  	vV_pop edi		
   760                              <1> 
   760 000009B7 4983EF04            <1>  sub vV_sp , 4
   760 000009BB 418B3F              <1>  mov %1 , [vV_sp]
   760                              <1> 
   761 000009BE 81FFFF000000            	cmp edi , 255		
   762 000009C4 0F8DC3F6FFFF            	jge vV_bound_error		
   763 000009CA 01F8                    	add eax , edi			
   764 000009CC C1E002                  	shl eax , 2	
   765 000009CF 89C6                    	mov esi , eax		
   766 000009D1 BF[8A020000]            	mov edi , u_global.board
   767 000009D6 678B0437                mov eax , [edi + esi]
   768                                  vV_push eax
   768                              <1> 
   768 000009DA 418907              <1>  mov DWORD[vV_sp] , %1
   768 000009DD 4983C704            <1>  add vV_sp , 4
   768                              <1> 
   769                                  
   770                                   ;OpADR: [19]  ; Function Call					
   771                                  
   772 000009E1 E8F5FAFFFF              		call set_next			
   773                                  
   774                                   ;OpADR: [20]  ; DUP opcode (1)			
   775                                  
   776                                  	vV_dup 1			
   776                              <1> 
   776 000009E6 B901000000          <1>  mov ecx , %1
   776 000009EB 498D77FC            <1>  lea rsi , [vV_sp-cell(%1)]
   776 000009EF 4C89FF              <1>  mov rdi , vV_sp
   776                              <1> 
   776 000009F2 F3A5                <1>  rep movsd
   776                              <1> 
   776 000009F4 4983C704            <1>  add vV_sp , cell(%1)
   776                              <1> 
   777                                  
   778                                  
   779                                   ;OpADR: [21]  ; Var invocation					
   780                                  
   781 000009F8 8B0425[86020000]        mov eax , [u_global.index]
   782                                  vV_push eax
   782                              <1> 
   782 000009FF 418907              <1>  mov DWORD[vV_sp] , %1
   782 00000A02 4983C704            <1>  add vV_sp , 4
   782                              <1> 
   783                                  
   784                                   ;OpADR: [22]  ; Var invocation					
   785                                  
   786 00000A06 31C0                    	xor eax , eax	
   787                                  	vV_pop edi		
   787                              <1> 
   787 00000A08 4983EF04            <1>  sub vV_sp , 4
   787 00000A0C 418B3F              <1>  mov %1 , [vV_sp]
   787                              <1> 
   788 00000A0F 81FFFF000000            	cmp edi , 255		
   789 00000A15 0F8D72F6FFFF            	jge vV_bound_error		
   790 00000A1B 01F8                    	add eax , edi			
   791 00000A1D C1E002                  	shl eax , 2	
   792 00000A20 89C6                    	mov esi , eax		
   793 00000A22 BF[8A020000]            	mov edi , u_global.board
   794 00000A27 678B0437                mov eax , [edi + esi]
   795                                  vV_push eax
   795                              <1> 
   795 00000A2B 418907              <1>  mov DWORD[vV_sp] , %1
   795 00000A2E 4983C704            <1>  add vV_sp , 4
   795                              <1> 
   796                                  
   797                                   ;OpADR: [23]  ; Var assignement					
   798                                  
   799                                  vV_pop eax
   799                              <1> 
   799 00000A32 4983EF04            <1>  sub vV_sp , 4
   799 00000A36 418B07              <1>  mov %1 , [vV_sp]
   799                              <1> 
   800 00000A39 890425[86060000]        mov [u_global.saved] , eax
   801                                  
   802                                   ;OpADR: [24]  ; Var invocation					
   803                                  
   804 00000A40 8B0425[86020000]        mov eax , [u_global.index]
   805                                  vV_push eax
   805                              <1> 
   805 00000A47 418907              <1>  mov DWORD[vV_sp] , %1
   805 00000A4A 4983C704            <1>  add vV_sp , 4
   805                              <1> 
   806                                  
   807                                   ;OpADR: [25]  ; Var assignement					
   808                                  
   809 00000A4E 31C0                    	xor eax , eax	
   810                                  	vV_pop edi		
   810                              <1> 
   810 00000A50 4983EF04            <1>  sub vV_sp , 4
   810 00000A54 418B3F              <1>  mov %1 , [vV_sp]
   810                              <1> 
   811 00000A57 81FFFF000000            	cmp edi , 255		
   812 00000A5D 0F8D2AF6FFFF            	jge vV_bound_error		
   813 00000A63 01F8                    	add eax , edi			
   814 00000A65 C1E002                  	shl eax , 2	
   815 00000A68 89C6                    	mov esi , eax		
   816 00000A6A BF[8A020000]            	mov edi , u_global.board
   817                                  vV_pop eax
   817                              <1> 
   817 00000A6F 4983EF04            <1>  sub vV_sp , 4
   817 00000A73 418B07              <1>  mov %1 , [vV_sp]
   817                              <1> 
   818 00000A76 67890437                mov [edi + esi] , eax
   819                                  
   820                                   ;OpADR: [26]  ; Function Call					
   821                                  
   822 00000A7A E804FCFFFF              		call print			
   823                                  
   824                                   ;OpADR: [27]  ; Var invocation					
   825                                  
   826 00000A7F 8B0425[86020000]        mov eax , [u_global.index]
   827                                  vV_push eax
   827                              <1> 
   827 00000A86 418907              <1>  mov DWORD[vV_sp] , %1
   827 00000A89 4983C704            <1>  add vV_sp , 4
   827                              <1> 
   828                                  
   829                                   ;OpADR: [28]  ; PUSH opcode 
   830                                  
   831                                  	vV_push 1 
   831                              <1> 
   831 00000A8D 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   831 00000A94 4983C704            <1>  add vV_sp , 4
   831                              <1> 
   832                                  
   833                                  
   834                                   ;OpADR: [29]  ; ADD opcode 					
   835                                  
   836 00000A98 418B47F8                	mov eax , vV_2nd			
   837 00000A9C 410347FC                	add eax , vV_top			
   838 00000AA0 418947F8                	mov vV_2nd , eax			
   839                                  
   840                                  	vV_dec_sp 1		
   840                              <1> 
   840 00000AA4 4983EF04            <1>  sub vV_sp , cell(%1)
   840                              <1> 
   841                                  
   842                                   ;OpADR: [30]  ; Var assignement					
   843                                  
   844                                  vV_pop eax
   844                              <1> 
   844 00000AA8 4983EF04            <1>  sub vV_sp , 4
   844 00000AAC 418B07              <1>  mov %1 , [vV_sp]
   844                              <1> 
   845 00000AAF 890425[86020000]        mov [u_global.index] , eax
   846                                  
   847                                   ;OpADR: [31]  ; Var invocation					
   848                                  
   849 00000AB6 8B0425[86020000]        mov eax , [u_global.index]
   850                                  vV_push eax
   850                              <1> 
   850 00000ABD 418907              <1>  mov DWORD[vV_sp] , %1
   850 00000AC0 4983C704            <1>  add vV_sp , 4
   850                              <1> 
   851                                  
   852                                   ;OpADR: [32]  ; Var invocation					
   853                                  
   854 00000AC4 8B0425[44010000]        mov eax , [i_global.size]
   855                                  vV_push eax
   855                              <1> 
   855 00000ACB 418907              <1>  mov DWORD[vV_sp] , %1
   855 00000ACE 4983C704            <1>  add vV_sp , 4
   855                              <1> 
   856                                  
   857                                   ;OpADR: [33]  ; LESS opcode					
   858                                  
   859 00000AD2 418B47FC                	mov eax , vV_top			
   860 00000AD6 413947F8                	cmp DWORD vV_2nd , eax			
   861                                  
   862 00000ADA 73(0B)                  	jae short 0xb				
   863                                  
   864 00000ADC 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   865                                  
   866 00000AE4 EB(09)                  	jmp short 0x9				
   867                                  
   868 00000AE6 41C747F800000000        			mov DWORD vV_2nd , 0	
   869                                  
   870                                  	vV_dec_sp 1				
   870                              <1> 
   870 00000AEE 4983EF04            <1>  sub vV_sp , cell(%1)
   870                              <1> 
   871                                  
   872                                   ;OpADR: [34]  ; WHILE opcode					
   873                                  
   874                                  	vV_dec_sp 1				
   874                              <1> 
   874 00000AF2 4983EF04            <1>  sub vV_sp , cell(%1)
   874                              <1> 
   875 00000AF6 41830F00                	or DWORD[vV_sp] , 0			
   876 00000AFA 0F8544FEFFFF            	jne wblock_11		
   877                                  
   878                                   ;OpADR: [35]  ; FLUSH opcode					
   879                                  
   880 00000B00 E874F6FFFF              		call vV_io_flush	
   881                                  
   882                                   ;OpADR: [36]  ; Var invocation					
   883                                  
   884 00000B05 8B0425[2C010000]        mov eax , [i_global.currentIter]
   885                                  vV_push eax
   885                              <1> 
   885 00000B0C 418907              <1>  mov DWORD[vV_sp] , %1
   885 00000B0F 4983C704            <1>  add vV_sp , 4
   885                              <1> 
   886                                  
   887                                   ;OpADR: [37]  ; PUSH opcode 
   888                                  
   889                                  	vV_push 1 
   889                              <1> 
   889 00000B13 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   889 00000B1A 4983C704            <1>  add vV_sp , 4
   889                              <1> 
   890                                  
   891                                  
   892                                   ;OpADR: [38]  ; ADD opcode 					
   893                                  
   894 00000B1E 418B47F8                	mov eax , vV_2nd			
   895 00000B22 410347FC                	add eax , vV_top			
   896 00000B26 418947F8                	mov vV_2nd , eax			
   897                                  
   898                                  	vV_dec_sp 1		
   898                              <1> 
   898 00000B2A 4983EF04            <1>  sub vV_sp , cell(%1)
   898                              <1> 
   899                                  
   900                                   ;OpADR: [39]  ; Var assignement					
   901                                  
   902                                  vV_pop eax
   902                              <1> 
   902 00000B2E 4983EF04            <1>  sub vV_sp , 4
   902 00000B32 418B07              <1>  mov %1 , [vV_sp]
   902                              <1> 
   903 00000B35 890425[2C010000]        mov [i_global.currentIter] , eax
   904                                  
   905                                   ;OpADR: [40]  ; Var invocation					
   906                                  
   907 00000B3C 8B0425[2C010000]        mov eax , [i_global.currentIter]
   908                                  vV_push eax
   908                              <1> 
   908 00000B43 418907              <1>  mov DWORD[vV_sp] , %1
   908 00000B46 4983C704            <1>  add vV_sp , 4
   908                              <1> 
   909                                  
   910                                   ;OpADR: [41]  ; Var invocation					
   911                                  
   912 00000B4A 8B0425[34010000]        mov eax , [i_global.max]
   913                                  vV_push eax
   913                              <1> 
   913 00000B51 418907              <1>  mov DWORD[vV_sp] , %1
   913 00000B54 4983C704            <1>  add vV_sp , 4
   913                              <1> 
   914                                  
   915                                   ;OpADR: [42]  ; LESS opcode					
   916                                  
   917 00000B58 418B47FC                	mov eax , vV_top			
   918 00000B5C 413947F8                	cmp DWORD vV_2nd , eax			
   919                                  
   920 00000B60 73(0B)                  	jae short 0xb				
   921                                  
   922 00000B62 41C747F8FFFFFFFF        			mov DWORD vV_2nd , -1	
   923                                  
   924 00000B6A EB(09)                  	jmp short 0x9				
   925                                  
   926 00000B6C 41C747F800000000        			mov DWORD vV_2nd , 0	
   927                                  
   928                                  	vV_dec_sp 1				
   928                              <1> 
   928 00000B74 4983EF04            <1>  sub vV_sp , cell(%1)
   928                              <1> 
   929                                  
   930                                   ;OpADR: [43]  ; WHILE opcode					
   931                                  
   932                                  	vV_dec_sp 1				
   932                              <1> 
   932 00000B78 4983EF04            <1>  sub vV_sp , cell(%1)
   932                              <1> 
   933 00000B7C 41830F00                	or DWORD[vV_sp] , 0			
   934 00000B80 0F85F2FCFFFF            	jne wblock_12		
   935                                  
   936                                   ;OpADR: [44]  ; PUSH opcode 
   937                                  
   938                                  	vV_push 543521122 
   938                              <1> 
   938 00000B86 41C70762796520      <1>  mov DWORD[vV_sp] , %1
   938 00000B8D 4983C704            <1>  add vV_sp , 4
   938                              <1> 
   939                                  
   940                                  
   941                                   ;OpADR: [45]  ; OUT opcode (9)			
   942                                  
   943                                  								
   944 00000B91 E899F6FFFF              	call vV_io_out_packed_char				
   945                                  						
   946                                  		
   947 00000B96 C3                      		ret
   948                                  
   949                                  ;Transpiled from vV with vVc version 0.0.4
   950                                  		
   951                                  		
