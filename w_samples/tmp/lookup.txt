     1                                  %include "vVc/assembly/w_runtime/vV_defines.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> ;------------------Variables From Project-------------
     5                              <1> 
     6                              <1> 	;------------------Should come from io module(need refactoring)
     7                              <1> 
     8                              <1> 
     9                              <1> 	%define vV_input_buffer_size 255
    10                              <1> 	%define vV_output_buffer_size 255
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;------------------Implementation Relative-------------
    15                              <1> 
    16                              <1> %deftok vV_sp 'r15'
    17                              <1> 
    18                              <1> %deftok vV_spS 'r14'
    19                              <1> 
    20                              <1> %deftok vV_sdir '-'
    21                              <1> 
    22                              <1> 
    23                              <1> 
    24                              <1> 
    25                              <1> ;------------------Stack Shortcuts--------------------
    26                              <1> 
    27                              <1> %define cell(a) (a*4)
    28                              <1> 
    29                              <1> 
    30                              <1> %define vV_top [vV_sp vV_sdir %+ cell(1)]
    31                              <1> %define vV_2nd [vV_sp vV_sdir %+ cell(2)]
    32                              <1> 
    33                              <1> %define vV_stack_v(a) ([vV_sp vV_sdir %+ cell(a)])
    34                              <1> 
    35                              <1> 
    36                              <1> ;-------------------Out_Format Pointer------------------
    37                              <1> 
    38                              <1> %deftok vV_FORMAT_BIN "vV_ascii_int_to_bin"
    39                              <1> %deftok vV_FORMAT_DEC "vV_ascii_int_to_dec"
    40                              <1> %deftok vV_FORMAT_HEX "vV_ascii_int_to_hex"
    41                              <1> 
    42                              <1> 
    43                              <1> 
    44                              <1> ;--------------------Op Macros--------------------------
    45                              <1> 
    46                              <1> %macro vV_push 1
    47                              <1> 
    48                              <1> 	mov DWORD[vV_sp] , %1
    49                              <1> 	add vV_sp , 4
    50                              <1> 
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro vV_pop 1
    54                              <1> 
    55                              <1> 	sub vV_sp , 4
    56                              <1> 	mov %1 , [vV_sp]
    57                              <1> 	
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro vV_swap 0
    61                              <1> 
    62                              <1> 	mov edx , [vV_sp-4]
    63                              <1> 	mov eax , [vV_sp-8]
    64                              <1> 	mov [vV_sp-8] , edx 
    65                              <1> 	mov [vV_sp-4] , eax 
    66                              <1> 	
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro vV_dup 1
    70                              <1> 
    71                              <1> 	mov ecx , %1
    72                              <1> 	lea rsi , [vV_sp-cell(%1)]
    73                              <1> 	mov rdi , vV_sp
    74                              <1> 		
    75                              <1> 	rep movsd
    76                              <1> 	
    77                              <1> 	add vV_sp , cell(%1)
    78                              <1> 	
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> 
    82                              <1> %macro vV_dec_sp 1
    83                              <1> 
    84                              <1> 	sub vV_sp , cell(%1)
    85                              <1> 	
    86                              <1> %endmacro
    87                              <1> 	
     2                                  %include "vVc/assembly/w_runtime/vV_error_code.asm"		
     1                              <1> 
     2                              <1> %define vV_ERR_IO_I_OVERFLOW 1
     3                              <1> %define vV_ERR_IO_O_OVERFLOW 2
     4                              <1> %define vV_ERR_IO_I_UNVALID 3
     5                              <1> %define vV_ERR_IO_O_UNVALID 4
     6                              <1> %define vV_ERR_IO_I_VALUE_OVERFLOW 5
     7                              <1> 
     8                              <1> 
     9                              <1> %define vV_ERR_VALUE_OVERFLOW 8
    10                              <1> 
    11                              <1> 
    12                              <1> %define vV_ERR_MEMORY_BUFFER_LIMIT 16
    13                              <1> %define vV_ERR_MEMORY_OUT_OF_BOUND 17
     3                                  %include "vVc/assembly/w_runtime/vV_runtime.asm"		
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> 
     4                              <1> ;%include "vVc/assembly/w_runtime/vV_errors.asm"
     5                              <1> ;%include "vVc/assembly/w_runtime/vV_system00.asm"
     6                              <1> ;%include "vVc/assembly/w_runtime/vV_system10.asm"
     7                              <1> ;%include "vVc/assembly/w_runtime/vV_system90.asm"
     8                              <1> 
     9                              <1> 
    10                              <1> global _start
    11                              <1> 
    12                              <1> 
    13                              <1> 
    14                              <1> ;extern vV_entry_point			;Defined by main program
    15                              <1> 
    16                              <1> 
    17                              <1> 
    18                              <1> 	
    19                              <1> segment .data 
    20                              <1> 
    21                              <1> 
    22                              <1> 	
    23                              <1> 
    24                              <1> segment .text 
    25                              <1> 
    26                              <1> 
    27                              <1> 	vV_forced_exit:				;rax hold exit code
    28                              <1> 							;Removed default error printing
    29                              <1> 							;This will now happens in errors module
    30                              <1> 
    31 00000000 4889C7              <1> 		mov rdi, rax
    32 00000003 B83C000000          <1> 		mov rax, SYS_EXIT
    33 00000008 0F05                <1> 		syscall
    34                              <1> 		
    35                              <1> 		
    36                              <1> 
    37                              <1> 
    38                              <1> 	save_regs:			;In case called from other process
    39                              <1> 	
    40 0000000A 58                  <1> 		pop rax
    41                              <1> 	
    42 0000000B 53                  <1> 		push rbx
    43 0000000C 4154                <1> 		push r12
    44 0000000E 4155                <1> 		push r13
    45 00000010 4156                <1> 		push r14
    46 00000012 4157                <1> 		push r15
    47                              <1> 		
    48 00000014 50                  <1> 		push rax
    49                              <1> 		
    50 00000015 C3                  <1> 		ret
    51                              <1> 		
    52                              <1> 	restore_regs:
    53                              <1> 	
    54 00000016 58                  <1> 		pop rax
    55                              <1> 	
    56 00000017 415F                <1> 		pop r15
    57 00000019 415E                <1> 		pop r14
    58 0000001B 415D                <1> 		pop r13
    59 0000001D 415C                <1> 		pop r12
    60 0000001F 5B                  <1> 		pop rbx
    61                              <1> 		
    62 00000020 50                  <1> 		push rax
    63                              <1> 		
    64 00000021 C3                  <1> 		ret
    65                              <1> 		
    66                              <1> 	setup_memory:
    67                              <1> 	
    68 00000022 C70425[80000000]00- <1> 		mov DWORD [vV_input_buffer_content] , 0
    68 0000002A 000000              <1>
    69 0000002D C70425[83010000]00- <1> 		mov DWORD [vV_output_buffer_content] , 0
    69 00000035 000000              <1>
    70                              <1> 		
    71                              <1> 		;mov DWORD [endofline] , 0xa
    72                              <1> 		
    73 00000038 C70425[30010000]-   <1> 		mov DWORD[vV_sys_format_mode] , vV_ascii_int_to_dec
    73 0000003F [AC040000]          <1>
    74                              <1> 		
    75                              <1> 		
    76 00000043 B9FFFFFFFF          <1> 		mov ecx , 4294967295
    77 00000048 48290C25[00000000]  <1> 		sub QWORD[vV_local_offset] , rcx
    78                              <1> 		
    79                              <1> 		
    80 00000050 C3                  <1> 		ret
    81                              <1> 		
    82                              <1> 		
    83                              <1> 	
    84                              <1> 		
    85                              <1> _start:				;Entry point of Every Program
    86                              <1> 	
    87                              <1> 		
    88                              <1> 
    89 00000051 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
    90                              <1> 	
    91 00000054 48892C25[00000000]  <1> 	mov QWORD[vV_local_offset] , rbp
    92                              <1> 	
    93 0000005C 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
    93 0000005E [3603040000000000]  <1>
    94                              <1> 	
    95 00000066 E89FFFFFFF          <1> 	call save_regs				;just in case
    96                              <1> 	
    97                              <1> 	
    98 0000006B E8B2FFFFFF          <1> 	call setup_memory			;all memory setup at start
    99                              <1> 	
   100                              <1> 	
   101                              <1> 	
   102 00000070 E8A4040000          <1> 	call vV_entry_point			;Start the program 
   103                              <1> 	
   104                              <1> 	
   105 00000075 E89CFFFFFF          <1> 	call restore_regs
   106                              <1> 	
   107                              <1> 
   108                              <1> ;------------------------------------------------------------------------------
   109                              <1> 
   110 0000007A B83C000000          <1> 	mov rax, SYS_EXIT
   111 0000007F BF00000000          <1> 	mov rdi, 0		;Normal exit procedure (no code returned from main)
   112 00000084 0F05                <1> 	syscall
   113                              <1> 	
   114                              <1> 	
   115                              <1> 	
   116                              <1> 	
   117                              <1> 	
     4                                  %include "vVc/assembly/w_runtime/vV_system00.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5 00000000 <res 00000040>      <1> 	vV_sys_start:	resd 16		;not used now
     6                              <1> 
     7                              <1> 	
     8                              <1> 	
     9                              <1> segment .data
    10                              <1> 
    11                              <1> 
    12                              <1> ;--Start of Memory----------------------------------------------------------
    13                              <1> 
    14                              <1> 	ALIGN 8
    15                              <1> 	
    16                              <1> ;--System adresses offsets----------------
    17                              <1> 
    18                              <1> 	vV_local_offset:
    19 00000000 0000000000000000    <1> 	dq 0
    20                              <1> 	
    21                              <1> 	
    22                              <1> ;---------------------Error Managment----------
    23                              <1> 
    24                              <1> 
    25                              <1> ;error vectors	
    26                              <1> 	
    27                              <1> 	vV_error_vectors:
    28 00000008 [0F01000000000000]- <1> 	times 17 dq vV_error_unhandeled
    28 00000008 <rept>              <1>
    29 00000090 [B200000000000000]  <1> 	dq vV_error_invalid_index
    30 00000098 [0F01000000000000]- <1> 	times 14 dq vV_error_unhandeled
    30 00000098 <rept>              <1>
    31                              <1> 
    32                              <1> 	
    33                              <1> 	
    34                              <1> segment .text
    35                              <1> 
    36                              <1> 
    37                              <1> vV_error:
    38                              <1> 
    39 00000086 52                  <1> 	push rdx
    40                              <1> 	
    41 00000087 4831D2              <1> 	xor rdx , rdx
    42                              <1> 	
    43 0000008A 88E2                <1> 	mov dl , ah
    44                              <1> 	
    45 0000008C C0E203              <1> 	shl dl , 3
    46                              <1> 	
    47 0000008F 67FF92[08000000]    <1> 	call [vV_error_vectors + edx]
    48                              <1> 	
    49                              <1> 	
    50 00000096 5A                  <1> 	pop rdx
    51                              <1> 	
    52 00000097 C3                  <1> 	ret
    53                              <1> 	
    54                              <1> 	
    55                              <1> vV_error_fatal:
    56                              <1> 
    57                              <1> 	
    58 00000098 88D0                <1> 	mov al , dl
    59                              <1> 	
    60 0000009A C0E803              <1> 	shr al , 3
    61                              <1> 
    62 0000009D E85EFFFFFF          <1> 	call vV_forced_exit
    63                              <1> 	
    64                              <1> vV_bound_error:
    65                              <1> 
    66 000000A2 89FB                <1> 	mov ebx , edi
    67 000000A4 B411                <1> 	mov ah , vV_ERR_MEMORY_OUT_OF_BOUND
    68 000000A6 E8DBFFFFFF          <1> 	call vV_error	
    69                              <1> 	
    70 000000AB B011                <1> 	mov al , vV_ERR_MEMORY_OUT_OF_BOUND
    71 000000AD E84EFFFFFF          <1> 	call vV_forced_exit
    72                              <1> 	
    73                              <1> 	
    74                              <1> 	
    75                              <1> 	
    76                              <1> 	
    77                              <1> 	
    78                              <1> 
    79                              <1> 	
     5                                  %include "vVc/assembly/w_runtime/vV_errors.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> 
     4                              <1> segment .bss
     5                              <1> 
     6                              <1> 
     7                              <1> 	ALIGNB 4
     8                              <1> 		
     9                              <1> 	vV_error_buffer:
    10 00000040 <res 00000040>      <1> 	resb 64
    11                              <1> 	vV_end_err_buff:
    12                              <1> 	vV_error_buffer_size equ vV_end_err_buff-vV_error_buffer
    13                              <1> 
    14                              <1> 
    15                              <1> 
    16                              <1> 
    17                              <1> segment .data
    18                              <1> 
    19                              <1> ;Error String	
    20                              <1> 
    21                              <1> 	
    22                              <1> 	vV_error_msg:
    23 00000108 556E68616E64656C65- <1> 	.default: db "Unhandeled Error "
    23 00000111 64204572726F7220    <1>
    24                              <1> 	default_size equ $-.default
    25 00000119 496E76616C69642049- <1> 	.invalid_index: db "Invalid Index Error : "
    25 00000122 6E646578204572726F- <1>
    25 0000012B 72203A20            <1>
    26                              <1> 	inv_indx_size equ $-.invalid_index
    27                              <1> 
    28                              <1> 
    29                              <1> 
    30                              <1> segment .text
    31                              <1> 
    32                              <1> 
    33                              <1> vV_error_invalid_index:
    34                              <1> 
    35                              <1> 
    36 000000B2 56                  <1> 	push rsi
    37 000000B3 57                  <1> 	push rdi	;Save reg used by syscall
    38 000000B4 4151                <1> 	push r9	;and by conversion func
    39 000000B6 53                  <1> 	push rbx	;Save Arg
    40                              <1> 	
    41 000000B7 BA16000000          <1> 	mov edx , inv_indx_size				;string lenght
    42 000000BC 48BE-               <1> 	mov rsi , vV_error_msg.invalid_index			;strng ptr
    42 000000BE [1901000000000000]  <1>
    43 000000C6 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    44 000000CB B801000000          <1> 	mov rax , 1				; Write sysCall
    45 000000D0 0F05                <1> 	syscall	
    46                              <1> 	
    47                              <1> 	
    48 000000D2 58                  <1> 	pop rax
    49                              <1> 	
    50 000000D3 BF[40000000]        <1> 	mov edi , vV_error_buffer
    51 000000D8 41B940000000        <1> 	mov r9d , vV_error_buffer_size
    52 000000DE E8C9030000          <1> 	call vV_ascii_int_to_dec	
    53                              <1> 
    54 000000E3 67C680[40000000]0A  <1> 	mov BYTE[vV_error_buffer + eax] , 0xa
    55                              <1> 	
    56 000000EB FFC0                <1> 	inc eax
    57                              <1> 	
    58 000000ED 89C2                <1> 	mov edx , eax				;string lenght
    59 000000EF 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
    59 000000F1 [4000000000000000]  <1>
    60 000000F9 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    61 000000FE B801000000          <1> 	mov rax , 1				; Write sysCall
    62 00000103 0F05                <1> 	syscall
    63                              <1> 	
    64 00000105 4159                <1> 	pop r9
    65 00000107 5F                  <1> 	pop rdi
    66 00000108 5E                  <1> 	pop rsi
    67                              <1> 	
    68 00000109 E88AFFFFFF          <1> 	call vV_error_fatal
    69                              <1> 	
    70 0000010E C3                  <1> 	ret
    71                              <1> 	
    72                              <1> 	
    73                              <1> 	
    74                              <1> 
    75                              <1> 	
    76                              <1> vV_error_unhandeled:
    77                              <1> 
    78                              <1> 
    79 0000010F 56                  <1> 	push rsi
    80 00000110 57                  <1> 	push rdi	;Save reg used by syscall
    81 00000111 4151                <1> 	push r9	;and by conversion func
    82                              <1> 	
    83                              <1> 	
    84                              <1> ;push rax	;Save flags ( and value)
    85                              <1> 
    86 00000113 53                  <1> 	push rbx	;Save Arg
    87 00000114 52                  <1> push rdx		;Save error code
    88                              <1> 	
    89                              <1> 	
    90 00000115 BA11000000          <1> 	mov edx , default_size				;string lenght
    91 0000011A 48BE-               <1> 	mov rsi , vV_error_msg.default			;strng ptr
    91 0000011C [0801000000000000]  <1>
    92 00000124 BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
    93 00000129 B801000000          <1> 	mov rax , 1				; Write sysCall
    94 0000012E 0F05                <1> 	syscall	
    95                              <1> 	
    96                              <1> 	
    97 00000130 58                  <1> pop rax	;error code
    98                              <1> 
    99                              <1> 
   100 00000131 C0E803              <1> 	shr al , 3
   101                              <1> 	
   102                              <1> 	
   103 00000134 BF[40000000]        <1> 	mov edi , vV_error_buffer
   104 00000139 41B940000000        <1> 	mov r9d , vV_error_buffer_size
   105                              <1> 	
   106                              <1> 
   107 0000013F E868030000          <1> 	call vV_ascii_int_to_dec	
   108                              <1> 	
   109                              <1> 		
   110                              <1> 	
   111 00000144 67C680[40000000]20  <1> 	mov BYTE[vV_error_buffer + eax] , ' '
   112                              <1> 	
   113                              <1> 	
   114                              <1> 	
   115                              <1> 	
   116 0000014C 67488DB8[41000000]  <1> 	lea rdi , [vV_error_buffer + eax + 1]
   117 00000154 4129F9              <1> 	sub r9d , edi
   118                              <1> 	
   119 00000157 58                  <1> 	pop rax
   120                              <1> 	
   121 00000158 E84F030000          <1> 	call vV_ascii_int_to_dec
   122                              <1> 	
   123 0000015D 674C8D0C07          <1> 	lea r9 , [edi + eax]
   124                              <1> 	
   125 00000162 41C6010A            <1> 	mov BYTE[r9] , 0xa
   126                              <1> 	
   127 00000166 49FFC1              <1> 	inc r9
   128                              <1> 	
   129 00000169 4981E9[40000000]    <1> 	sub r9 , vV_error_buffer
   130                              <1> 	
   131 00000170 4489CA              <1> 	mov edx , r9d				;string lenght
   132 00000173 48BE-               <1> 	mov rsi , vV_error_buffer			;strng ptr
   132 00000175 [4000000000000000]  <1>
   133 0000017D BF02000000          <1> 	mov rdi , 2				;file descriptor, stderr
   134 00000182 B801000000          <1> 	mov rax , 1				; Write sysCall
   135 00000187 0F05                <1> 	syscall
   136                              <1> 	
   137 00000189 4159                <1> 	pop r9
   138 0000018B 5F                  <1> 	pop rdi
   139 0000018C 5E                  <1> 	pop rsi
   140                              <1> 	
   141                              <1> 	
   142                              <1> 	
   143                              <1> 	
   144 0000018D C3                  <1> 	ret
   145                              <1> 	
   146                              <1> 	
   147                              <1> 	
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151                              <1> 		
   152                              <1> 		
   153                              <1> 		
   154                              <1> 		
   155                              <1> 		
   156                              <1> 		
   157                              <1> 		
   158                              <1> 		
   159                              <1> 		
   160                              <1> 		
   161                              <1> 		
   162                              <1> 		
   163                              <1> 		
   164                              <1> 		
   165                              <1> 		
   166                              <1> 		
   167                              <1> 
     6                                  %include "vVc/assembly/w_runtime/vV_system10.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	ALIGNB 4
     5                              <1> 	
     6                              <1> 	
     7                              <1> 	;------------Input Buffer
     8                              <1> 
     9                              <1> 
    10                              <1> 	
    11 00000080 <res 00000004>      <1> 	vV_input_buffer_content: resb 4			;Input Buffer current content
    12 00000084 <res 000000FF>      <1> 	vV_input_buffer: resb vV_input_buffer_size		;Input Buffer of 256 char
    13                              <1> 	
    14                              <1> 	
    15                              <1> 	
    16                              <1> 	
    17                              <1> ;------------Output Buffer
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22 00000183 <res 00000004>      <1> 	vV_output_buffer_content: resb 4			;Output Buffer current content
    23 00000187 <res 000000FF>      <1> 	vV_output_buffer: resb vV_output_buffer_size		;Output Buffer of 256 char
    24                              <1> 	
    25                              <1> 	
    26                              <1> 	
    27                              <1> 	
    28                              <1> ;------------Number Buffer
    29                              <1> 
    30                              <1> 
    31                              <1> 	
    32                              <1> 	
    33                              <1> 	;w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34                              <1> 	;endofline: resb 1					;Maybe Not Needed
    35                              <1> 	
    36                              <1> 
    37                              <1> 
    38                              <1> segment .data
    39 0000012F 90                  <1> 	ALIGN 4
    40 00000130 [AC040000]          <1> 	vV_sys_format_mode: dd vV_ascii_int_to_dec
     7                                  %include "vVc/assembly/w_runtime/vV_io.asm"			
     1                              <1> 
     2                              <1> 
     3                              <1> ;%include "vVc/assembly/w_runtime/vV_ascii.asm"
     4                              <1> 
     5                              <1> 
     6                              <1> ;Group all read/wrie syscalls
     7                              <1> 
     8                              <1> ;global convert_to_string
     9                              <1> ;global convert_to_int
    10                              <1> 
    11                              <1> ;extern vV_input_buffer
    12                              <1> ;extern vV_output_buffer
    13                              <1> ;extern w_number_buffer
    14                              <1> 
    15                              <1> global wio_out
    16                              <1> global wio_get
    17                              <1> global wio_get_str_raw
    18                              <1> global wio_get_str_null
    19                              <1> global wio_get_str_nline
    20                              <1> global wio_move_in_to_out
    21                              <1> 
    22                              <1> 
    23                              <1> segment .text 
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> vV_io_flush_no_nline:							;Temporary
    28                              <1> 	
    29                              <1> 	
    30                              <1> 	
    31 0000018E 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    32                              <1> 	
    33 00000195 C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    33 0000019D 000000              <1>
    34                              <1> 	
    35 000001A0 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    35 000001A2 [8701000000000000]  <1>
    36                              <1> 		
    37 000001AA BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    38 000001AF B801000000          <1> 	mov rax , 1					; Write sysCall
    39 000001B4 0F05                <1> 	syscall
    40                              <1> 	
    41                              <1> 	
    42                              <1> 	
    43 000001B6 C3                  <1> 	ret
    44                              <1> 
    45                              <1> vV_io_flush:
    46                              <1> 	
    47                              <1> 	
    48                              <1> 	
    49 000001B7 8B1425[83010000]    <1> 	mov edx , DWORD[vV_output_buffer_content]			;string lenght	
    50                              <1> 	
    51 000001BE C70425[83010000]00- <1> 	mov DWORD[vV_output_buffer_content] , 0
    51 000001C6 000000              <1>
    52                              <1> 	
    53 000001C9 48BE-               <1> 	mov rsi , vV_output_buffer			;strng ptr
    53 000001CB [8701000000000000]  <1>
    54                              <1> 		
    55 000001D3 67C682[87010000]0A  <1> 	mov BYTE[vV_output_buffer + edx] , 0xa
    56 000001DB FFC2                <1> 	inc edx
    57                              <1> 		
    58 000001DD BF01000000          <1> 	mov rdi , 1					;file descriptor, stdout
    59 000001E2 B801000000          <1> 	mov rax , 1					; Write sysCall
    60 000001E7 0F05                <1> 	syscall
    61                              <1> 	
    62                              <1> 	
    63                              <1> 	
    64 000001E9 C3                  <1> 	ret
    65                              <1> 	
    66                              <1> 		
    67                              <1> ;-------------------------------------------------------------------------------
    68                              <1> ;-------------------------------------------------------------------------------
    69                              <1> 	
    70                              <1> vV_io_out_buffer_default:
    71                              <1> 
    72 000001EA 448B1425[30010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    73 000001F2 E80F000000          <1> 	call vV_io_out_buffer
    74 000001F7 C3                  <1> 	ret
    75                              <1> 	
    76                              <1> vV_io_out_default:
    77                              <1> 
    78 000001F8 448B1425[30010000]  <1> 	mov r10d , DWORD[vV_sys_format_mode]	
    79 00000200 E80C000000          <1> 	call vV_io_out
    80 00000205 C3                  <1> 	ret
    81                              <1> 
    82                              <1> ;-------------------------------------------------------------------------------
    83                              <1> ;-------------------------------------------------------------------------------
    84                              <1> 	
    85                              <1> vV_io_out_buffer:				;print str repr of Top Of Stack element
    86                              <1> 						
    87                              <1> 						
    88 00000206 E811000000          <1> 	call vV_io_out01			
    89 0000020B E84A000000          <1> 	call vV_io_out_buffer_end
    90 00000210 C3                  <1> 	ret
    91                              <1> 
    92                              <1> ;-------------------------------------------------------------------------------
    93                              <1> 		
    94                              <1> vV_io_out:					;print str repr of Top Of Stack element
    95                              <1> 
    96                              <1> 
    97 00000211 E806000000          <1> 	call vV_io_out01					
    98 00000216 E826000000          <1> 	call vV_io_out_direct_end
    99 0000021B C3                  <1> 	ret
   100                              <1> 
   101                              <1> ;-------------------------------------------------------------------------------	
   102                              <1> ;-------------------------------------------------------------------------------	
   103                              <1> 
   104                              <1> vV_io_out01:					;print str repr of Top Of Stack element
   105                              <1> 
   106                              <1> 
   107                              <1> 	vV_pop eax				;get value in eax
   107                              <2> 
   107 0000021C 4983EF04            <2>  sub vV_sp , 4
   107 00000220 418B07              <2>  mov %1 , [vV_sp]
   107                              <2> 
   108                              <1> 	
   109 00000223 BF[87010000]        <1> 	mov edi , vV_output_buffer		;set dest as O_buff
   110 00000228 033C25[83010000]    <1> 	add edi ,DWORD[vV_output_buffer_content]		;set offset to start of freespace
   111                              <1> 	
   112 0000022F 57                  <1> push rdi					;Save buffer origin
   113                              <1> 	
   114 00000230 41B9FF000000        <1> 	mov r9 , 255				;set Max buffer available	
   115 00000236 4129F9              <1> 	sub r9d , edi				;#TODO: Stop HardCoding VALUES!!!!
   116 00000239 41FFD2              <1> 		call r10			;call current conversion format function
   117 0000023C 4831FF              <1> 	xor rdi , rdi
   118                              <1> 	
   119 0000023F 5F                  <1> pop rdi						;recover Buffer origin
   120                              <1> 	
   121 00000240 C3                  <1> 	ret
   122                              <1> 
   123                              <1> ;-------------------------------------------------------------------------------	
   124                              <1> 	
   125                              <1> vV_io_out_direct_end:
   126                              <1> 
   127                              <1> 
   128                              <1> 
   129 00000241 67C604070A          <1> 	mov BYTE[edi + eax] , 0xa		;add new_line
   130                              <1> 		
   131 00000246 FFC0                <1> 		inc eax
   132                              <1> 		
   133 00000248 89C2                <1> 		mov edx , eax				;string lenght		
   134 0000024A 4889FE              <1> 		mov rsi , rdi				;strng ptr
   135 0000024D BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   136 00000252 B801000000          <1> 		mov rax , 1				; Write sysCall
   137 00000257 0F05                <1> 		syscall
   138                              <1> 	
   139 00000259 C3                  <1> 		ret
   140                              <1> 
   141                              <1> ;-------------------------------------------------------------------------------		
   142                              <1> 		
   143                              <1> vV_io_out_buffer_end:
   144                              <1> 
   145 0000025A 010425[83010000]    <1> 	add [vV_output_buffer_content] , eax
   146                              <1> 
   147 00000261 C3                  <1> 	ret
   148                              <1> 
   149                              <1> ;-------------------------------------------------------------------------------
   150                              <1> 
   151                              <1> vV_io_out_char:
   152                              <1> 
   153                              <1> 	
   154 00000262 E827000000          <1> 	call vV_io_read_char
   155 00000267 E8D5FFFFFF          <1> 	call vV_io_out_direct_end
   156                              <1> 	
   157 0000026C C3                  <1> 	ret
   158                              <1> 	
   159                              <1> vV_io_out_packed_char:
   160                              <1> 
   161                              <1> 	
   162 0000026D E842000000          <1> 	call vV_io_read_packed_char
   163                              <1> 	
   164 00000272 E8CAFFFFFF          <1> 	call vV_io_out_direct_end
   165                              <1> 	
   166 00000277 C3                  <1> 	ret
   167                              <1> 	
   168                              <1> vV_io_out_char_buffer:
   169                              <1> 
   170 00000278 E811000000          <1> 	call vV_io_read_char
   171                              <1> 	
   172 0000027D E8D8FFFFFF          <1> 	call vV_io_out_buffer_end
   173                              <1> 	
   174 00000282 C3                  <1> 	ret
   175                              <1> 	
   176                              <1> vV_io_out_packed_char_buffer:
   177                              <1> 
   178 00000283 E82C000000          <1> 	call vV_io_read_packed_char
   179                              <1> 	
   180 00000288 E8CDFFFFFF          <1> 	call vV_io_out_buffer_end
   181                              <1> 	
   182 0000028D C3                  <1> 	ret
   183                              <1> 	
   184                              <1> vV_io_read_char:
   185                              <1> 
   186                              <1> 	vV_pop eax
   186                              <2> 
   186 0000028E 4983EF04            <2>  sub vV_sp , 4
   186 00000292 418B07              <2>  mov %1 , [vV_sp]
   186                              <2> 
   187                              <1> 	
   188 00000295 48BF-               <1> 	mov rdi , vV_output_buffer
   188 00000297 [8701000000000000]  <1>
   189 0000029F 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   190                              <1> 	
   191 000002A6 678807              <1> 	mov [edi] , al
   192                              <1> 	
   193 000002A9 BF[87010000]        <1> 	mov edi , vV_output_buffer
   194 000002AE B801000000          <1> 	mov eax , 1
   195                              <1> 	
   196 000002B3 C3                  <1> 	ret	
   197                              <1> 	
   198                              <1> vV_io_read_packed_char:
   199                              <1> 
   200                              <1> 	vV_pop eax
   200                              <2> 
   200 000002B4 4983EF04            <2>  sub vV_sp , 4
   200 000002B8 418B07              <2>  mov %1 , [vV_sp]
   200                              <2> 
   201                              <1> 	
   202 000002BB 48BF-               <1> 	mov rdi , vV_output_buffer
   202 000002BD [8701000000000000]  <1>
   203 000002C5 033C25[83010000]    <1> 	add edi , [vV_output_buffer_content]
   204                              <1> 	
   205 000002CC 678907              <1> 	mov [edi] , eax
   206                              <1> 	
   207 000002CF BF[87010000]        <1> 	mov edi , vV_output_buffer
   208 000002D4 B804000000          <1> 	mov eax , 4	
   209                              <1> 	
   210 000002D9 C3                  <1> 	ret
   211                              <1> 		
   212                              <1> ;-------------------------------------------------------------------------------
   213                              <1> ;-------------------------------------------------------------------------------
   214                              <1> ;-------------------------------------------------------------------------------
   215                              <1> ;-------------------------------------------------------------------------------
   216                              <1> ;-------------------------------------------------------------------------------
   217                              <1> ;-------------------------------------------------------------------------------
   218                              <1> ;-------------------------------------------------------------------------------
   219                              <1> 	
   220                              <1> vV_io_read:
   221                              <1> 
   222                              <1> 								
   223 000002DA 48BE-               <1> 		mov rsi , vV_input_buffer		;ptr to string destination	
   223 000002DC [8400000000000000]  <1>
   224 000002E4 BAFF000000          <1> 		mov edx , vV_input_buffer_size				;string lenght	
   225 000002E9 BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   226 000002EE B800000000          <1> 		mov rax , 0				; read sysCall
   227                              <1> 		
   228 000002F3 0F05                <1> 		syscall
   229                              <1> 	
   230                              <1> ;-------------Buffer_Overflow_Execption  
   231                              <1> 
   232                              <1> 
   233                              <1> 
   234 000002F5 3DFF000000          <1> 		cmp eax , 255				;Check if Buffer Is Full
   235                              <1> 		
   236 000002FA 721F                <1> 			jb .no_overflow
   237                              <1> 			
   238 000002FC 803C25[82010000]0A  <1> 		cmp BYTE[vV_input_buffer + vV_input_buffer_size-1] , 0xa	;Check if Buffer end with "\n"
   239                              <1> 		
   240 00000304 7415                <1> 			je .no_overflow
   241                              <1> 		
   242                              <1> 		
   243 00000306 50                  <1> 			push rax
   244 00000307 53                  <1> 			push rbx
   245                              <1> 		
   246 00000308 B401                <1> 			mov ah , vV_ERR_IO_I_OVERFLOW
   247 0000030A 6683C800            <1> 			or ax , 0
   248 0000030E 4831DB              <1> 			xor rbx , rbx
   249 00000311 4889F3              <1> 			mov rbx , rsi
   250                              <1> 		
   251 00000314 E86DFDFFFF          <1> 			call vV_error
   252                              <1> 		
   253 00000319 5B                  <1> 			pop rbx
   254 0000031A 58                  <1> 			pop rax
   255                              <1> 		
   256                              <1> 			;ret
   257                              <1> 		
   258                              <1> 		.no_overflow:
   259                              <1> 		
   260 0000031B C3                  <1> 			ret
   261                              <1> 		
   262                              <1> 		
   263                              <1> 	
   264                              <1> 	
   265                              <1> vV_io_get_default:
   266                              <1> 
   267 0000031C 41BA[BC030000]      <1> 	mov r10d , vV_ascii_as_dec			;TODO: default settings
   268 00000322 E801000000          <1> 	call vV_io_get
   269 00000327 C3                  <1> 	ret
   270                              <1> 	
   271                              <1> 	
   272                              <1> vV_io_get:						;convert inputed value to 
   273                              <1> 							;32bit int, push it on
   274                              <1> 							;the stack
   275 00000328 E8ADFFFFFF          <1> 	call vV_io_read
   276                              <1> 		
   277                              <1> ;----------------------------------------------	
   278                              <1> 
   279 0000032D 53                  <1> 	push rbx				;Save rbx (conversion uses it) 
   280                              <1> 
   281 0000032E 89C3                <1> 		mov ebx , eax 			;send char count by ebx
   282 00000330 31FF                <1> 		xor edi , edi 			;zero out counter
   283 00000332 BE[84000000]        <1> 		mov esi , vV_input_buffer	;Set source to I_buffer
   284                              <1> 		
   285                              <1> 
   286 00000337 41FFD2              <1> 		call r10
   287                              <1> 		
   288 0000033A 5B                  <1> 	pop rbx
   289                              <1> 	
   290                              <1> 		vV_push eax
   290                              <2> 
   290 0000033B 418907              <2>  mov DWORD[vV_sp] , %1
   290 0000033E 4983C704            <2>  add vV_sp , 4
   290                              <2> 
   291                              <1> 		
   292 00000342 C3                  <1> 		ret
   293                              <1> 
   294                              <1> 
   295                              <1> ;-------------------------------------------------------------------------------
   296                              <1> ;-------------------------------------------------------------------------------
   297                              <1> 
   298                              <1> 
   299                              <1> vV_io_get_char:
   300                              <1> 
   301                              <1> 
   302 00000343 E892FFFFFF          <1> 	call vV_io_read
   303                              <1> 	
   304 00000348 31D2                <1> 	xor edx , edx
   305                              <1> 	
   306 0000034A 8A1425[84000000]    <1> 	mov dl , [vV_input_buffer]
   307                              <1> 	
   308                              <1> 	vV_push edx
   308                              <2> 
   308 00000351 418917              <2>  mov DWORD[vV_sp] , %1
   308 00000354 4983C704            <2>  add vV_sp , 4
   308                              <2> 
   309                              <1> 	
   310 00000358 C3                  <1> 	ret
   311                              <1> 	
   312                              <1> vV_io_get_packed_char:
   313                              <1> 
   314 00000359 C70425[84000000]00- <1> 	mov DWORD [vV_input_buffer] , 0
   314 00000361 000000              <1>
   315                              <1> 
   316 00000364 E871FFFFFF          <1> 	call vV_io_read
   317                              <1> 	
   318 00000369 31D2                <1> 	xor edx , edx
   319                              <1> 	
   320 0000036B 8B1425[84000000]    <1> 	mov edx, [vV_input_buffer]
   321                              <1> 	
   322                              <1> 	vV_push edx
   322                              <2> 
   322 00000372 418917              <2>  mov DWORD[vV_sp] , %1
   322 00000375 4983C704            <2>  add vV_sp , 4
   322                              <2> 
   323                              <1> 	
   324 00000379 C3                  <1> 	ret
   325                              <1> 	
   326                              <1> 		
   327                              <1> 		
   328                              <1> 
   329                              <1> 
   330                              <1> 
     8                                  %include "vVc/assembly/w_runtime/vV_ascii.asm"		
     1                              <1> 
     2                              <1> 
     3                              <1> segment .text 
     4                              <1> 
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> vV_ascii_as_hex2:						;Jumped to from parse_num OR called
     9                              <1> 								;use edi as counter/offset in string !Set if direct call
    10                              <1> 								;use esi as source string
    11                              <1> 								;concatenate result in eax
    12                              <1> 								;parse digit in cl
    13                              <1> 								
    14                              <1> 								;use r8 for base
    15                              <1> 								;use r9 for max_value
    16                              <1> 								
    17                              <1> 							
    18                              <1> 	;mov r8 , 16	
    19                              <1> 	
    20                              <1> 	.start_loop:
    21                              <1> 	
    22 0000037A 678A0C3E            <1> 		mov cl , [esi + edi]
    23                              <1> 	
    24                              <1> 		
    25 0000037E 80F930              <1> 		cmp cl , 48
    26                              <1> 		
    27 00000381 7265                <1> 			jb vV_ascii_unvalid
    28                              <1> 			
    29 00000383 80F93A              <1> 		cmp cl , 58
    30                              <1> 		
    31 00000386 720D                <1> 			jb .pass_int
    32                              <1> 			
    33 00000388 80F966              <1> 			cmp cl , 'f'
    34                              <1> 			
    35 0000038B 775B                <1> 				ja vV_ascii_unvalid
    36                              <1> 			
    37 0000038D 80F961              <1> 			cmp cl , 'a'
    38                              <1> 			
    39 00000390 7256                <1> 				jb vV_ascii_unvalid
    40                              <1> 				
    41 00000392 80E927              <1> 			sub cl , 39
    42                              <1> 				
    43                              <1> 			
    44                              <1> 		.pass_int:	
    45                              <1> 			
    46 00000395 80E930              <1> 		sub cl , '0'
    47                              <1> 		
    48                              <1> 		
    49                              <1> 		
    50 00000398 31D2                <1> 		xor edx , edx
    51                              <1> 		
    52 0000039A F8                  <1> 		clc
    53                              <1> 		
    54 0000039B 41F7E0              <1> 		mul r8d
    55                              <1> 		
    56 0000039E 725D                <1> 		jc vV_ascii_overflow
    57                              <1> 		
    58 000003A0 01C8                <1> 		add eax , ecx
    59                              <1> 		
    60                              <1> 		.pass02:
    61                              <1> 		
    62 000003A2 FFC7                <1> 		inc edi
    63                              <1> 		
    64 000003A4 39DF                <1> 		cmp edi , ebx
    65                              <1> 		
    66 000003A6 72D2                <1> 		jb .start_loop
    67                              <1> 
    68                              <1> 		
    69 000003A8 C3                  <1> 		ret	
    70                              <1> 		
    71                              <1> 		
    72                              <1> ;
    73                              <1> ;				ebx		esi
    74                              <1> ;	ascii_to_format( buffer_size , buffer_adress ) 
    75                              <1> ;		
    76                              <1> ;
    77                              <1> ;	set:	rcx,rdx (rax) to 0
    78                              <1> ;		r8,r9
    79                              <1> ;		
    80                              <1> ;	call: specialized dexodefunction
    81                              <1> 		
    82                              <1> vV_ascii_as_hex:
    83                              <1> 	
    84 000003A9 FFCB                <1> 	dec ebx
    85 000003AB 41B810000000        <1> 	mov r8 , 16	
    86 000003B1 4831C0              <1> 	xor rax , rax 		;(just in case not switching from dec mode)			
    87 000003B4 4831C9              <1> 	xor rcx , rcx
    88 000003B7 4831D2              <1> 	xor rdx , rdx
    89 000003BA EBBE                <1> 	jmp vV_ascii_as_hex2
    90                              <1> 
    91                              <1> vV_ascii_as_dec:
    92                              <1> 
    93 000003BC FFCB                <1> 	dec ebx
    94 000003BE 41B80A000000        <1> 	mov r8 , 10			
    95 000003C4 41B93A000000        <1> 	mov r9 , 58
    96 000003CA 4831C9              <1> 	xor rcx , rcx
    97 000003CD 4831D2              <1> 	xor rdx , rdx
    98 000003D0 EB5E                <1> 	jmp vV_ascii_as_decbin
    99                              <1> 
   100                              <1> vV_ascii_as_bin:
   101                              <1> 
   102 000003D2 FFCB                <1> 	dec ebx
   103 000003D4 41B802000000        <1> 	mov r8 , 2			
   104 000003DA 41B932000000        <1> 	mov r9 , 50
   105 000003E0 4831C9              <1> 	xor rcx , rcx
   106 000003E3 4831D2              <1> 	xor rdx , rdx
   107                              <1> 	
   108 000003E6 EB48                <1> 	jmp vV_ascii_as_decbin
   109                              <1> 	
   110                              <1> vV_ascii_unvalid:
   111                              <1> 	
   112                              <1> 		;mov rax , 24;	#TODO: Defined Errors code/ data in file
   113                              <1> 		;xor rdx , rdx
   114                              <1> 		;mov dl , cl
   115                              <1> 		
   116                              <1> 		;call w_forced_exit
   117                              <1> 		
   118 000003E8 50                  <1> 		push rax
   119 000003E9 53                  <1> 		push rbx
   120                              <1> 		
   121 000003EA B403                <1> 		mov ah , vV_ERR_IO_I_UNVALID
   122 000003EC 6683C800            <1> 		or ax , 0
   123 000003F0 4831DB              <1> 		xor rbx , rbx
   124 000003F3 88CB                <1> 		mov bl , cl
   125                              <1> 		
   126 000003F5 E88CFCFFFF          <1> 		call vV_error
   127                              <1> 		
   128 000003FA 5B                  <1> 		pop rbx
   129 000003FB 58                  <1> 		pop rax
   130                              <1> 		
   131 000003FC C3                  <1> 		ret
   132                              <1> 		
   133                              <1> 		
   134                              <1> 		
   135                              <1> 		
   136                              <1> vV_ascii_overflow:
   137                              <1> 	
   138 000003FD 50                  <1> 		push rax
   139 000003FE 53                  <1> 		push rbx
   140                              <1> 		
   141 000003FF 4831DB              <1> 		xor rbx , rbx
   142 00000402 4889C3              <1> 		mov rbx , rax
   143                              <1> 		
   144                              <1> 		;or rbx , 0x00010000
   145                              <1> 		
   146 00000405 B401                <1> 		mov ah , vV_ERR_IO_I_OVERFLOW
   147 00000407 6683C800            <1> 		or ax , 0
   148                              <1> 		
   149                              <1> 		
   150                              <1> 		
   151 0000040B E876FCFFFF          <1> 		call vV_error
   152                              <1> 		
   153 00000410 5B                  <1> 		pop rbx
   154 00000411 58                  <1> 		pop rax
   155                              <1> 		
   156                              <1> 		;TODO: Maybe use vV_error return value for decision making
   157                              <1> 		
   158 00000412 B8FFFFFFFF          <1> 		mov eax , -1
   159                              <1> 		
   160 00000417 C3                  <1> 		ret
   161                              <1> 		
   162                              <1> 		
   163                              <1> vV_ascii_change_to_hex:
   164                              <1> 		
   165 00000418 83F800              <1> 		cmp eax , 0
   166                              <1> 			
   167 0000041B 75CB                <1> 			jne vV_ascii_unvalid
   168                              <1> 			
   169 0000041D 41B810000000        <1> 		mov r8 , 16
   170 00000423 4831C9              <1> 		xor rcx , rcx
   171 00000426 4831C0              <1> 		xor rax ,rax
   172                              <1> 				
   173 00000429 FFC7                <1> 		inc edi
   174 0000042B E94AFFFFFF          <1> 		jmp vV_ascii_as_hex2		
   175                              <1> 		
   176                              <1> 	
   177                              <1> 
   178                              <1> 
   179                              <1> vV_ascii_as_decbin:						;ebx: number of char to read
   180                              <1> 
   181                              <1> 	
   182                              <1> 
   183                              <1> 								;use edi as counter/offset in string
   184                              <1> 								;concatenate result in eax
   185                              <1> 								;parse digit in cl
   186                              <1> 								
   187                              <1> 								;use r8 for base
   188                              <1> 								;use r9 for max_value					
   189                              <1> 								;itou
   190                              <1> 	;xor edi, edi			;should be set by caller
   191 00000430 4831C0              <1> 	xor rax , rax
   192                              <1> 	
   193 00000433 4831C9              <1> 	xor rcx , rcx
   194                              <1> 	
   195 00000436 4831D2              <1> 	xor rdx , rdx
   196                              <1> 	
   197                              <1> 	
   198                              <1> 	.start_loop:
   199                              <1> 	
   200 00000439 678A0C3E            <1> 		mov cl , [esi + edi]
   201                              <1> 		
   202                              <1> 		
   203 0000043D 80F962              <1> 		cmp cl , 'b'										
   204 00000440 7513                <1> 			jne .pass01
   205                              <1> 		
   206                              <1> 		.format_change:
   207                              <1> 			
   208 00000442 83F800              <1> 			cmp eax , 0
   209                              <1> 			
   210 00000445 75A1                <1> 				jne vV_ascii_unvalid
   211                              <1> 				
   212 00000447 41B802000000        <1> 			mov r8 , 2
   213                              <1> 			
   214 0000044D 41B932000000        <1> 			mov r9 , 50
   215                              <1> 	
   216 00000453 EB26                <1> 			jmp .pass02
   217                              <1> 		
   218                              <1> 		
   219                              <1> 	
   220                              <1> 		.pass01:
   221                              <1> 		
   222 00000455 80F968              <1> 		cmp cl , 'h'											
   223 00000458 74BE                <1> 			je vV_ascii_change_to_hex
   224 0000045A 80F978              <1> 		cmp cl , 'x'											
   225 0000045D 74B9                <1> 			je vV_ascii_change_to_hex
   226                              <1> 			
   227                              <1> 			
   228 0000045F 4438C9              <1> 		cmp cl , r9b
   229                              <1> 		
   230 00000462 7384                <1> 			jae vV_ascii_unvalid
   231                              <1> 		
   232 00000464 80F930              <1> 		cmp cl , 48
   233                              <1> 		
   234 00000467 0F827BFFFFFF        <1> 			jb vV_ascii_unvalid
   235                              <1> 			
   236                              <1> 		
   237                              <1> 			
   238 0000046D 80E930              <1> 		sub cl , 48
   239                              <1> 		
   240 00000470 4831D2              <1> 		xor rdx , rdx
   241 00000473 F8                  <1> 		clc
   242                              <1> 		
   243 00000474 41F7E0              <1> 		mul r8d
   244                              <1> 		
   245 00000477 7284                <1> 		jc vV_ascii_overflow
   246                              <1> 		
   247 00000479 01C8                <1> 		add eax , ecx
   248                              <1> 		
   249                              <1> 		.pass02:
   250                              <1> 		
   251 0000047B FFC7                <1> 		inc edi
   252                              <1> 		
   253 0000047D 39DF                <1> 		cmp edi , ebx
   254                              <1> 		
   255 0000047F 72B8                <1> 		jb .start_loop
   256                              <1> 		
   257                              <1> 		
   258 00000481 C3                  <1> 		ret			; result should be in eax
   259                              <1> 		
   260                              <1> 
   261                              <1> 	
   262                              <1> ;------------------------------------------------------------------------------------------
   263                              <1> ;------------------------------------------------------------------------------------------
   264                              <1> 
   265                              <1> 
   266                              <1> 
   267                              <1> vV_ascii_int_to_hex:					;value in eax
   268                              <1> 						;dest in rdi
   269                              <1> 
   270                              <1> 
   271                              <1> 
   272 00000482 31C9                <1> 	xor ecx , ecx	
   273                              <1> 	
   274 00000484 BE10000000          <1> 	mov esi , 16
   275                              <1> 
   276                              <1> 	
   277                              <1> 	.loop01:
   278                              <1> 	
   279 00000489 4831D2              <1> 		xor rdx , rdx
   280                              <1> 		
   281 0000048C F7F6                <1> 		div esi
   282                              <1> 		
   283                              <1> 		
   284 0000048E 80FA0A              <1> 		cmp dl , 10
   285                              <1> 		
   286 00000491 7203                <1> 		jb .dec
   287                              <1> 		
   288 00000493 80C207              <1> 			add dl , 7
   289                              <1> 		
   290                              <1> 		.dec:
   291                              <1> 		
   292 00000496 80C230              <1> 			add dl , '0'
   293                              <1> 		
   294                              <1> 		
   295 00000499 52                  <1> 		push rdx
   296                              <1> 		
   297 0000049A FFC1                <1> 		inc ecx
   298                              <1> 		
   299 0000049C 39F0                <1> 		cmp eax , esi
   300                              <1> 		
   301 0000049E 73E9                <1> 		jae .loop01
   302                              <1> 	
   303                              <1> 	
   304 000004A0 3C0A                <1> 	cmp al , 10
   305                              <1> 		
   306 000004A2 7202                <1> 		jb .dec2
   307                              <1> 		
   308 000004A4 0407                <1> 			add al , 7
   309                              <1> 		
   310                              <1> 		.dec2:
   311                              <1> 		
   312 000004A6 0430                <1> 			add al , '0'	
   313 000004A8 8807                <1> 	mov [rdi] , al
   314                              <1> 	
   315 000004AA EB1B                <1> 	jmp vV_ascii_pop_digits
   316                              <1> 		
   317                              <1> 	
   318                              <1> 	
   319                              <1> 	
   320                              <1> vV_ascii_int_to_dec:					;value in eax
   321                              <1> 						;dest in rdi
   322                              <1> 						;max_dest_size in r9d
   323                              <1> 
   324                              <1> 
   325                              <1> 
   326 000004AC 31C9                <1> 	xor ecx , ecx	
   327                              <1> 	
   328 000004AE BE0A000000          <1> 	mov esi , 10
   329                              <1> 	
   330                              <1> 
   331                              <1> 
   332                              <1> 	
   333                              <1> 	.loop01:
   334                              <1> 	
   335 000004B3 4831D2              <1> 		xor rdx , rdx
   336                              <1> 		
   337 000004B6 F7F6                <1> 		div esi
   338                              <1> 		
   339                              <1> 		
   340 000004B8 80C230              <1> 		add dl , '0'
   341 000004BB 52                  <1> 		push rdx
   342                              <1> 		
   343 000004BC FFC1                <1> 		inc ecx
   344                              <1> 		
   345 000004BE 83F80A              <1> 		cmp eax , 10
   346                              <1> 		
   347 000004C1 73F0                <1> 		jae .loop01
   348                              <1> 	
   349 000004C3 0430                <1> 	add al , '0'	
   350 000004C5 8807                <1> 	mov [rdi] , al
   351                              <1> 		
   352                              <1> 	
   353                              <1> 		
   354                              <1> vV_ascii_pop_digits:			; Need nb of digits currently on stack(ecx)
   355                              <1> 						;dest in rdi
   356 000004C7 41B801000000        <1> 		mov r8d , 1
   357 000004CD FFC1                <1> 		inc ecx
   358                              <1> 		
   359 000004CF 4439C9              <1> 		cmp ecx , r9d
   360                              <1> 		
   361 000004D2 7219                <1> 		jb .loopstart
   362                              <1> 		
   363                              <1> 	
   364 000004D4 50                  <1> 			push rax
   365 000004D5 53                  <1> 			push rbx
   366                              <1> 		
   367 000004D6 B410                <1> 			mov ah , vV_ERR_MEMORY_BUFFER_LIMIT
   368 000004D8 6683C800            <1> 			or ax , 0
   369 000004DC 4831DB              <1> 			xor rbx , rbx
   370 000004DF 89FB                <1> 			mov ebx , edi
   371                              <1> 		
   372 000004E1 E8A0FBFFFF          <1> 			call vV_error
   373                              <1> 		
   374 000004E6 5B                  <1> 			pop rbx
   375 000004E7 58                  <1> 			pop rax
   376                              <1> 			
   377 000004E8 4489C9              <1> 			mov ecx , r9d		;Should protect memory..
   378 000004EB FFC9                <1> 			dec ecx		;will need testing
   379                              <1> 		
   380                              <1> 						
   381                              <1> 		.loopstart:
   382                              <1> 		
   383 000004ED 5A                  <1> 			pop rdx
   384 000004EE 6742881407          <1> 			mov BYTE[edi + r8d] , dl
   385 000004F3 41FFC0              <1> 			inc r8d
   386                              <1> 			
   387 000004F6 4139C8              <1> 			cmp r8d , ecx
   388                              <1> 		
   389 000004F9 72F2                <1> 		jb .loopstart
   390                              <1> 	
   391                              <1> 	
   392 000004FB 89C8                <1> 		mov eax , ecx
   393                              <1> 		
   394 000004FD C3                  <1> 		ret	
   395                              <1> 	
   396                              <1> 	
   397                              <1> vV_ascii_int_to_bin:					;value in eax, 
   398                              <1> 							
   399                              <1> 
   400                              <1> 
   401 000004FE 31C9                <1> 	xor ecx , ecx
   402                              <1> 	
   403                              <1> 	
   404                              <1> 	.loop01:
   405                              <1> 	
   406                              <1> 		
   407 00000500 D1E8                <1> 		shr eax , 1
   408                              <1> 		
   409 00000502 7205                <1> 		jc .one
   410                              <1> 		
   411 00000504 B230                <1> 			mov dl , '0'
   412 00000506 52                  <1> 			push rdx
   413                              <1> 			
   414 00000507 EB03                <1> 		jmp .next
   415                              <1> 		.one:
   416                              <1> 			
   417 00000509 B231                <1> 			mov dl , '1'
   418 0000050B 52                  <1> 			push rdx
   419                              <1> 		
   420                              <1> 		.next:
   421                              <1> 		
   422 0000050C FFC1                <1> 		inc ecx
   423                              <1> 		
   424 0000050E 83F801              <1> 		cmp eax , 1
   425                              <1> 		
   426 00000511 77ED                <1> 		ja .loop01
   427                              <1> 	
   428 00000513 0430                <1> 	add al , '0'	
   429 00000515 8807                <1> 	mov [rdi] , al
   430                              <1> 	
   431 00000517 EBAE                <1> 	jmp vV_ascii_pop_digits
   432                              <1> 	
   433                              <1> 	
   434                              <1> ;Will need a special version for String stack
   435                              <1> 
   436                              <1> 
   437                              <1> 
   438                              <1> 
   439                              <1> 
   440                              <1> 
   441                              <1> 
     9                                  %include "w_samples/assembly/vartest_vars.was"	
     1                              <1>  segment .data 
     2                              <1> 
     3                              <1>  i_global:
     4                              <1>  segment .bss 
     5                              <1> 
     6                              <1> 	u_global:
     7 00000286 <res 00000010>      <1> .a: resb 16 
     8 00000296 <res 00000010>      <1> .c: resb 16 
     9 000002A6 <res 00000004>      <1> .b: resb 4 
    10 000002AA <res 00000040>      <1> .matrix: resb 64 
    11 000002EA <res 00000004>      <1> .xyg: resb 4 
    12 000002EE <res 00000004>      <1> .p: resb 4 
    13 000002F2 <res 00000010>      <1> .l4: resb 16 
    14 00000302 <res 00000010>      <1> .l2: resb 16 
    15 00000312 <res 00000010>      <1> .l3: resb 16 
    16 00000322 <res 00000010>      <1> .l1: resb 16 
    17 00000332 <res 00000004>      <1> .x: resb 4 
    10                                  %include "vVc/assembly/w_runtime/vV_system90.asm"		
     1                              <1> 
     2                              <1> segment .bss
     3                              <1> 
     4                              <1> 	
     5                              <1> 	
     6                              <1> 	stacks: 
     7                              <1> 
     8                              <1> 
     9 00000336 <res 00040000>      <1> 	string_stack_start: resb 262144
    10                              <1> 
    11                              <1> 
    12                              <1> 	
    13                              <1> 	
    14                              <1> 						
    15 00040336 <res 00020000>      <1> 	fake_stack_start: resb 131072
    11                                  
    12                                  
    13                                  
    14                                  global w_entry_point
    15                                  
    16                                  
    17                                  
    18                                  segment .text 
    19                                  
    20                                  
    21                                  
    22                                  		
    23                                  
    24                                  
    25                                  
    26                                  vV_entry_point:
    27                                  
    28                                  
    29 00000519 4889E5                  	mov rbp, rsp			;Setup Stack Frame
    30                                  	
    31                                  	
    32                                   ;OpADR: [0]  ; PUSH opcode 
    33                                  
    34                                  	vV_push 420 
    34                              <1> 
    34 0000051C 41C707A4010000      <1>  mov DWORD[vV_sp] , %1
    34 00000523 4983C704            <1>  add vV_sp , 4
    34                              <1> 
    35                                  
    36                                  
    37                                   ;OpADR: [1]  ; Var assignement					
    38                                  
    39 00000527 4831C0                  	xor rax , rax
    40 0000052A 488D3C25[32030000]      	lea rdi , [u_global.x]	
    41                                  	vV_pop ecx	
    41                              <1> 
    41 00000532 4983EF04            <1>  sub vV_sp , 4
    41 00000536 418B0F              <1>  mov %1 , [vV_sp]
    41                              <1> 
    42 00000539 4801C7                  	add rdi , rax	
    43 0000053C 890F                    	mov [rdi] , ecx	
    44                                  
    45                                   ;OpADR: [2]  ; Var Ref assignement					
    46                                  
    47 0000053E 4831C0                  	xor rax , rax
    48 00000541 488D3C25[32030000]      	lea rdi , [u_global.x]	
    49 00000549 4889FE                  	mov rsi , rdi	
    50 0000054C 4801C6                  	add rsi , rax	
    51 0000054F 4831C0                  	xor rax , rax
    52 00000552 488D3C25[EE020000]      	lea rdi , [u_global.p]	
    53 0000055A 4801C7                  	add rdi , rax	
    54 0000055D 4889F0                  	mov  rax , rsi	
    55 00000560 8907                    	mov [rdi] , eax	
    56                                  
    57                                   ;OpADR: [3]  ; Var invocation					
    58                                  
    59 00000562 4831C0                  	xor rax , rax
    60 00000565 488D3C25[EE020000]      	lea rdi , [u_global.p]	
    61 0000056D 4801C7                  	add rdi , rax	
    62 00000570 8B07                    	mov eax , [rdi]	
    63 00000572 8B00                    	mov eax , [rax]	
    64                                  	vV_push eax	
    64                              <1> 
    64 00000574 418907              <1>  mov DWORD[vV_sp] , %1
    64 00000577 4983C704            <1>  add vV_sp , 4
    64                              <1> 
    65                                  
    66                                   ;OpADR: [4]  ; OUT opcode (0)			
    67                                  
    68 0000057B E878FCFFFF              	call vV_io_out_default			
    69                                  						
    70                                  
    71                                   ;OpADR: [5]  ; PUSH opcode 
    72                                  
    73                                  	vV_push 2 
    73                              <1> 
    73 00000580 41C70702000000      <1>  mov DWORD[vV_sp] , %1
    73 00000587 4983C704            <1>  add vV_sp , 4
    73                              <1> 
    74                                  
    75                                  
    76                                   ;OpADR: [6]  ; PUSH opcode 
    77                                  
    78                                  	vV_push 0 
    78                              <1> 
    78 0000058B 41C70700000000      <1>  mov DWORD[vV_sp] , %1
    78 00000592 4983C704            <1>  add vV_sp , 4
    78                              <1> 
    79                                  
    80                                  
    81                                   ;OpADR: [7]  ; Var assignement					
    82                                  
    83 00000596 488D3C25[86020000]      	lea rdi , [u_global.a]	
    84 0000059E 4831C0                  	xor rax , rax	
    85                                  	vV_pop ecx	
    85                              <1> 
    85 000005A1 4983EF04            <1>  sub vV_sp , 4
    85 000005A5 418B0F              <1>  mov %1 , [vV_sp]
    85                              <1> 
    86 000005A8 83F904                  	cmp ecx , 4	
    87 000005AB 0F8DF1FAFFFF            	jge vV_bound_error	
    88 000005B1 01C8                    	add eax , ecx	
    89 000005B3 C1E002                  	shl eax , 2	
    90                                  	vV_pop ecx	
    90                              <1> 
    90 000005B6 4983EF04            <1>  sub vV_sp , 4
    90 000005BA 418B0F              <1>  mov %1 , [vV_sp]
    90                              <1> 
    91 000005BD 4801C7                  	add rdi , rax	
    92 000005C0 890F                    	mov [rdi] , ecx	
    93                                  
    94                                   ;OpADR: [8]  ; PUSH opcode 
    95                                  
    96                                  	vV_push 4 
    96                              <1> 
    96 000005C2 41C70704000000      <1>  mov DWORD[vV_sp] , %1
    96 000005C9 4983C704            <1>  add vV_sp , 4
    96                              <1> 
    97                                  
    98                                  
    99                                   ;OpADR: [9]  ; PUSH opcode 
   100                                  
   101                                  	vV_push 1 
   101                              <1> 
   101 000005CD 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   101 000005D4 4983C704            <1>  add vV_sp , 4
   101                              <1> 
   102                                  
   103                                  
   104                                   ;OpADR: [10]  ; Var assignement					
   105                                  
   106 000005D8 488D3C25[86020000]      	lea rdi , [u_global.a]	
   107 000005E0 4831C0                  	xor rax , rax	
   108                                  	vV_pop ecx	
   108                              <1> 
   108 000005E3 4983EF04            <1>  sub vV_sp , 4
   108 000005E7 418B0F              <1>  mov %1 , [vV_sp]
   108                              <1> 
   109 000005EA 83F904                  	cmp ecx , 4	
   110 000005ED 0F8DAFFAFFFF            	jge vV_bound_error	
   111 000005F3 01C8                    	add eax , ecx	
   112 000005F5 C1E002                  	shl eax , 2	
   113                                  	vV_pop ecx	
   113                              <1> 
   113 000005F8 4983EF04            <1>  sub vV_sp , 4
   113 000005FC 418B0F              <1>  mov %1 , [vV_sp]
   113                              <1> 
   114 000005FF 4801C7                  	add rdi , rax	
   115 00000602 890F                    	mov [rdi] , ecx	
   116                                  
   117                                   ;OpADR: [11]  ; PUSH opcode 
   118                                  
   119                                  	vV_push 8 
   119                              <1> 
   119 00000604 41C70708000000      <1>  mov DWORD[vV_sp] , %1
   119 0000060B 4983C704            <1>  add vV_sp , 4
   119                              <1> 
   120                                  
   121                                  
   122                                   ;OpADR: [12]  ; PUSH opcode 
   123                                  
   124                                  	vV_push 2 
   124                              <1> 
   124 0000060F 41C70702000000      <1>  mov DWORD[vV_sp] , %1
   124 00000616 4983C704            <1>  add vV_sp , 4
   124                              <1> 
   125                                  
   126                                  
   127                                   ;OpADR: [13]  ; Var assignement					
   128                                  
   129 0000061A 488D3C25[86020000]      	lea rdi , [u_global.a]	
   130 00000622 4831C0                  	xor rax , rax	
   131                                  	vV_pop ecx	
   131                              <1> 
   131 00000625 4983EF04            <1>  sub vV_sp , 4
   131 00000629 418B0F              <1>  mov %1 , [vV_sp]
   131                              <1> 
   132 0000062C 83F904                  	cmp ecx , 4	
   133 0000062F 0F8D6DFAFFFF            	jge vV_bound_error	
   134 00000635 01C8                    	add eax , ecx	
   135 00000637 C1E002                  	shl eax , 2	
   136                                  	vV_pop ecx	
   136                              <1> 
   136 0000063A 4983EF04            <1>  sub vV_sp , 4
   136 0000063E 418B0F              <1>  mov %1 , [vV_sp]
   136                              <1> 
   137 00000641 4801C7                  	add rdi , rax	
   138 00000644 890F                    	mov [rdi] , ecx	
   139                                  
   140                                   ;OpADR: [14]  ; PUSH opcode 
   141                                  
   142                                  	vV_push 16 
   142                              <1> 
   142 00000646 41C70710000000      <1>  mov DWORD[vV_sp] , %1
   142 0000064D 4983C704            <1>  add vV_sp , 4
   142                              <1> 
   143                                  
   144                                  
   145                                   ;OpADR: [15]  ; PUSH opcode 
   146                                  
   147                                  	vV_push 3 
   147                              <1> 
   147 00000651 41C70703000000      <1>  mov DWORD[vV_sp] , %1
   147 00000658 4983C704            <1>  add vV_sp , 4
   147                              <1> 
   148                                  
   149                                  
   150                                   ;OpADR: [16]  ; Var assignement					
   151                                  
   152 0000065C 488D3C25[86020000]      	lea rdi , [u_global.a]	
   153 00000664 4831C0                  	xor rax , rax	
   154                                  	vV_pop ecx	
   154                              <1> 
   154 00000667 4983EF04            <1>  sub vV_sp , 4
   154 0000066B 418B0F              <1>  mov %1 , [vV_sp]
   154                              <1> 
   155 0000066E 83F904                  	cmp ecx , 4	
   156 00000671 0F8D2BFAFFFF            	jge vV_bound_error	
   157 00000677 01C8                    	add eax , ecx	
   158 00000679 C1E002                  	shl eax , 2	
   159                                  	vV_pop ecx	
   159                              <1> 
   159 0000067C 4983EF04            <1>  sub vV_sp , 4
   159 00000680 418B0F              <1>  mov %1 , [vV_sp]
   159                              <1> 
   160 00000683 4801C7                  	add rdi , rax	
   161 00000686 890F                    	mov [rdi] , ecx	
   162                                  
   163                                   ;OpADR: [17]  ; Var Ref assignement					
   164                                  
   165 00000688 4831C0                  	xor rax , rax
   166 0000068B 488D3C25[32030000]      	lea rdi , [u_global.x]	
   167 00000693 4889FE                  	mov rsi , rdi	
   168 00000696 4801C6                  	add rsi , rax	
   169 00000699 488D3C25[96020000]      	lea rdi , [u_global.c]	
   170 000006A1 4831C0                  	xor rax , rax	
   171 000006A4 B900000000              	mov ecx , 0	
   172 000006A9 83F904                  	cmp ecx , 4	
   173 000006AC 0F8DF0F9FFFF            	jge vV_bound_error	
   174 000006B2 01C8                    	add eax , ecx	
   175 000006B4 C1E002                  	shl eax , 2	
   176 000006B7 4801C7                  	add rdi , rax	
   177 000006BA 4889F0                  	mov  rax , rsi	
   178 000006BD 8907                    	mov [rdi] , eax	
   179                                  
   180                                   ;OpADR: [18]  ; Var invocation					
   181                                  
   182 000006BF 488D3C25[96020000]      	lea rdi , [u_global.c]	
   183 000006C7 4831C0                  	xor rax , rax	
   184 000006CA B900000000              	mov ecx , 0	
   185 000006CF 83F904                  	cmp ecx , 4	
   186 000006D2 0F8DCAF9FFFF            	jge vV_bound_error	
   187 000006D8 01C8                    	add eax , ecx	
   188 000006DA C1E002                  	shl eax , 2	
   189 000006DD 4801C7                  	add rdi , rax	
   190 000006E0 8B07                    	mov eax , [rdi]	
   191 000006E2 8B00                    	mov eax , [rax]	
   192                                  	vV_push eax	
   192                              <1> 
   192 000006E4 418907              <1>  mov DWORD[vV_sp] , %1
   192 000006E7 4983C704            <1>  add vV_sp , 4
   192                              <1> 
   193                                  
   194                                   ;OpADR: [19]  ; OUT opcode (0)			
   195                                  
   196 000006EB E808FBFFFF              	call vV_io_out_default			
   197                                  						
   198                                  
   199                                   ;OpADR: [20]  ; Var Ref assignement					
   200                                  
   201 000006F0 4831C0                  	xor rax , rax
   202 000006F3 488D3C25[32030000]      	lea rdi , [u_global.x]	
   203 000006FB 4889FE                  	mov rsi , rdi	
   204 000006FE 4801C6                  	add rsi , rax	
   205 00000701 488D3C25[96020000]      	lea rdi , [u_global.c]	
   206 00000709 4831C0                  	xor rax , rax	
   207 0000070C B901000000              	mov ecx , 1	
   208 00000711 83F904                  	cmp ecx , 4	
   209 00000714 0F8D88F9FFFF            	jge vV_bound_error	
   210 0000071A 01C8                    	add eax , ecx	
   211 0000071C C1E002                  	shl eax , 2	
   212 0000071F 4801C7                  	add rdi , rax	
   213 00000722 4889F0                  	mov  rax , rsi	
   214 00000725 8907                    	mov [rdi] , eax	
   215                                  
   216                                   ;OpADR: [21]  ; PUSH opcode 
   217                                  
   218                                  	vV_push 666 
   218                              <1> 
   218 00000727 41C7079A020000      <1>  mov DWORD[vV_sp] , %1
   218 0000072E 4983C704            <1>  add vV_sp , 4
   218                              <1> 
   219                                  
   220                                  
   221                                   ;OpADR: [22]  ; Var assignement					
   222                                  
   223 00000732 4831C0                  	xor rax , rax
   224 00000735 488D3C25[32030000]      	lea rdi , [u_global.x]	
   225                                  	vV_pop ecx	
   225                              <1> 
   225 0000073D 4983EF04            <1>  sub vV_sp , 4
   225 00000741 418B0F              <1>  mov %1 , [vV_sp]
   225                              <1> 
   226 00000744 4801C7                  	add rdi , rax	
   227 00000747 890F                    	mov [rdi] , ecx	
   228                                  
   229                                   ;OpADR: [23]  ; Var invocation					
   230                                  
   231 00000749 488D3C25[96020000]      	lea rdi , [u_global.c]	
   232 00000751 4831C0                  	xor rax , rax	
   233 00000754 B900000000              	mov ecx , 0	
   234 00000759 83F904                  	cmp ecx , 4	
   235 0000075C 0F8D40F9FFFF            	jge vV_bound_error	
   236 00000762 01C8                    	add eax , ecx	
   237 00000764 C1E002                  	shl eax , 2	
   238 00000767 4801C7                  	add rdi , rax	
   239 0000076A 8B07                    	mov eax , [rdi]	
   240 0000076C 8B00                    	mov eax , [rax]	
   241                                  	vV_push eax	
   241                              <1> 
   241 0000076E 418907              <1>  mov DWORD[vV_sp] , %1
   241 00000771 4983C704            <1>  add vV_sp , 4
   241                              <1> 
   242                                  
   243                                   ;OpADR: [24]  ; OUT opcode (0)			
   244                                  
   245 00000775 E87EFAFFFF              	call vV_io_out_default			
   246                                  						
   247                                  
   248                                   ;OpADR: [25]  ; Var invocation					
   249                                  
   250 0000077A 488D3C25[96020000]      	lea rdi , [u_global.c]	
   251 00000782 4831C0                  	xor rax , rax	
   252 00000785 B901000000              	mov ecx , 1	
   253 0000078A 83F904                  	cmp ecx , 4	
   254 0000078D 0F8D0FF9FFFF            	jge vV_bound_error	
   255 00000793 01C8                    	add eax , ecx	
   256 00000795 C1E002                  	shl eax , 2	
   257 00000798 4801C7                  	add rdi , rax	
   258 0000079B 8B07                    	mov eax , [rdi]	
   259 0000079D 8B00                    	mov eax , [rax]	
   260                                  	vV_push eax	
   260                              <1> 
   260 0000079F 418907              <1>  mov DWORD[vV_sp] , %1
   260 000007A2 4983C704            <1>  add vV_sp , 4
   260                              <1> 
   261                                  
   262                                   ;OpADR: [26]  ; OUT opcode (0)			
   263                                  
   264 000007A6 E84DFAFFFF              	call vV_io_out_default			
   265                                  						
   266                                  
   267                                   ;OpADR: [27]  ; FLUSH opcode					
   268                                  
   269 000007AB E807FAFFFF              		call vV_io_flush	
   270                                  
   271                                   ;OpADR: [28]  ; FLUSH opcode					
   272                                  
   273 000007B0 E802FAFFFF              		call vV_io_flush	
   274                                  
   275                                   ;OpADR: [29]  ; Var Ref assignement					
   276                                  
   277 000007B5 4831C0                  	xor rax , rax
   278 000007B8 488D3C25[86020000]      	lea rdi , [u_global.a]	
   279 000007C0 4889FE                  	mov rsi , rdi	
   280 000007C3 4801C6                  	add rsi , rax	
   281 000007C6 4831C0                  	xor rax , rax
   282 000007C9 488D3C25[A6020000]      	lea rdi , [u_global.b]	
   283 000007D1 4801C7                  	add rdi , rax	
   284 000007D4 4889F0                  	mov  rax , rsi	
   285 000007D7 8907                    	mov [rdi] , eax	
   286                                  
   287                                   ;OpADR: [30]  ; Var invocation					
   288                                  
   289 000007D9 488D3C25[86020000]      	lea rdi , [u_global.a]	
   290 000007E1 4831C0                  	xor rax , rax	
   291 000007E4 B900000000              	mov ecx , 0	
   292 000007E9 83F904                  	cmp ecx , 4	
   293 000007EC 0F8DB0F8FFFF            	jge vV_bound_error	
   294 000007F2 01C8                    	add eax , ecx	
   295 000007F4 C1E002                  	shl eax , 2	
   296 000007F7 4801C7                  	add rdi , rax	
   297 000007FA 8B07                    	mov eax , [rdi]	
   298                                  	vV_push eax	
   298                              <1> 
   298 000007FC 418907              <1>  mov DWORD[vV_sp] , %1
   298 000007FF 4983C704            <1>  add vV_sp , 4
   298                              <1> 
   299                                  
   300                                   ;OpADR: [31]  ; OUT opcode (0)			
   301                                  
   302 00000803 E8F0F9FFFF              	call vV_io_out_default			
   303                                  						
   304                                  
   305                                   ;OpADR: [32]  ; Var invocation					
   306                                  
   307 00000808 488D3C25[86020000]      	lea rdi , [u_global.a]	
   308 00000810 4831C0                  	xor rax , rax	
   309 00000813 B903000000              	mov ecx , 3	
   310 00000818 83F904                  	cmp ecx , 4	
   311 0000081B 0F8D81F8FFFF            	jge vV_bound_error	
   312 00000821 01C8                    	add eax , ecx	
   313 00000823 C1E002                  	shl eax , 2	
   314 00000826 4801C7                  	add rdi , rax	
   315 00000829 8B07                    	mov eax , [rdi]	
   316                                  	vV_push eax	
   316                              <1> 
   316 0000082B 418907              <1>  mov DWORD[vV_sp] , %1
   316 0000082E 4983C704            <1>  add vV_sp , 4
   316                              <1> 
   317                                  
   318                                   ;OpADR: [33]  ; OUT opcode (0)			
   319                                  
   320 00000832 E8C1F9FFFF              	call vV_io_out_default			
   321                                  						
   322                                  
   323                                   ;OpADR: [34]  ; Var invocation					
   324                                  
   325 00000837 488D3C25[A6020000]      	lea rdi , [u_global.b]	
   326 0000083F 8B3F                    	mov edi , [rdi]	
   327 00000841 4831C0                  	xor rax , rax	
   328 00000844 B900000000              	mov ecx , 0	
   329 00000849 83F904                  	cmp ecx , 4	
   330 0000084C 0F8D50F8FFFF            	jge vV_bound_error	
   331 00000852 01C8                    	add eax , ecx	
   332 00000854 C1E002                  	shl eax , 2	
   333 00000857 4801C7                  	add rdi , rax	
   334 0000085A 8B07                    	mov eax , [rdi]	
   335                                  	vV_push eax	
   335                              <1> 
   335 0000085C 418907              <1>  mov DWORD[vV_sp] , %1
   335 0000085F 4983C704            <1>  add vV_sp , 4
   335                              <1> 
   336                                  
   337                                   ;OpADR: [35]  ; OUT opcode (0)			
   338                                  
   339 00000863 E890F9FFFF              	call vV_io_out_default			
   340                                  						
   341                                  
   342                                   ;OpADR: [36]  ; Var invocation					
   343                                  
   344 00000868 488D3C25[A6020000]      	lea rdi , [u_global.b]	
   345 00000870 8B3F                    	mov edi , [rdi]	
   346 00000872 4831C0                  	xor rax , rax	
   347 00000875 B903000000              	mov ecx , 3	
   348 0000087A 83F904                  	cmp ecx , 4	
   349 0000087D 0F8D1FF8FFFF            	jge vV_bound_error	
   350 00000883 01C8                    	add eax , ecx	
   351 00000885 C1E002                  	shl eax , 2	
   352 00000888 4801C7                  	add rdi , rax	
   353 0000088B 8B07                    	mov eax , [rdi]	
   354                                  	vV_push eax	
   354                              <1> 
   354 0000088D 418907              <1>  mov DWORD[vV_sp] , %1
   354 00000890 4983C704            <1>  add vV_sp , 4
   354                              <1> 
   355                                  
   356                                   ;OpADR: [37]  ; OUT opcode (0)			
   357                                  
   358 00000894 E85FF9FFFF              	call vV_io_out_default			
   359                                  						
   360                                  
   361                                   ;OpADR: [38]  ; FLUSH opcode					
   362                                  
   363 00000899 E819F9FFFF              		call vV_io_flush	
   364                                  
   365                                   ;OpADR: [39]  ; PUSH opcode 
   366                                  
   367                                  	vV_push 53 
   367                              <1> 
   367 0000089E 41C70735000000      <1>  mov DWORD[vV_sp] , %1
   367 000008A5 4983C704            <1>  add vV_sp , 4
   367                              <1> 
   368                                  
   369                                  
   370                                   ;OpADR: [40]  ; Var assignement					
   371                                  
   372 000008A9 488D3C25[86020000]      	lea rdi , [u_global.a]	
   373 000008B1 4831C0                  	xor rax , rax	
   374 000008B4 B900000000              	mov ecx , 0	
   375 000008B9 83F904                  	cmp ecx , 4	
   376 000008BC 0F8DE0F7FFFF            	jge vV_bound_error	
   377 000008C2 01C8                    	add eax , ecx	
   378 000008C4 C1E002                  	shl eax , 2	
   379                                  	vV_pop ecx	
   379                              <1> 
   379 000008C7 4983EF04            <1>  sub vV_sp , 4
   379 000008CB 418B0F              <1>  mov %1 , [vV_sp]
   379                              <1> 
   380 000008CE 4801C7                  	add rdi , rax	
   381 000008D1 890F                    	mov [rdi] , ecx	
   382                                  
   383                                   ;OpADR: [41]  ; Var invocation					
   384                                  
   385 000008D3 488D3C25[A6020000]      	lea rdi , [u_global.b]	
   386 000008DB 8B3F                    	mov edi , [rdi]	
   387 000008DD 4831C0                  	xor rax , rax	
   388 000008E0 B900000000              	mov ecx , 0	
   389 000008E5 83F904                  	cmp ecx , 4	
   390 000008E8 0F8DB4F7FFFF            	jge vV_bound_error	
   391 000008EE 01C8                    	add eax , ecx	
   392 000008F0 C1E002                  	shl eax , 2	
   393 000008F3 4801C7                  	add rdi , rax	
   394 000008F6 8B07                    	mov eax , [rdi]	
   395                                  	vV_push eax	
   395                              <1> 
   395 000008F8 418907              <1>  mov DWORD[vV_sp] , %1
   395 000008FB 4983C704            <1>  add vV_sp , 4
   395                              <1> 
   396                                  
   397                                   ;OpADR: [42]  ; OUT opcode (0)			
   398                                  
   399 000008FF E8F4F8FFFF              	call vV_io_out_default			
   400                                  						
   401                                  
   402                                   ;OpADR: [43]  ; PUSH opcode 
   403                                  
   404                                  	vV_push 776 
   404                              <1> 
   404 00000904 41C70708030000      <1>  mov DWORD[vV_sp] , %1
   404 0000090B 4983C704            <1>  add vV_sp , 4
   404                              <1> 
   405                                  
   406                                  
   407                                   ;OpADR: [44]  ; Var assignement					
   408                                  
   409 0000090F 488D3C25[A6020000]      	lea rdi , [u_global.b]	
   410 00000917 8B3F                    	mov edi , [rdi]	
   411 00000919 4831C0                  	xor rax , rax	
   412 0000091C B902000000              	mov ecx , 2	
   413 00000921 83F904                  	cmp ecx , 4	
   414 00000924 0F8D78F7FFFF            	jge vV_bound_error	
   415 0000092A 01C8                    	add eax , ecx	
   416 0000092C C1E002                  	shl eax , 2	
   417                                  	vV_pop ecx	
   417                              <1> 
   417 0000092F 4983EF04            <1>  sub vV_sp , 4
   417 00000933 418B0F              <1>  mov %1 , [vV_sp]
   417                              <1> 
   418 00000936 4801C7                  	add rdi , rax	
   419 00000939 890F                    	mov [rdi] , ecx	
   420                                  
   421                                   ;OpADR: [45]  ; Var invocation					
   422                                  
   423 0000093B 488D3C25[86020000]      	lea rdi , [u_global.a]	
   424 00000943 4831C0                  	xor rax , rax	
   425 00000946 B902000000              	mov ecx , 2	
   426 0000094B 83F904                  	cmp ecx , 4	
   427 0000094E 0F8D4EF7FFFF            	jge vV_bound_error	
   428 00000954 01C8                    	add eax , ecx	
   429 00000956 C1E002                  	shl eax , 2	
   430 00000959 4801C7                  	add rdi , rax	
   431 0000095C 8B07                    	mov eax , [rdi]	
   432                                  	vV_push eax	
   432                              <1> 
   432 0000095E 418907              <1>  mov DWORD[vV_sp] , %1
   432 00000961 4983C704            <1>  add vV_sp , 4
   432                              <1> 
   433                                  
   434                                   ;OpADR: [46]  ; OUT opcode (0)			
   435                                  
   436 00000965 E88EF8FFFF              	call vV_io_out_default			
   437                                  						
   438                                  
   439                                   ;OpADR: [47]  ; FLUSH opcode					
   440                                  
   441 0000096A E848F8FFFF              		call vV_io_flush	
   442                                  
   443                                   ;OpADR: [48]  ; PUSH opcode 
   444                                  
   445                                  	vV_push 88 
   445                              <1> 
   445 0000096F 41C70758000000      <1>  mov DWORD[vV_sp] , %1
   445 00000976 4983C704            <1>  add vV_sp , 4
   445                              <1> 
   446                                  
   447                                  
   448                                   ;OpADR: [49]  ; Var assignement					
   449                                  
   450 0000097A 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   451 00000982 4831C0                  	xor rax , rax	
   452 00000985 B902000000              	mov ecx , 2	
   453 0000098A 83F904                  	cmp ecx , 4	
   454 0000098D 0F8D0FF7FFFF            	jge vV_bound_error	
   455 00000993 01C8                    	add eax , ecx	
   456 00000995 C1E002                  	shl eax , 2	
   457                                  	vV_pop ecx	
   457                              <1> 
   457 00000998 4983EF04            <1>  sub vV_sp , 4
   457 0000099C 418B0F              <1>  mov %1 , [vV_sp]
   457                              <1> 
   458 0000099F 4801C7                  	add rdi , rax	
   459 000009A2 890F                    	mov [rdi] , ecx	
   460                                  
   461                                   ;OpADR: [50]  ; PUSH opcode 
   462                                  
   463                                  	vV_push 99 
   463                              <1> 
   463 000009A4 41C70763000000      <1>  mov DWORD[vV_sp] , %1
   463 000009AB 4983C704            <1>  add vV_sp , 4
   463                              <1> 
   464                                  
   465                                  
   466                                   ;OpADR: [51]  ; Var assignement					
   467                                  
   468 000009AF 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   469 000009B7 4831C0                  	xor rax , rax	
   470 000009BA B903000000              	mov ecx , 3	
   471 000009BF 83F904                  	cmp ecx , 4	
   472 000009C2 0F8DDAF6FFFF            	jge vV_bound_error	
   473 000009C8 01C8                    	add eax , ecx	
   474 000009CA C1E002                  	shl eax , 2	
   475                                  	vV_pop ecx	
   475                              <1> 
   475 000009CD 4983EF04            <1>  sub vV_sp , 4
   475 000009D1 418B0F              <1>  mov %1 , [vV_sp]
   475                              <1> 
   476 000009D4 4801C7                  	add rdi , rax	
   477 000009D7 890F                    	mov [rdi] , ecx	
   478                                  
   479                                   ;OpADR: [52]  ; PUSH opcode 
   480                                  
   481                                  	vV_push 66 
   481                              <1> 
   481 000009D9 41C70742000000      <1>  mov DWORD[vV_sp] , %1
   481 000009E0 4983C704            <1>  add vV_sp , 4
   481                              <1> 
   482                                  
   483                                  
   484                                   ;OpADR: [53]  ; Var assignement					
   485                                  
   486 000009E4 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   487 000009EC 4831C0                  	xor rax , rax	
   488 000009EF B900000000              	mov ecx , 0	
   489 000009F4 83F904                  	cmp ecx , 4	
   490 000009F7 0F8DA5F6FFFF            	jge vV_bound_error	
   491 000009FD 01C8                    	add eax , ecx	
   492 000009FF C1E002                  	shl eax , 2	
   493                                  	vV_pop ecx	
   493                              <1> 
   493 00000A02 4983EF04            <1>  sub vV_sp , 4
   493 00000A06 418B0F              <1>  mov %1 , [vV_sp]
   493                              <1> 
   494 00000A09 4801C7                  	add rdi , rax	
   495 00000A0C 890F                    	mov [rdi] , ecx	
   496                                  
   497                                   ;OpADR: [54]  ; PUSH opcode 
   498                                  
   499                                  	vV_push 77 
   499                              <1> 
   499 00000A0E 41C7074D000000      <1>  mov DWORD[vV_sp] , %1
   499 00000A15 4983C704            <1>  add vV_sp , 4
   499                              <1> 
   500                                  
   501                                  
   502                                   ;OpADR: [55]  ; Var assignement					
   503                                  
   504 00000A19 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   505 00000A21 4831C0                  	xor rax , rax	
   506 00000A24 B901000000              	mov ecx , 1	
   507 00000A29 83F904                  	cmp ecx , 4	
   508 00000A2C 0F8D70F6FFFF            	jge vV_bound_error	
   509 00000A32 01C8                    	add eax , ecx	
   510 00000A34 C1E002                  	shl eax , 2	
   511                                  	vV_pop ecx	
   511                              <1> 
   511 00000A37 4983EF04            <1>  sub vV_sp , 4
   511 00000A3B 418B0F              <1>  mov %1 , [vV_sp]
   511                              <1> 
   512 00000A3E 4801C7                  	add rdi , rax	
   513 00000A41 890F                    	mov [rdi] , ecx	
   514                                  
   515                                   ;OpADR: [56]  ; Var Ref assignement					
   516                                  
   517 00000A43 4831C0                  	xor rax , rax
   518 00000A46 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   519 00000A4E 4889FE                  	mov rsi , rdi	
   520 00000A51 4801C6                  	add rsi , rax	
   521 00000A54 4831C0                  	xor rax , rax
   522 00000A57 488D3C25[02030000]      	lea rdi , [u_global.l2]	
   523 00000A5F 4801C7                  	add rdi , rax	
   524 00000A62 B910000000              	mov ecx , 16	
   525 00000A67 F3A4                    	rep movsb	
   526                                  
   527                                   ;OpADR: [57]  ; PUSH opcode 
   528                                  
   529                                  	vV_push 22222 
   529                              <1> 
   529 00000A69 41C707CE560000      <1>  mov DWORD[vV_sp] , %1
   529 00000A70 4983C704            <1>  add vV_sp , 4
   529                              <1> 
   530                                  
   531                                  
   532                                   ;OpADR: [58]  ; Var assignement					
   533                                  
   534 00000A74 488D3C25[02030000]      	lea rdi , [u_global.l2]	
   535 00000A7C 4831C0                  	xor rax , rax	
   536 00000A7F B901000000              	mov ecx , 1	
   537 00000A84 83F904                  	cmp ecx , 4	
   538 00000A87 0F8D15F6FFFF            	jge vV_bound_error	
   539 00000A8D 01C8                    	add eax , ecx	
   540 00000A8F C1E002                  	shl eax , 2	
   541                                  	vV_pop ecx	
   541                              <1> 
   541 00000A92 4983EF04            <1>  sub vV_sp , 4
   541 00000A96 418B0F              <1>  mov %1 , [vV_sp]
   541                              <1> 
   542 00000A99 4801C7                  	add rdi , rax	
   543 00000A9C 890F                    	mov [rdi] , ecx	
   544                                  
   545                                   ;OpADR: [59]  ; PUSH opcode 
   546                                  
   547                                  	vV_push 22222 
   547                              <1> 
   547 00000A9E 41C707CE560000      <1>  mov DWORD[vV_sp] , %1
   547 00000AA5 4983C704            <1>  add vV_sp , 4
   547                              <1> 
   548                                  
   549                                  
   550                                   ;OpADR: [60]  ; Var assignement					
   551                                  
   552 00000AA9 488D3C25[02030000]      	lea rdi , [u_global.l2]	
   553 00000AB1 4831C0                  	xor rax , rax	
   554 00000AB4 B902000000              	mov ecx , 2	
   555 00000AB9 83F904                  	cmp ecx , 4	
   556 00000ABC 0F8DE0F5FFFF            	jge vV_bound_error	
   557 00000AC2 01C8                    	add eax , ecx	
   558 00000AC4 C1E002                  	shl eax , 2	
   559                                  	vV_pop ecx	
   559                              <1> 
   559 00000AC7 4983EF04            <1>  sub vV_sp , 4
   559 00000ACB 418B0F              <1>  mov %1 , [vV_sp]
   559                              <1> 
   560 00000ACE 4801C7                  	add rdi , rax	
   561 00000AD1 890F                    	mov [rdi] , ecx	
   562                                  
   563                                   ;OpADR: [61]  ; PUSH opcode 
   564                                  
   565                                  	vV_push 0 
   565                              <1> 
   565 00000AD3 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   565 00000ADA 4983C704            <1>  add vV_sp , 4
   565                              <1> 
   566                                  
   567                                  
   568                                   ;OpADR: [62]  ; Var invocation					
   569                                  
   570 00000ADE 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   571 00000AE6 4831C0                  	xor rax , rax	
   572                                  	vV_pop ecx	
   572                              <1> 
   572 00000AE9 4983EF04            <1>  sub vV_sp , 4
   572 00000AED 418B0F              <1>  mov %1 , [vV_sp]
   572                              <1> 
   573 00000AF0 83F904                  	cmp ecx , 4	
   574 00000AF3 0F8DA9F5FFFF            	jge vV_bound_error	
   575 00000AF9 01C8                    	add eax , ecx	
   576 00000AFB C1E002                  	shl eax , 2	
   577 00000AFE 4801C7                  	add rdi , rax	
   578 00000B01 8B07                    	mov eax , [rdi]	
   579                                  	vV_push eax	
   579                              <1> 
   579 00000B03 418907              <1>  mov DWORD[vV_sp] , %1
   579 00000B06 4983C704            <1>  add vV_sp , 4
   579                              <1> 
   580                                  
   581                                   ;OpADR: [63]  ; OUT opcode (0)			
   582                                  
   583 00000B0A E8E9F6FFFF              	call vV_io_out_default			
   584                                  						
   585                                  
   586                                   ;OpADR: [64]  ; PUSH opcode 
   587                                  
   588                                  	vV_push 1 
   588                              <1> 
   588 00000B0F 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   588 00000B16 4983C704            <1>  add vV_sp , 4
   588                              <1> 
   589                                  
   590                                  
   591                                   ;OpADR: [65]  ; Var invocation					
   592                                  
   593 00000B1A 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   594 00000B22 4831C0                  	xor rax , rax	
   595                                  	vV_pop ecx	
   595                              <1> 
   595 00000B25 4983EF04            <1>  sub vV_sp , 4
   595 00000B29 418B0F              <1>  mov %1 , [vV_sp]
   595                              <1> 
   596 00000B2C 83F904                  	cmp ecx , 4	
   597 00000B2F 0F8D6DF5FFFF            	jge vV_bound_error	
   598 00000B35 01C8                    	add eax , ecx	
   599 00000B37 C1E002                  	shl eax , 2	
   600 00000B3A 4801C7                  	add rdi , rax	
   601 00000B3D 8B07                    	mov eax , [rdi]	
   602                                  	vV_push eax	
   602                              <1> 
   602 00000B3F 418907              <1>  mov DWORD[vV_sp] , %1
   602 00000B42 4983C704            <1>  add vV_sp , 4
   602                              <1> 
   603                                  
   604                                   ;OpADR: [66]  ; OUT opcode (0)			
   605                                  
   606 00000B46 E8ADF6FFFF              	call vV_io_out_default			
   607                                  						
   608                                  
   609                                   ;OpADR: [67]  ; PUSH opcode 
   610                                  
   611                                  	vV_push 2 
   611                              <1> 
   611 00000B4B 41C70702000000      <1>  mov DWORD[vV_sp] , %1
   611 00000B52 4983C704            <1>  add vV_sp , 4
   611                              <1> 
   612                                  
   613                                  
   614                                   ;OpADR: [68]  ; Var invocation					
   615                                  
   616 00000B56 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   617 00000B5E 4831C0                  	xor rax , rax	
   618                                  	vV_pop ecx	
   618                              <1> 
   618 00000B61 4983EF04            <1>  sub vV_sp , 4
   618 00000B65 418B0F              <1>  mov %1 , [vV_sp]
   618                              <1> 
   619 00000B68 83F904                  	cmp ecx , 4	
   620 00000B6B 0F8D31F5FFFF            	jge vV_bound_error	
   621 00000B71 01C8                    	add eax , ecx	
   622 00000B73 C1E002                  	shl eax , 2	
   623 00000B76 4801C7                  	add rdi , rax	
   624 00000B79 8B07                    	mov eax , [rdi]	
   625                                  	vV_push eax	
   625                              <1> 
   625 00000B7B 418907              <1>  mov DWORD[vV_sp] , %1
   625 00000B7E 4983C704            <1>  add vV_sp , 4
   625                              <1> 
   626                                  
   627                                   ;OpADR: [69]  ; OUT opcode (0)			
   628                                  
   629 00000B82 E871F6FFFF              	call vV_io_out_default			
   630                                  						
   631                                  
   632                                   ;OpADR: [70]  ; PUSH opcode 
   633                                  
   634                                  	vV_push 3 
   634                              <1> 
   634 00000B87 41C70703000000      <1>  mov DWORD[vV_sp] , %1
   634 00000B8E 4983C704            <1>  add vV_sp , 4
   634                              <1> 
   635                                  
   636                                  
   637                                   ;OpADR: [71]  ; Var invocation					
   638                                  
   639 00000B92 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   640 00000B9A 4831C0                  	xor rax , rax	
   641                                  	vV_pop ecx	
   641                              <1> 
   641 00000B9D 4983EF04            <1>  sub vV_sp , 4
   641 00000BA1 418B0F              <1>  mov %1 , [vV_sp]
   641                              <1> 
   642 00000BA4 83F904                  	cmp ecx , 4	
   643 00000BA7 0F8DF5F4FFFF            	jge vV_bound_error	
   644 00000BAD 01C8                    	add eax , ecx	
   645 00000BAF C1E002                  	shl eax , 2	
   646 00000BB2 4801C7                  	add rdi , rax	
   647 00000BB5 8B07                    	mov eax , [rdi]	
   648                                  	vV_push eax	
   648                              <1> 
   648 00000BB7 418907              <1>  mov DWORD[vV_sp] , %1
   648 00000BBA 4983C704            <1>  add vV_sp , 4
   648                              <1> 
   649                                  
   650                                   ;OpADR: [72]  ; OUT opcode (0)			
   651                                  
   652 00000BBE E835F6FFFF              	call vV_io_out_default			
   653                                  						
   654                                  
   655                                   ;OpADR: [73]  ; FLUSH opcode					
   656                                  
   657 00000BC3 E8EFF5FFFF              		call vV_io_flush	
   658                                  
   659                                   ;OpADR: [74]  ; PUSH opcode 
   660                                  
   661                                  	vV_push 0 
   661                              <1> 
   661 00000BC8 41C70700000000      <1>  mov DWORD[vV_sp] , %1
   661 00000BCF 4983C704            <1>  add vV_sp , 4
   661                              <1> 
   662                                  
   663                                  
   664                                   ;OpADR: [75]  ; Var invocation					
   665                                  
   666 00000BD3 488D3C25[02030000]      	lea rdi , [u_global.l2]	
   667 00000BDB 4831C0                  	xor rax , rax	
   668                                  	vV_pop ecx	
   668                              <1> 
   668 00000BDE 4983EF04            <1>  sub vV_sp , 4
   668 00000BE2 418B0F              <1>  mov %1 , [vV_sp]
   668                              <1> 
   669 00000BE5 83F904                  	cmp ecx , 4	
   670 00000BE8 0F8DB4F4FFFF            	jge vV_bound_error	
   671 00000BEE 01C8                    	add eax , ecx	
   672 00000BF0 C1E002                  	shl eax , 2	
   673 00000BF3 4801C7                  	add rdi , rax	
   674 00000BF6 8B07                    	mov eax , [rdi]	
   675                                  	vV_push eax	
   675                              <1> 
   675 00000BF8 418907              <1>  mov DWORD[vV_sp] , %1
   675 00000BFB 4983C704            <1>  add vV_sp , 4
   675                              <1> 
   676                                  
   677                                   ;OpADR: [76]  ; OUT opcode (0)			
   678                                  
   679 00000BFF E8F4F5FFFF              	call vV_io_out_default			
   680                                  						
   681                                  
   682                                   ;OpADR: [77]  ; PUSH opcode 
   683                                  
   684                                  	vV_push 1 
   684                              <1> 
   684 00000C04 41C70701000000      <1>  mov DWORD[vV_sp] , %1
   684 00000C0B 4983C704            <1>  add vV_sp , 4
   684                              <1> 
   685                                  
   686                                  
   687                                   ;OpADR: [78]  ; Var invocation					
   688                                  
   689 00000C0F 488D3C25[02030000]      	lea rdi , [u_global.l2]	
   690 00000C17 4831C0                  	xor rax , rax	
   691                                  	vV_pop ecx	
   691                              <1> 
   691 00000C1A 4983EF04            <1>  sub vV_sp , 4
   691 00000C1E 418B0F              <1>  mov %1 , [vV_sp]
   691                              <1> 
   692 00000C21 83F904                  	cmp ecx , 4	
   693 00000C24 0F8D78F4FFFF            	jge vV_bound_error	
   694 00000C2A 01C8                    	add eax , ecx	
   695 00000C2C C1E002                  	shl eax , 2	
   696 00000C2F 4801C7                  	add rdi , rax	
   697 00000C32 8B07                    	mov eax , [rdi]	
   698                                  	vV_push eax	
   698                              <1> 
   698 00000C34 418907              <1>  mov DWORD[vV_sp] , %1
   698 00000C37 4983C704            <1>  add vV_sp , 4
   698                              <1> 
   699                                  
   700                                   ;OpADR: [79]  ; OUT opcode (0)			
   701                                  
   702 00000C3B E8B8F5FFFF              	call vV_io_out_default			
   703                                  						
   704                                  
   705                                   ;OpADR: [80]  ; PUSH opcode 
   706                                  
   707                                  	vV_push 2 
   707                              <1> 
   707 00000C40 41C70702000000      <1>  mov DWORD[vV_sp] , %1
   707 00000C47 4983C704            <1>  add vV_sp , 4
   707                              <1> 
   708                                  
   709                                  
   710                                   ;OpADR: [81]  ; Var invocation					
   711                                  
   712 00000C4B 488D3C25[02030000]      	lea rdi , [u_global.l2]	
   713 00000C53 4831C0                  	xor rax , rax	
   714                                  	vV_pop ecx	
   714                              <1> 
   714 00000C56 4983EF04            <1>  sub vV_sp , 4
   714 00000C5A 418B0F              <1>  mov %1 , [vV_sp]
   714                              <1> 
   715 00000C5D 83F904                  	cmp ecx , 4	
   716 00000C60 0F8D3CF4FFFF            	jge vV_bound_error	
   717 00000C66 01C8                    	add eax , ecx	
   718 00000C68 C1E002                  	shl eax , 2	
   719 00000C6B 4801C7                  	add rdi , rax	
   720 00000C6E 8B07                    	mov eax , [rdi]	
   721                                  	vV_push eax	
   721                              <1> 
   721 00000C70 418907              <1>  mov DWORD[vV_sp] , %1
   721 00000C73 4983C704            <1>  add vV_sp , 4
   721                              <1> 
   722                                  
   723                                   ;OpADR: [82]  ; OUT opcode (0)			
   724                                  
   725 00000C77 E87CF5FFFF              	call vV_io_out_default			
   726                                  						
   727                                  
   728                                   ;OpADR: [83]  ; PUSH opcode 
   729                                  
   730                                  	vV_push 3 
   730                              <1> 
   730 00000C7C 41C70703000000      <1>  mov DWORD[vV_sp] , %1
   730 00000C83 4983C704            <1>  add vV_sp , 4
   730                              <1> 
   731                                  
   732                                  
   733                                   ;OpADR: [84]  ; Var invocation					
   734                                  
   735 00000C87 488D3C25[02030000]      	lea rdi , [u_global.l2]	
   736 00000C8F 4831C0                  	xor rax , rax	
   737                                  	vV_pop ecx	
   737                              <1> 
   737 00000C92 4983EF04            <1>  sub vV_sp , 4
   737 00000C96 418B0F              <1>  mov %1 , [vV_sp]
   737                              <1> 
   738 00000C99 83F904                  	cmp ecx , 4	
   739 00000C9C 0F8D00F4FFFF            	jge vV_bound_error	
   740 00000CA2 01C8                    	add eax , ecx	
   741 00000CA4 C1E002                  	shl eax , 2	
   742 00000CA7 4801C7                  	add rdi , rax	
   743 00000CAA 8B07                    	mov eax , [rdi]	
   744                                  	vV_push eax	
   744                              <1> 
   744 00000CAC 418907              <1>  mov DWORD[vV_sp] , %1
   744 00000CAF 4983C704            <1>  add vV_sp , 4
   744                              <1> 
   745                                  
   746                                   ;OpADR: [85]  ; OUT opcode (0)			
   747                                  
   748 00000CB3 E840F5FFFF              	call vV_io_out_default			
   749                                  						
   750                                  
   751                                   ;OpADR: [86]  ; FLUSH opcode					
   752                                  
   753 00000CB8 E8FAF4FFFF              		call vV_io_flush	
   754                                  
   755                                   ;OpADR: [87]  ; Var Ref assignement					
   756                                  
   757 00000CBD 4831C0                  	xor rax , rax
   758 00000CC0 488D3C25[22030000]      	lea rdi , [u_global.l1]	
   759 00000CC8 4889FE                  	mov rsi , rdi	
   760 00000CCB 4801C6                  	add rsi , rax	
   761 00000CCE 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   762 00000CD6 4831C0                  	xor rax , rax	
   763 00000CD9 B900000000              	mov ecx , 0	
   764 00000CDE 83F904                  	cmp ecx , 4	
   765 00000CE1 0F8DBBF3FFFF            	jge vV_bound_error	
   766 00000CE7 01C8                    	add eax , ecx	
   767 00000CE9 C1E002                  	shl eax , 2	
   768 00000CEC C1E002                  	shl eax , 2	
   769 00000CEF 4801C7                  	add rdi , rax	
   770 00000CF2 B910000000              	mov ecx , 16	
   771 00000CF7 F3A4                    	rep movsb	
   772                                  
   773                                   ;OpADR: [88]  ; Var Ref assignement					
   774                                  
   775 00000CF9 4831C0                  	xor rax , rax
   776 00000CFC 488D3C25[02030000]      	lea rdi , [u_global.l2]	
   777 00000D04 4889FE                  	mov rsi , rdi	
   778 00000D07 4801C6                  	add rsi , rax	
   779 00000D0A 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   780 00000D12 4831C0                  	xor rax , rax	
   781 00000D15 B901000000              	mov ecx , 1	
   782 00000D1A 83F904                  	cmp ecx , 4	
   783 00000D1D 0F8D7FF3FFFF            	jge vV_bound_error	
   784 00000D23 01C8                    	add eax , ecx	
   785 00000D25 C1E002                  	shl eax , 2	
   786 00000D28 C1E002                  	shl eax , 2	
   787 00000D2B 4801C7                  	add rdi , rax	
   788 00000D2E B910000000              	mov ecx , 16	
   789 00000D33 F3A4                    	rep movsb	
   790                                  
   791                                   ;OpADR: [89]  ; FLUSH opcode					
   792                                  
   793 00000D35 E87DF4FFFF              		call vV_io_flush	
   794                                  
   795                                   ;OpADR: [90]  ; Var Ref assignement					
   796                                  
   797 00000D3A 4831C0                  	xor rax , rax
   798 00000D3D 488D3C25[32030000]      	lea rdi , [u_global.x]	
   799 00000D45 4889FE                  	mov rsi , rdi	
   800 00000D48 4801C6                  	add rsi , rax	
   801 00000D4B 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   802 00000D53 4831C0                  	xor rax , rax	
   803 00000D56 B900000000              	mov ecx , 0	
   804 00000D5B 83F904                  	cmp ecx , 4	
   805 00000D5E 0F8D3EF3FFFF            	jge vV_bound_error	
   806 00000D64 01C8                    	add eax , ecx	
   807 00000D66 C1E002                  	shl eax , 2	
   808 00000D69 B900000000              	mov ecx , 0	
   809 00000D6E 83F904                  	cmp ecx , 4	
   810 00000D71 0F8D2BF3FFFF            	jge vV_bound_error	
   811 00000D77 01C8                    	add eax , ecx	
   812 00000D79 C1E002                  	shl eax , 2	
   813 00000D7C 4801C7                  	add rdi , rax	
   814 00000D7F 8B06                    	mov eax , [rsi]	
   815 00000D81 8907                    	mov DWORD[rdi] , eax	
   816                                  
   817                                   ;OpADR: [91]  ; Var invocation					
   818                                  
   819 00000D83 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   820 00000D8B 4831C0                  	xor rax , rax	
   821 00000D8E B900000000              	mov ecx , 0	
   822 00000D93 83F904                  	cmp ecx , 4	
   823 00000D96 0F8D06F3FFFF            	jge vV_bound_error	
   824 00000D9C 01C8                    	add eax , ecx	
   825 00000D9E C1E002                  	shl eax , 2	
   826 00000DA1 B900000000              	mov ecx , 0	
   827 00000DA6 83F904                  	cmp ecx , 4	
   828 00000DA9 0F8DF3F2FFFF            	jge vV_bound_error	
   829 00000DAF 01C8                    	add eax , ecx	
   830 00000DB1 C1E002                  	shl eax , 2	
   831 00000DB4 4801C7                  	add rdi , rax	
   832 00000DB7 8B07                    	mov eax , [rdi]	
   833                                  	vV_push eax	
   833                              <1> 
   833 00000DB9 418907              <1>  mov DWORD[vV_sp] , %1
   833 00000DBC 4983C704            <1>  add vV_sp , 4
   833                              <1> 
   834                                  
   835                                   ;OpADR: [92]  ; OUT opcode (0)			
   836                                  
   837 00000DC0 E833F4FFFF              	call vV_io_out_default			
   838                                  						
   839                                  
   840                                   ;OpADR: [93]  ; Var invocation					
   841                                  
   842 00000DC5 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   843 00000DCD 4831C0                  	xor rax , rax	
   844 00000DD0 B900000000              	mov ecx , 0	
   845 00000DD5 83F904                  	cmp ecx , 4	
   846 00000DD8 0F8DC4F2FFFF            	jge vV_bound_error	
   847 00000DDE 01C8                    	add eax , ecx	
   848 00000DE0 C1E002                  	shl eax , 2	
   849 00000DE3 B901000000              	mov ecx , 1	
   850 00000DE8 83F904                  	cmp ecx , 4	
   851 00000DEB 0F8DB1F2FFFF            	jge vV_bound_error	
   852 00000DF1 01C8                    	add eax , ecx	
   853 00000DF3 C1E002                  	shl eax , 2	
   854 00000DF6 4801C7                  	add rdi , rax	
   855 00000DF9 8B07                    	mov eax , [rdi]	
   856                                  	vV_push eax	
   856                              <1> 
   856 00000DFB 418907              <1>  mov DWORD[vV_sp] , %1
   856 00000DFE 4983C704            <1>  add vV_sp , 4
   856                              <1> 
   857                                  
   858                                   ;OpADR: [94]  ; OUT opcode (0)			
   859                                  
   860 00000E02 E8F1F3FFFF              	call vV_io_out_default			
   861                                  						
   862                                  
   863                                   ;OpADR: [95]  ; Var invocation					
   864                                  
   865 00000E07 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   866 00000E0F 4831C0                  	xor rax , rax	
   867 00000E12 B900000000              	mov ecx , 0	
   868 00000E17 83F904                  	cmp ecx , 4	
   869 00000E1A 0F8D82F2FFFF            	jge vV_bound_error	
   870 00000E20 01C8                    	add eax , ecx	
   871 00000E22 C1E002                  	shl eax , 2	
   872 00000E25 B902000000              	mov ecx , 2	
   873 00000E2A 83F904                  	cmp ecx , 4	
   874 00000E2D 0F8D6FF2FFFF            	jge vV_bound_error	
   875 00000E33 01C8                    	add eax , ecx	
   876 00000E35 C1E002                  	shl eax , 2	
   877 00000E38 4801C7                  	add rdi , rax	
   878 00000E3B 8B07                    	mov eax , [rdi]	
   879                                  	vV_push eax	
   879                              <1> 
   879 00000E3D 418907              <1>  mov DWORD[vV_sp] , %1
   879 00000E40 4983C704            <1>  add vV_sp , 4
   879                              <1> 
   880                                  
   881                                   ;OpADR: [96]  ; OUT opcode (0)			
   882                                  
   883 00000E44 E8AFF3FFFF              	call vV_io_out_default			
   884                                  						
   885                                  
   886                                   ;OpADR: [97]  ; Var invocation					
   887                                  
   888 00000E49 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   889 00000E51 4831C0                  	xor rax , rax	
   890 00000E54 B900000000              	mov ecx , 0	
   891 00000E59 83F904                  	cmp ecx , 4	
   892 00000E5C 0F8D40F2FFFF            	jge vV_bound_error	
   893 00000E62 01C8                    	add eax , ecx	
   894 00000E64 C1E002                  	shl eax , 2	
   895 00000E67 B903000000              	mov ecx , 3	
   896 00000E6C 83F904                  	cmp ecx , 4	
   897 00000E6F 0F8D2DF2FFFF            	jge vV_bound_error	
   898 00000E75 01C8                    	add eax , ecx	
   899 00000E77 C1E002                  	shl eax , 2	
   900 00000E7A 4801C7                  	add rdi , rax	
   901 00000E7D 8B07                    	mov eax , [rdi]	
   902                                  	vV_push eax	
   902                              <1> 
   902 00000E7F 418907              <1>  mov DWORD[vV_sp] , %1
   902 00000E82 4983C704            <1>  add vV_sp , 4
   902                              <1> 
   903                                  
   904                                   ;OpADR: [98]  ; OUT opcode (0)			
   905                                  
   906 00000E86 E86DF3FFFF              	call vV_io_out_default			
   907                                  						
   908                                  
   909                                   ;OpADR: [99]  ; Var invocation					
   910                                  
   911 00000E8B 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   912 00000E93 4831C0                  	xor rax , rax	
   913 00000E96 B901000000              	mov ecx , 1	
   914 00000E9B 83F904                  	cmp ecx , 4	
   915 00000E9E 0F8DFEF1FFFF            	jge vV_bound_error	
   916 00000EA4 01C8                    	add eax , ecx	
   917 00000EA6 C1E002                  	shl eax , 2	
   918 00000EA9 B900000000              	mov ecx , 0	
   919 00000EAE 83F904                  	cmp ecx , 4	
   920 00000EB1 0F8DEBF1FFFF            	jge vV_bound_error	
   921 00000EB7 01C8                    	add eax , ecx	
   922 00000EB9 C1E002                  	shl eax , 2	
   923 00000EBC 4801C7                  	add rdi , rax	
   924 00000EBF 8B07                    	mov eax , [rdi]	
   925                                  	vV_push eax	
   925                              <1> 
   925 00000EC1 418907              <1>  mov DWORD[vV_sp] , %1
   925 00000EC4 4983C704            <1>  add vV_sp , 4
   925                              <1> 
   926                                  
   927                                   ;OpADR: [100]  ; OUT opcode (0)			
   928                                  
   929 00000EC8 E82BF3FFFF              	call vV_io_out_default			
   930                                  						
   931                                  
   932                                   ;OpADR: [101]  ; Var invocation					
   933                                  
   934 00000ECD 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   935 00000ED5 4831C0                  	xor rax , rax	
   936 00000ED8 B901000000              	mov ecx , 1	
   937 00000EDD 83F904                  	cmp ecx , 4	
   938 00000EE0 0F8DBCF1FFFF            	jge vV_bound_error	
   939 00000EE6 01C8                    	add eax , ecx	
   940 00000EE8 C1E002                  	shl eax , 2	
   941 00000EEB B901000000              	mov ecx , 1	
   942 00000EF0 83F904                  	cmp ecx , 4	
   943 00000EF3 0F8DA9F1FFFF            	jge vV_bound_error	
   944 00000EF9 01C8                    	add eax , ecx	
   945 00000EFB C1E002                  	shl eax , 2	
   946 00000EFE 4801C7                  	add rdi , rax	
   947 00000F01 8B07                    	mov eax , [rdi]	
   948                                  	vV_push eax	
   948                              <1> 
   948 00000F03 418907              <1>  mov DWORD[vV_sp] , %1
   948 00000F06 4983C704            <1>  add vV_sp , 4
   948                              <1> 
   949                                  
   950                                   ;OpADR: [102]  ; OUT opcode (0)			
   951                                  
   952 00000F0A E8E9F2FFFF              	call vV_io_out_default			
   953                                  						
   954                                  
   955                                   ;OpADR: [103]  ; Var invocation					
   956                                  
   957 00000F0F 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   958 00000F17 4831C0                  	xor rax , rax	
   959 00000F1A B901000000              	mov ecx , 1	
   960 00000F1F 83F904                  	cmp ecx , 4	
   961 00000F22 0F8D7AF1FFFF            	jge vV_bound_error	
   962 00000F28 01C8                    	add eax , ecx	
   963 00000F2A C1E002                  	shl eax , 2	
   964 00000F2D B902000000              	mov ecx , 2	
   965 00000F32 83F904                  	cmp ecx , 4	
   966 00000F35 0F8D67F1FFFF            	jge vV_bound_error	
   967 00000F3B 01C8                    	add eax , ecx	
   968 00000F3D C1E002                  	shl eax , 2	
   969 00000F40 4801C7                  	add rdi , rax	
   970 00000F43 8B07                    	mov eax , [rdi]	
   971                                  	vV_push eax	
   971                              <1> 
   971 00000F45 418907              <1>  mov DWORD[vV_sp] , %1
   971 00000F48 4983C704            <1>  add vV_sp , 4
   971                              <1> 
   972                                  
   973                                   ;OpADR: [104]  ; OUT opcode (0)			
   974                                  
   975 00000F4C E8A7F2FFFF              	call vV_io_out_default			
   976                                  						
   977                                  
   978                                   ;OpADR: [105]  ; Var invocation					
   979                                  
   980 00000F51 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
   981 00000F59 4831C0                  	xor rax , rax	
   982 00000F5C B901000000              	mov ecx , 1	
   983 00000F61 83F904                  	cmp ecx , 4	
   984 00000F64 0F8D38F1FFFF            	jge vV_bound_error	
   985 00000F6A 01C8                    	add eax , ecx	
   986 00000F6C C1E002                  	shl eax , 2	
   987 00000F6F B903000000              	mov ecx , 3	
   988 00000F74 83F904                  	cmp ecx , 4	
   989 00000F77 0F8D25F1FFFF            	jge vV_bound_error	
   990 00000F7D 01C8                    	add eax , ecx	
   991 00000F7F C1E002                  	shl eax , 2	
   992 00000F82 4801C7                  	add rdi , rax	
   993 00000F85 8B07                    	mov eax , [rdi]	
   994                                  	vV_push eax	
   994                              <1> 
   994 00000F87 418907              <1>  mov DWORD[vV_sp] , %1
   994 00000F8A 4983C704            <1>  add vV_sp , 4
   994                              <1> 
   995                                  
   996                                   ;OpADR: [106]  ; OUT opcode (0)			
   997                                  
   998 00000F8E E865F2FFFF              	call vV_io_out_default			
   999                                  						
  1000                                  
  1001                                   ;OpADR: [107]  ; FLUSH opcode					
  1002                                  
  1003 00000F93 E81FF2FFFF              		call vV_io_flush	
  1004                                  
  1005                                   ;OpADR: [108]  ; Var Ref assignement					
  1006                                  
  1007 00000F98 4831C0                  	xor rax , rax
  1008 00000F9B 488D3C25[AA020000]      	lea rdi , [u_global.matrix]	
  1009 00000FA3 4889FE                  	mov rsi , rdi	
  1010 00000FA6 4801C6                  	add rsi , rax	
  1011 00000FA9 4831C0                  	xor rax , rax
  1012 00000FAC 488D3C25[EA020000]      	lea rdi , [u_global.xyg]	
  1013 00000FB4 4801C7                  	add rdi , rax	
  1014 00000FB7 4889F0                  	mov  rax , rsi	
  1015 00000FBA 8907                    	mov [rdi] , eax	
  1016                                  
  1017                                   ;OpADR: [109]  ; Var invocation					
  1018                                  
  1019 00000FBC 488D3C25[EA020000]      	lea rdi , [u_global.xyg]	
  1020 00000FC4 8B3F                    	mov edi , [rdi]	
  1021 00000FC6 4831C0                  	xor rax , rax	
  1022 00000FC9 B901000000              	mov ecx , 1	
  1023 00000FCE 83F904                  	cmp ecx , 4	
  1024 00000FD1 0F8DCBF0FFFF            	jge vV_bound_error	
  1025 00000FD7 01C8                    	add eax , ecx	
  1026 00000FD9 C1E002                  	shl eax , 2	
  1027 00000FDC B901000000              	mov ecx , 1	
  1028 00000FE1 83F904                  	cmp ecx , 4	
  1029 00000FE4 0F8DB8F0FFFF            	jge vV_bound_error	
  1030 00000FEA 01C8                    	add eax , ecx	
  1031 00000FEC C1E002                  	shl eax , 2	
  1032 00000FEF 4801C7                  	add rdi , rax	
  1033 00000FF2 8B07                    	mov eax , [rdi]	
  1034                                  	vV_push eax	
  1034                              <1> 
  1034 00000FF4 418907              <1>  mov DWORD[vV_sp] , %1
  1034 00000FF7 4983C704            <1>  add vV_sp , 4
  1034                              <1> 
  1035                                  
  1036                                   ;OpADR: [110]  ; OUT opcode (0)			
  1037                                  
  1038 00000FFB E8F8F1FFFF              	call vV_io_out_default			
  1039                                  						
  1040                                  
  1041                                   ;OpADR: [111]  ; PUSH opcode 
  1042                                  
  1043                                  	vV_push 543521122 
  1043                              <1> 
  1043 00001000 41C70762796520      <1>  mov DWORD[vV_sp] , %1
  1043 00001007 4983C704            <1>  add vV_sp , 4
  1043                              <1> 
  1044                                  
  1045                                  
  1046                                   ;OpADR: [112]  ; OUT opcode (9)			
  1047                                  
  1048                                  								
  1049 0000100B E85DF2FFFF              	call vV_io_out_packed_char				
  1050                                  						
  1051                                  		
  1052 00001010 C3                      		ret
  1053                                  
  1054                                  ;Transpiled from vV with vVc version 0.0.4
  1055                                  		
  1056                                  		
