     1                                  %define SYS_EXIT 60
     2                                  %include "wio.asm"
     1                              <1> 
     2                              <1> ;Group all read/wrie syscalls
     3                              <1> 
     4                              <1> ;global convert_to_string
     5                              <1> ;global convert_to_int
     6                              <1> 
     7                              <1> ;extern w_input_buffer
     8                              <1> ;extern w_output_buffer
     9                              <1> ;extern w_number_buffer
    10                              <1> 
    11                              <1> global wio_out
    12                              <1> global wio_get
    13                              <1> global wio_get_str_raw
    14                              <1> global wio_get_str_null
    15                              <1> global wio_get_str_nline
    16                              <1> global wio_move_in_to_out
    17                              <1> 
    18                              <1> 
    19                              <1> segment .bss 
    20                              <1> 	ALIGN 32
    21 00000000 <res 00000004>      <1> 	test: resb 4
    22                              <1> 
    23                              <1> 
    24                              <1> 	
    25                              <1> segment .data 
    26                              <1> 
    27                              <1> 
    28                              <1> 	divisorTable:
    29 00000000 00CA9A3B            <1>    	dd 1000000000
    30 00000004 00E1F505            <1>    	dd 100000000
    31 00000008 80969800            <1>    	dd 10000000
    32 0000000C 40420F00            <1>    	dd 1000000
    33 00000010 A0860100            <1> 	dd 100000
    34 00000014 10270000            <1>   	dd 10000
    35 00000018 E8030000            <1> 	dd 1000
    36 0000001C 64000000            <1> 	dd 100
    37 00000020 0A000000            <1> 	dd 10
    38 00000024 01000000            <1> 	dd 1
    39                              <1> 
    40                              <1> 
    41                              <1> segment .text 
    42                              <1> 
    43                              <1> 
    44                              <1> convert_to_string:				; arg: rax  result: w_number_buffer
    45                              <1> 
    46 00000000 41B800000000        <1> 	mov r8 , 0			;set couner to 0
    47 00000006 41B90A000000        <1> 	mov r9 , 10			;set max to 10
    48                              <1> 	
    49                              <1> 	.loop:
    50                              <1> 	
    51 0000000C 4831D2              <1> 	xor rdx , rdx					;ero out rdx
    52                              <1> 	
    53 0000000F 42F73485[00000000]  <1> 	div dword [divisorTable + r8 * 4]		;div rax by consecutive power of 10
    54                              <1> 	
    55 00000017 4883C030            <1> 	add rax , '0'					;convert result to ascii
    56                              <1> 	
    57 0000001B 418880[4A020000]    <1> 	mov [w_number_buffer + r8] , al		;
    58                              <1> 	
    59 00000022 4889D0              <1> 	mov rax, rdx
    60                              <1> 	
    61 00000025 49FFC0              <1> 	inc r8
    62                              <1> 	
    63 00000028 4D39C8              <1> 	cmp r8, r9
    64                              <1> 	
    65 0000002B 75DF                <1> 	jne .loop
    66                              <1> 	
    67 0000002D C3                  <1> 	ret 
    68                              <1> 	
    69                              <1> 	
    70                              <1> 	
    71                              <1> 
    72                              <1> convert_to_int:			;convert string from w_number_buffer to int value in rax
    73                              <1> 
    74                              <1> 					;	Input: rax->digit_number
    75                              <1> 
    76 0000002E 4989C1              <1> 	mov r9 , rax 	;		number of digits
    77                              <1> 	
    78 00000031 BB0A000000          <1> 	mov rbx , 10				;our awfull human base
    79                              <1> 	
    80 00000036 49FFC9              <1> 	dec r9					; since starting from 0
    81                              <1> 	
    82 00000039 4D31C0              <1> 	xor r8 , r8				; count number of digits processed
    83                              <1> 	
    84 0000003C 48BE-               <1> 	mov rsi , w_number_buffer		;adress of string to numerize
    84 0000003E [4A02000000000000]  <1>
    85                              <1> 	
    86 00000046 4831C0              <1> 	xor rax , rax
    87 00000049 4831D2              <1> 	xor rdx , rdx
    88                              <1> 
    89                              <1> 	.start:
    90                              <1> 	
    91 0000004C 8A16                <1> 	mov dl , [rsi]				;fetch char ascii
    92 0000004E 83EA30              <1> 	sub edx , '0'				;convert to value
    93 00000051 01D0                <1> 	add eax , edx				;add to output
    94                              <1> 
    95 00000053 49FFC0              <1> 	inc r8					;increment counter
    96 00000056 48FFC6              <1> 	inc rsi				;and pointer		(maybe one is enough)
    97                              <1> 	
    98 00000059 4D39C8              <1> 	cmp r8 , r9				;check if finished
    99 0000005C 7404                <1> 	je .end
   100                              <1> 	
   101 0000005E F7E3                <1> 	mul ebx				;move one column to the left
   102                              <1> 	
   103 00000060 EBEA                <1> 	jmp .start				;proceed to next digit
   104                              <1> 	
   105                              <1> 	
   106                              <1> 	.end:
   107                              <1> 	
   108                              <1> 	
   109 00000062 C3                  <1> 	ret
   110                              <1> 	
   111                              <1> 	
   112                              <1> 	
   113                              <1> 
   114                              <1> 
   115                              <1> 
   116                              <1> 	wio_out:				; print top of data stack (int->str)
   117                              <1> 	
   118 00000063 4983EF04            <1> 		sub r15 , 4
   119                              <1> 	
   120 00000067 418B07              <1> 		mov eax, [r15]				;set rax to top of dstack
   121                              <1> 		
   122                              <1> 		
   123                              <1> 		
   124 0000006A E891FFFFFF          <1> 		call convert_to_string				;get str repr of rax in w_number_buffer
   125                              <1> 		
   126                              <1> 		
   127 0000006F BA0B000000          <1> 		mov edx , 11				;string lenght		#TODO: remove leading 0
   128 00000074 48BE-               <1> 		mov rsi , w_number_buffer		;strng ptr
   128 00000076 [4A02000000000000]  <1>
   129 0000007E BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   130 00000083 B801000000          <1> 		mov rax , 1				; Write sysCall
   131 00000088 0F05                <1> 		syscall
   132                              <1> 	
   133 0000008A C3                  <1> 		ret
   134                              <1> 		
   135                              <1> 		
   136                              <1> 	wio_get:
   137                              <1> 	
   138                              <1> 	
   139 0000008B 48BE-               <1> 		mov rsi , w_number_buffer		;ptr to string destination	
   139 0000008D [4A02000000000000]  <1>
   140 00000095 BA0A000000          <1> 		mov edx , 10				;string lenght		#TODO: handle multiple lenght numbers
   141 0000009A BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   142 0000009F B800000000          <1> 		mov rax , 0				; read sysCall
   143                              <1> 		
   144 000000A4 0F05                <1> 		syscall
   145                              <1> 		
   146 000000A6 E883FFFFFF          <1> 		call convert_to_int
   147                              <1> 		
   148 000000AB 418907              <1> 		mov [r15] , eax
   149                              <1> 		
   150 000000AE 4983C704            <1> 		add r15 , 4
   151                              <1> 		
   152 000000B2 C3                  <1> 		ret
   153                              <1> 		
   154                              <1> 	wio_get_str_raw:		;removes the new_line
   155                              <1> 	
   156 000000B3 49BA-               <1> 		mov r10 , .end
   156 000000B5 [BF00000000000000]  <1>
   157                              <1> 		
   158                              <1> 		
   159                              <1> 		
   160                              <1> 		
   161 000000BD EB39                <1> 		jmp wio_get_str
   162                              <1> 		
   163                              <1> 		.end:
   164                              <1> 		
   165 000000BF FF0C25[44000000]    <1> 		dec DWORD [w_input_buffer-4]
   166                              <1> 		
   167                              <1> 	
   168                              <1> 		
   169 000000C6 C3                  <1> 		ret
   170                              <1> 	
   171                              <1> 	wio_get_str_null:		;null terminated
   172                              <1> 	
   173 000000C7 49BA-               <1> 		mov r10 , .end
   173 000000C9 [D300000000000000]  <1>
   174                              <1> 		
   175                              <1> 		
   176 000000D1 EB25                <1> 		jmp wio_get_str
   177                              <1> 		
   178                              <1> 		.end:
   179                              <1> 		
   180 000000D3 48BE-               <1> 		mov rsi , w_input_buffer
   180 000000D5 [4800000000000000]  <1>
   181                              <1> 		
   182 000000DD 033425[44000000]    <1> 		add esi ,[w_input_buffer -4]
   183                              <1> 		
   184 000000E4 48FFCE              <1> 		dec rsi
   185                              <1> 		
   186 000000E7 C60600              <1> 		mov BYTE [rsi] , 0
   187                              <1> 		
   188                              <1> 		
   189                              <1> 		
   190 000000EA C3                  <1> 		ret
   191                              <1> 	
   192                              <1> 	wio_get_str_nline:		;keep the new line
   193                              <1> 	
   194 000000EB 49BA-               <1> 		mov r10 , .end
   194 000000ED [F700000000000000]  <1>
   195                              <1> 		
   196                              <1> 		
   197 000000F5 EB01                <1> 		jmp wio_get_str
   198                              <1> 		
   199                              <1> 		.end:
   200                              <1> 		
   201 000000F7 C3                  <1> 		ret
   202                              <1> 		
   203                              <1> 		
   204                              <1> 	wio_get_str:				;arg: eax: size to read	r10: return adrr
   205                              <1> 							; ?? may use rsi for dest info???
   206                              <1> 							; then shouldn't increment rsi in get_str
   207                              <1> 							; maybe make a get_string_direct later???
   208                              <1> 							; or do adr calc before?
   209                              <1> 							; maybe 2 entry point/ 1 exit point?
   210                              <1> 	
   211                              <1> 	
   212 000000F8 48BE-               <1> 		mov rsi , w_input_buffer			;ptr to string destination	
   212 000000FA [4800000000000000]  <1>
   213 00000102 033425[44000000]    <1> 		add esi , [w_input_buffer - 4]
   214 00000109 89C2                <1> 		mov edx , eax				;string lenght		#TODO: handle multiple lenght numbers
   215                              <1> 		;sub edx , [w_input_buffer - 4]
   216 0000010B BF00000000          <1> 		mov rdi , 0				;file descriptor, stdin
   217 00000110 B800000000          <1> 		mov rax , 0				; read sysCall
   218                              <1> 		
   219 00000115 0F05                <1> 		syscall
   220                              <1> 		
   221                              <1> 		;dec eax
   222                              <1> 		
   223 00000117 010425[44000000]    <1> 		add [w_input_buffer-4] , eax
   224                              <1> 		
   225                              <1> 		
   226 0000011E 41FFE2              <1> 		jmp r10
   227                              <1> 		
   228                              <1> 		
   229                              <1> 	wio_move_in_to_out:
   230                              <1> 	
   231                              <1> 	
   232 00000121 8B0C25[44000000]    <1> 		mov ecx , [w_input_buffer-4]
   233 00000128 83C104              <1> 		add ecx , 4
   234 0000012B BE[44000000]        <1> 		mov esi , w_input_buffer-4
   235 00000130 BF[47010000]        <1> 		mov edi , w_output_buffer-4
   236                              <1> 		
   237 00000135 F3A4                <1> 		rep movsb
   238                              <1> 		
   239 00000137 C70425[44000000]00- <1> 		mov DWORD [w_input_buffer-4] , 0
   239 0000013F 000000              <1>
   240                              <1> 		
   241                              <1> 		
   242                              <1> 		
   243 00000142 C3                  <1> 		ret
   244                              <1> 	
   245                              <1> 	
   246                              <1> 		
   247                              <1> 		
   248                              <1> 	wio_flush:
   249                              <1> 	
   250                              <1> 	
   251                              <1> 		
   252 00000143 8B1425[47010000]    <1> 		mov edx , [w_output_buffer - 4]		;string lenght
   253 0000014A 48BE-               <1> 		mov rsi , w_output_buffer			;strng ptr
   253 0000014C [4B01000000000000]  <1>
   254 00000154 BF01000000          <1> 		mov rdi , 1				;file descriptor, stdout
   255 00000159 B801000000          <1> 		mov rax , 1				; Write sysCall
   256 0000015E 0F05                <1> 		syscall
   257                              <1> 	
   258 00000160 C3                  <1> 		ret
   259                              <1> 		
   260                              <1> 		
   261                              <1> 		
   262                              <1> 		
   263                              <1> 		
   264                              <1> 		
   265                              <1> 		
   266                              <1> 
   267                              <1> 
   268                              <1> 
     3                                  %include "w_runtime.asm"
     1                              <1> %define SYS_EXIT 60
     2                              <1> 
     3                              <1> ;%include "wio.asm"
     4                              <1> 
     5                              <1> %include "vV_system0.asm"
     1                              <2> 
     2                              <2> segment .bss
     3                              <2> 
     4                              <2> 	ALIGNB 4
     5 00000004 <res 00000040>      <2> 	vV_sys_start:	resd 16		;not used now
     6                              <2> 
     7                              <2> 
     6                              <1> %include "vV_system1.asm"
     1                              <2> 
     2                              <2> segment .bss
     3                              <2> 
     4                              <2> 	ALIGNB 4
     5                              <2> 	
     6                              <2> 	
     7                              <2> 	;------------Input Buffer
     8                              <2> 
     9                              <2> 
    10                              <2> 	
    11 00000044 <res 00000004>      <2> 	win_count: resb 4					;Input Buffer current content
    12 00000048 <res 000000FF>      <2> 	w_input_buffer: resb 255					;Input Buffer of 256 char
    13                              <2> 	
    14                              <2> 	
    15                              <2> 	
    16                              <2> 	
    17                              <2> ;------------Output Buffer
    18                              <2> 
    19                              <2> 
    20                              <2> 
    21                              <2> 	
    22 00000147 <res 00000004>      <2> 	wout_count: resb 4					;Output Buffer current content
    23 0000014B <res 000000FF>      <2> 	w_output_buffer: resb 255					;Output Buffer of 256 char
    24                              <2> 	
    25                              <2> 	
    26                              <2> 	
    27                              <2> 	
    28                              <2> ;------------Number Buffer
    29                              <2> 
    30                              <2> 
    31                              <2> 	
    32                              <2> 	
    33 0000024A <res 0000000A>      <2> 	w_number_buffer: resb 10				;Todo: Handle Bigger Numbers
    34 00000254 <res 00000001>      <2> 	endofline: resb 1					;Maybe Not Needed
    35                              <2> 	
    36                              <2> 
    37                              <2> 
    38                              <2> 
     7                              <1> %include "vV_memaloc.asm"
     1                              <2> 
     2                              <2> segment .bss
     3                              <2> 
     4                              <2> 	
     5                              <2> 	
     6                              <2> 	var_space:
     7 00000255 <res 00000003>      <2> 	ALIGNB 4
     8                              <2> ;---------------------------var reserved Space-----	
     9                              <2> 
    10                              <2> 	var_int:
    11                              <2> 		
    12 00000258 <res 00000800>      <2> 		resd	512
    13                              <2> 		
    14                              <2> 		
    15                              <2> 	var_sting:
    16                              <2> 	
    17 00000A58 <res 00000800>      <2> 		resb 	2048
    18                              <2> 		
    19                              <2> pad_needed equ 8
     8                              <1> %include "vV_stack_init.asm"
     1                              <2> 
     2                              <2> segment .bss
     3                              <2> 
     4                              <2> 	
     5                              <2> 	
     6 00001258 <res 00000008>      <2> 	stacks: resb pad_needed
     7                              <2> 	ALIGNB 4
     8                              <2> 
     9                              <2> 
    10 00001260 <res 00040000>      <2> 	string_stack_start: resb 262144
    11                              <2> 
    12                              <2> 
    13                              <2> 	
    14                              <2> 	
    15                              <2> 						
    16 00041260 <res 00020000>      <2> 	fake_stack_start: resb 131072
     9                              <1> 
    10                              <1> 
    11                              <1> global _start
    12                              <1> 
    13                              <1> global w_input_buffer
    14                              <1> global w_output_buffer
    15                              <1> global w_number_buffer
    16                              <1> 
    17                              <1> ;extern w_entry_point			;Defined by main program
    18                              <1> global w_forced_exit			;Error caused exit
    19                              <1> 
    20                              <1> 
    21                              <1> 	
    22                              <1> segment .data 
    23                              <1> 
    24 00000028 FF                  <1> 	is_main: db -1 			;May Be used for "lib" version of compile
    25                              <1> 						; or maybe another runtime?
    26                              <1> 
    27                              <1> 
    28                              <1> 	
    29                              <1> 
    30                              <1> segment .text 
    31                              <1> 
    32                              <1> 
    33                              <1> 	w_forced_exit:
    34                              <1> 	
    35                              <1> 	
    36 00000161 E816000000          <1> 		call restore_regs
    37                              <1> 		
    38 00000166 4889C7              <1> 		mov rdi, rax
    39 00000169 B83C000000          <1> 		mov rax, SYS_EXIT
    40 0000016E 0F05                <1> 		syscall
    41                              <1> 		
    42                              <1> 		
    43                              <1> 
    44                              <1> 
    45                              <1> 	save_regs:			;In case called from other process
    46                              <1> 	
    47 00000170 58                  <1> 		pop rax
    48                              <1> 	
    49 00000171 53                  <1> 		push rbx
    50 00000172 4154                <1> 		push r12
    51 00000174 4155                <1> 		push r13
    52 00000176 4156                <1> 		push r14
    53 00000178 4157                <1> 		push r15
    54                              <1> 		
    55 0000017A 50                  <1> 		push rax
    56                              <1> 		
    57 0000017B C3                  <1> 		ret
    58                              <1> 		
    59                              <1> 	restore_regs:
    60                              <1> 	
    61 0000017C 58                  <1> 		pop rax
    62                              <1> 	
    63 0000017D 415F                <1> 		pop r15
    64 0000017F 415E                <1> 		pop r14
    65 00000181 415D                <1> 		pop r13
    66 00000183 415C                <1> 		pop r12
    67 00000185 5B                  <1> 		pop rbx
    68                              <1> 		
    69 00000186 50                  <1> 		push rax
    70                              <1> 		
    71 00000187 C3                  <1> 		ret
    72                              <1> 		
    73                              <1> 	setup_memory:
    74                              <1> 	
    75 00000188 C70425[44000000]00- <1> 		mov DWORD [win_count] , 0
    75 00000190 000000              <1>
    76 00000193 C70425[47010000]00- <1> 		mov DWORD [wout_count] , 0
    76 0000019B 000000              <1>
    77                              <1> 		
    78 0000019E C70425[54020000]0A- <1> 		mov DWORD [endofline] , 0xa
    78 000001A6 000000              <1>
    79                              <1> 		
    80 000001A9 C3                  <1> 		ret
    81                              <1> 		
    82                              <1> 		
    83                              <1> 	
    84                              <1> 		
    85                              <1> _start:				;Entry point of Every Program
    86                              <1> 	
    87                              <1> 		
    88                              <1> 
    89 000001AA 4889E5              <1> 	mov rbp, rsp				;Setup Stack Frame
    90                              <1> 	
    91 000001AD 49BF-               <1> 	mov r15 , fake_stack_start			;setup fake data stack
    91 000001AF [6012040000000000]  <1>
    92                              <1> 	
    93 000001B7 E8B4FFFFFF          <1> 	call save_regs				;just in case
    94                              <1> 	
    95                              <1> 	
    96 000001BC E8C7FFFFFF          <1> 	call setup_memory			;all memory setup at start
    97                              <1> 	
    98                              <1> 	
    99                              <1> 	
   100 000001C1 E80C000000          <1> 	call w_entry_point			;Start the program 
   101                              <1> 	
   102                              <1> 
   103                              <1> 
   104                              <1> 
   105 000001C6 B83C000000          <1> 	mov rax, SYS_EXIT
   106 000001CB BF00000000          <1> 	mov rdi, 0				;Normal exit procedure (no code returned from main, need to call exit(code) forhat)
   107 000001D0 0F05                <1> 	syscall
   108                              <1> 	
   109                              <1> 	
   110                              <1> 	
   111                              <1> 	
   112                              <1> 	
     4                                  
     5                                  
     6                                  global w_entry_point
     7                                  
     8                                  
     9                                  ;extern w_input_buffer
    10                                  ;extern w_output_buffer
    11                                  ;extern w_number_buffer
    12                                  
    13                                  ;extern wio_out
    14                                  ;extern wio_get
    15                                  ;extern wio_get_str_raw
    16                                  ;extern wio_get_str_null
    17                                  ;extern wio_get_str_nline
    18                                  ;extern wio_move_in_to_out
    19                                  
    20                                  
    21                                  
    22                                  segment .text 
    23                                  
    24                                  
    25                                  
    26                                  
    27                                  w_entry_point:
    28                                  
    29                                  
    30 000001D2 4889E5                  	mov rbp, rsp			;Setup Stack Frame
    31                                  	
    32                                  	
    33                                  	;call wio_get
    34                                  	
    35                                  	;call wio_get
    36                                  	
    37 000001D5 41C7073F000000          	mov DWORD [r15] , 63
    38 000001DC 41C747047E000000        	mov DWORD [r15+4] , 126
    39 000001E4 4983C708                	add r15 , 8
    40                                  	
    41 000001E8 E89EFEFFFF              	call wio_get
    42                                  	
    43 000001ED E899FEFFFF              	call wio_get
    44                                  	
    45                                  	;mov eax, [r15-8]
    46                                  	;mov edx, [r15-4]
    47                                  	;mov [r15-8] , edx
    48                                  	;mov [r15-4] , eax
    49                                  	
    50                                  	
    51 000001F2 B902000000              	mov ecx , 2
    52 000001F7 498D77F8                	lea rsi , [r15-8]
    53 000001FB 4C89FF                  	mov rdi , r15
    54                                  		
    55 000001FE F3A5                    	rep movsd
    56                                  	
    57 00000200 4983C708                	add r15 , 8
    58                                  	
    59                                  	
    60                                  	
    61                                  	
    62 00000204 418B47FC                	mov eax , [r15-4]
    63 00000208 413947F8                	cmp DWORD[r15-8] , eax
    64                                  	
    65 0000020C 75(0C)                  	jnz short 0xc
    66                                  	
    67 0000020E 41C747F8FFFFFFFF        			mov DWORD[r15-8] , -1
    68                                  	
    69 00000216 EB(09)                  	jmp short 0x9
    70                                  	
    71 00000218 41C747F800000000        			mov DWORD[r15-8] , 0
    72                                  	
    73 00000220 4983EF04                	sub r15 , 4
    74                                  	
    75                                  	
    76                                  	
    77                                  	
    78                                  	
    79                                  
    80 00000224 4983EF04                	sub r15 , 4
    81 00000228 418337FF                	xor DWORD[r15] , -1
    82                                  	
    83 0000022C 7515                    	jne .else
    84                                  	
    85                                  	
    86 0000022E 41C70701000000          	mov DWORD [r15] , 1
    87 00000235 41C7470401000000        	mov DWORD [r15+4] , 1
    88 0000023D 4983C708                	add r15 , 8
    89                                  	
    90                                  	
    91 00000241 EB13                    	jmp .end
    92                                  	.else:
    93                                  	
    94                                  	
    95                                  
    96 00000243 41C70701000000          	mov DWORD [r15] , 1
    97 0000024A 41C7470401000000        	mov DWORD [r15+4] , 1
    98 00000252 4983C708                	add r15 , 8
    99                                  	
   100                                  	.end:
   101                                  	
   102                                  	
   103                                  	.do:
   104                                  	
   105 00000256 B901000000              	mov ecx , 1
   106 0000025B 498D77FC                	lea rsi , [r15-4]
   107 0000025F 4C89FF                  	mov rdi , r15
   108                                  		
   109 00000262 F3A5                    	rep movsd
   110                                  	
   111 00000264 4983C704                	add r15 , 4
   112                                  	
   113                                  	
   114 00000268 418B47F8                	mov eax , [r15 - 8]			
   115 0000026C 410347FC                	add eax , [r15-4]			
   116 00000270 418947F8                	mov [r15-8] , eax			
   117                                  
   118 00000274 4983EF04                	sub r15 , 4
   119                                  	
   120                                  	
   121 00000278 41837FFC0A              	cmp DWORD[r15-4] , 10
   122                                  	
   123                                  	
   124                                  	
   125                                  	
   126 0000027D 4983EF04                	sub r15 , 4
   127 00000281 418337FF                	xor DWORD[r15] , -1
   128 00000285 74CF                    	je .do
   129                                  	
   130                                  	
   131                                  	;call wio_get
   132                                  	
   133                                  	;call wio_get
   134                                  	
   135 00000287 E8D7FDFFFF              	call wio_out
   136                                  	
   137 0000028C E8D2FDFFFF              	call wio_out
   138 00000291 E8CDFDFFFF              	call wio_out
   139 00000296 E8C8FDFFFF              	call wio_out
   140                                  	
   141 0000029B B8FF000000              	mov eax , 255
   142                                  	
   143                                  	
   144                                  
   145                                  
   146                                  
   147                                  
   148 000002A0 4889EC                  	mov rsp , rbp
   149                                  	
   150 000002A3 C3                      	ret
